@Section
    @Title { Pressure--velocity coupling and time integration }
    @Tag { coupling }
@Begin

@PP
According to the decomoposition theorem of Ladyzhenskaya, a vector field @E { @B w } defined in a bounded domain @E { Omega } with smooth boundary @E { partial Omega } satisfies equation @NumberOf { ladyzhenskaya }, in which it is also satisfied that @E { nabla cdot @B a = 0 } with @E { @B a in Omega } and @E { @B a cdot @B n = 0 } with @E { @B a in partial Omega }.

@CenteredNumberedDisplay
  @Tag { ladyzhenskaya }
@Eq { @B w = @B a + nabla phione}

Consequently, by subtracting the gradient of a suitable scalar field @E { p } to a discrete velocity field @E { @B { u } sup p } a divergence-free vector field @E { @B u } is obtained (see expression @NumberOf { velTransf }).


@CenteredNumberedDisplay
  @Tag { velTransf }
@Eq { @B u = @B { u } sup p - nabla p}

Because @E { @B u } is a divergence-free vector field, the expression @NumberOf { velTransfDiv1 } has to be satisfied.

@BeginAlignedDisplays

@CenteredAlignedNumberedDisplay
  @Tag { velTransfDiv1 }
@Eq { nabla cdot @B u ^= 0 }

expression @NumberOf { velTransfDiv1 } otherwise written as in @NumberOf { velTransfDiv2 }

@CenteredAlignedNumberedDisplay
  @Tag { velTransfDiv2 }
@Eq { nabla cdot @B { u } sup p - nabla cdot ( nabla p ) ^= 0 }

which can be simplified to expression @NumberOf { velTransfDiv3 }

@CenteredAlignedNumberedDisplay
  @Tag { velTransfDiv3 }
@Eq { nabla cdot @B { u } sup p ^= nabla sup 2 p }

where @E { nabla sup 2 } is the Laplace operator, sometimes seen as @E { triangle }, which should not be confused with @E { Delta }.

@PP
In order to compute the solution, in section @NumberOf { integral } it was shown that the domain needed to be discretized. On a discrete grid, instead of using the operators above, such as the Laplace operator @E { triangle }, meant for continuous domains, one may use their analogs for discretized domains, in this case, the discrete Laplace operator @E { L }. As an example, expression @NumberOf { velTransfDiv3 }---also known as the Poisson equation---is written as in @NumberOf { velTransfDiv3Mat } when the continuous domain operators are replaced by their discrete homologues.

@CenteredAlignedNumberedDisplay
  @Tag { velTransfDiv3Mat }
@Eq { M @B { u } sup p ^= L p }

where @E { M } is the divergence and @E { L }, the Laplace operator. Note that @E { L = MG }, where @E { G } is the gradient. { Is it true? } @REV { For now on, @E { p } will be assumed constant for each CV, though @E { p } is not the same value over the whole domain. }

@PP
For each CV, expression @NumberOf { velTransfDiv3Mat } must be satisfied. Note that the left hand side (LHS) of the equation is computed as in expression @NumberOf { RHSCond1 } for a single CV. Equation @NumberOf { RHSCond2 } also has to be satisfied when accounting for all the CVs.

@CenteredAlignedNumberedDisplay
  @Tag { RHSCond1 }
@Eq { [ M @B { u } sup p ] sub i ^= int sub { Omega sub i } nabla cdot @B { u } sup p dS }

@CenteredAlignedNumberedDisplay
  @Tag { RHSCond2 }
@Eq { sum from i [ M @B { u } sup p ] sub i ^= int sub Omega nabla cdot @B { u } sup p dS = 0 }

@EndAlignedDisplays

@PP
By rearranging the Navier-Stokes equation (see equation @NumberOf { NSMomHyp }) and applying the decomoposition theorem of Ladyzhenskaya, the following can be obtained:

@BeginAlignedDisplays

@CenteredAlignedNumberedDisplay
  @Tag { NSCont1 }
@Eq { { partial u sub j } over { partial t } - nu nabla sup 2 u sub j + nabla cdot ( u sub j @B u ) + 1 over rho { partial p } over { partial x sub j } ^= 0 }
@CenteredAlignedNumberedDisplay
  @Tag { NSCont2 }
@Eq { nabla cdot @B u ^= 0 }

expressions @NumberOf { NSCont1 } and @NumberOf { NSCont2 } can be rewritten in matrix form for the discretized domain as the system of equations constituted by @NumberOf { NSDis1 } and @NumberOf { NSDis2 }

@CenteredAlignedNumberedDisplay
  @Tag { NSDis1 }
@Eq { Omega { d u } over { d t } + C ( u ) u + D u + Omega G p ^= 0 }
@CenteredAlignedNumberedDisplay
  @Tag { NSDis2 }
@Eq { M u ^= 0 }

where @E { -D } equals the diffusion and @E { - Omega G } equals the pressure. { Am I right? } @REV { Note that in the last system of equations, @E { p } is the scalar matrix for the discretized scalar field, not the pressure as it was in the system of equations for a continuous domain. }

In this project, the integral of equation @NumberOf { NSDisFull1 } (generalization of @NumberOf { NSDis1 }) with @NumberOf { NSDisFull2 } required the use of the Adams-Bashforth method. The pressure gradient term has been computed implicitly while the time derivative has been evaluated by means of the central difference.

@CenteredAlignedNumberedDisplay
  @Tag { NSDisFull1 }
@Eq { Omega { d u } over { d t } + C ( u ) u + D u + Omega G p ^= Omega f }
@CenteredAlignedNumberedDisplay
  @Tag { NSDisFull2 }
@Eq { M u ^= 0 }

@EndAlignedDisplays

The solution is achieved by first rearranging the equation above, as it can be seen in @NumberOf { NSDisRea }.

@CenteredNumberedDisplay
  @Tag { NSDisRea }
@Eq { { d u } over { d t } ^= R(u) - Gp}

where @E { R(u) } is

@CenteredNumberedDisplay
  @Tag { RfromNS }
@Eq { R(u) ^= -Omega sup { -1 } (C(u)u + Du ) + f }

and by applying the suppositions above, it is deduced that

@BeginAlignedDisplays

@CenteredAlignedNumberedDisplay
  @Tag { NSsolution1 }
@Eq { { u sup { n + 1 } - u sup n } over { Delta t } ^= 3 over 2 R sup n - 1 over 2 R sup { n - 1 } - Gp sup { n + 1 } }

@CenteredAlignedNumberedDisplay
  @Tag { NSsolution2 }
@Eq { M u sup { n + 1 } ^= 0 }

@EndAlignedDisplays

If the pressure gradient term and the mass conservation are ignored in @NumberOf { NSsolution1 }, it is safe to say that

@CenteredNumberedDisplay
  @Tag { NSupsolution }
@Eq { u sup p ^= u sup n + Delta t pmatrix { 3 over 2 R sup n - 1 over 2 R sup { n - 1 } } }

Note that the expression @NumberOf { NSupsolution } above is an explicit definition of @E { u sup p}. Then, @E { p tilde } is computed with the three expressions below.

@BeginAlignedDisplays

@CenteredAlignedNumberedDisplay
  @Tag { NSuppsolution1 }
@Eq { u sup { n + 1 } ^= u sup p - G p tilde }

@CenteredAlignedNumberedDisplay
  @Tag { NSuppsolution2 }
@Eq { M u sup { n + 1 } ^= 0 }

@CenteredAlignedNumberedDisplay
  @Tag { NSuppsolution3 }
@Eq {  M u sup p ^= L p tilde }

The true pressure is finally evaluated with @E { p sup { n + 1 } = { p tilde } over { Delta t } }.

@EndAlignedDisplays

@PP
This procedure requires a very specific @E { Delta t } so a solution is found. By using expression @NumberOf { deltat }, some values can be found.

@CenteredNumberedDisplay
  @Tag { deltat }
@Eq { Delta t = f @R Min (Delta t sub c, Delta t sub d ) }

where @E { f } is a value between 0.2 and 0.5, and @E { Delta t sub d } and @E { Delta t sub c } are given by @NumberOf { deltatd } and @NumberOf { deltatc }, respectively.

@CenteredNumberedDisplay
  @Tag { deltatd }
@Eq { Delta t sub d <= 1 over 2 @R Min pmatrix { { Delta sup 2 } over nu } }

@CenteredNumberedDisplay
  @Tag { deltatc }
@Eq { Delta t sub C <= 1 over 2 @R Min pmatrix { Delta over { | u | } } }

The values of @E { Delta } and @E { u } can be found according to figure @NumberOf { deltatgrid }.

@Figure
  @Tag { deltatgrid }
  @Caption { Representation of the variables of interest }
@Begin
@IncludeGraphic "contents/figs/deltatgrid.eps"
@End @Figure

 { Is it true? Are they valid for non regular meshes? } @REV { Notice that in figure @NumberOf { deltatgrid } the mesh is square, so the expressions above are only valid in square or quasi-square meshes. }

@End @Section

%!PS-Adobe-3.0
%%Creator: Basser Lout Version 3.40 (June 2013)
%%CreationDate: Mon Jul 31 15:54:56 2017
%%DocumentData: Binary
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentMedia: A4 595 842 0 white ()
%%PageOrder: Ascend
%%LanguageLevel: 2
%%Pages: (atend)
%%BoundingBox: 0 0 595 842
%%EndComments
%%BeginProlog
%%BeginResource: procset LoutStartUp
/cp_x 0 def
/cp_y 0 def
/louts 0 def
/loutv 0 def
/loutf 0 def
/ymark 0 def
/xmark 0 def
/ysize 0 def
/xsize 0 def
/save_cp { currentpoint /cp_y exch def /cp_x exch def } bind def
/restore_cp { cp_x cp_y moveto } bind def
/outline { gsave 1 1 1 setrgbcolor dup show save_cp
  grestore true charpath stroke restore_cp } bind def
/m  { 3 1 roll moveto show } bind def
/mo { 3 1 roll moveto outline } bind def
/s  { exch currentpoint exch pop moveto show } bind def
/so { exch currentpoint exch pop moveto outline } bind def
/k  { exch neg 0 rmoveto show } bind def
/ko { exch neg 0 rmoveto outline } bind def
/r  { exch 0 rmoveto show } bind def
/ro { exch 0 rmoveto outline } bind def
/c  { gsave 3 1 roll rmoveto show grestore } bind def
/co { gsave 3 1 roll rmoveto outline grestore } bind def
/ul { gsave setlinewidth dup 3 1 roll
      moveto lineto stroke grestore } bind def
/in { 1440 mul } bind def
/cm { 567 mul } bind def
/pt { 20 mul } bind def
/em { 120 mul } bind def
/sp { louts mul } def
/vs { loutv mul } def
/ft { loutf mul } def
/dg {           } def

/LoutGraphic {
  /louts exch def
  /loutv exch def
  /loutf exch def
  /ymark exch def
  /xmark exch def
  /ysize exch def
  /xsize exch def
} def

/LoutGr2 { gsave translate LoutGraphic gsave } def

/LoutFont
{ findfont exch scalefont setfont
} bind def

/LoutRecode {
  { findfont dup length dict begin
    {1 index /FID ne {def} {pop pop} ifelse} forall
    /Encoding exch def
    currentdict end definefont pop
  }
  stopped pop
} bind def

/PreEPSF_state 0 def
/dict_stack 0 def
/ops_count 0 def
/LoutStartEPSF { % prepare for EPSF inclusion
  /PreEPSF_state save def
  /dict_stack countdictstack def
  /ops_count count 1 sub def
  20 dict begin
  /showpage {} def
  0 setgray 0 setlinecap
  1 setlinewidth 0 setlinejoin
  10 setmiterlimit [] 0 setdash newpath
  /languagelevel where
  { pop languagelevel
    1 ne
    { false setstrokeadjust false setoverprint
    } if
  } if
} bind def

/LoutEPSFCleanUp { % clean up after EPSF inclusion
  count ops_count sub { pop } repeat
  countdictstack dict_stack sub { end } repeat
  PreEPSF_state restore
} bind def

% Find current texture (may be null)
% - LoutCurrentP p
/LoutCurrentP
{
  currentcolorspace
  0 get /Pattern eq
  {
    [ currentcolor ]
    dup length 1 sub get
  }
  {
    null
  } ifelse
} def

% Find current color and color space
% - LoutCurrentCCS c cs
/LoutCurrentCCS
{
  LoutCurrentP dup null eq
  {
    pop [ currentcolor ]
    currentcolorspace
  }
  {
    dup
    /UnderlyingColor get
    exch /UnderlyingColorSpace get
  } ifelse
} def

% Install c, cs, and (a copy of) p into graphics state
% c cs p LoutSetCCSP -
/LoutSetCCSP
{
  dup null eq
  {
    pop setcolorspace
    aload pop setcolor
  }
  {
    % copy pattern dictionary
    12 dict copy

    % record cs and c in p
    dup /UnderlyingColorSpace 3 index
    put
    dup /UnderlyingColor 4 index
    put

    % do setcolorspace and setcolor
    dup /PaintType get 1 eq
    {
      [ /Pattern ] setcolorspace
      setcolor
      pop pop
    }
    {
      [ /Pattern
      4 -1 roll
      ] setcolorspace
      exch aload length 1 add
      -1 roll
      setcolor
    } ifelse
  } ifelse
} bind def

% num LoutSetGray -
/LoutSetGray
{
  [ 2 1 roll ]
  [ /DeviceGray ]
  LoutCurrentP
  LoutSetCCSP
} bind def

% r g b LoutSetRGBColor -
/LoutSetRGBColor
{
  [ 4 1 roll ]
  [ /DeviceRGB ]
  LoutCurrentP
  LoutSetCCSP
} bind def

% h s b LoutSetHSBColor -
/LoutSetHSBColor
{
  gsave sethsbcolor
  currentrgbcolor grestore
  LoutSetRGBColor
} bind def

% c m y k LoutSetRGBColor -
/LoutSetCMYKColor
{
  [ 5 1 roll ]
  [ /DeviceCMYK ]
  LoutCurrentP
  LoutSetCCSP
} bind def

% p LoutSetTexture -
/LoutSetTexture
{
  LoutCurrentCCS
  3 -1 roll
  LoutSetCCSP
} bind def

% <scale > <scalex> <scaley> <rotate> <hshift> <vshift>
% <painttype> <bbox> <xstep> <ystep> <paintproc> LoutMakeTexture p
/LoutMakeTexture
{
  12 dict begin
  /PaintProc exch def
  /YStep exch def
  /XStep exch def
  /BBox exch def
  /PaintType exch def
  /PatternType 1 def
  /TilingType 1 def
  currentdict end
  7 1 roll
  matrix translate
  5 1 roll
  matrix rotate
  4 1 roll
  matrix scale
  exch dup matrix scale
  matrix concatmatrix
  matrix concatmatrix
  matrix concatmatrix
  /makepattern where
  {
    pop makepattern
  }
  {
    pop pop null
  } ifelse
} bind def

/LoutTextureSolid
{
  null
  LoutSetTexture
} bind def
%%EndResource

%%BeginResource: procset LoutBasicSetup
% @PrependGraphic file /home/arnau/lout.lib/include/bsf.lpg
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                                                    %
%  PostScript @SysPrependGraphic file for @BasicSetup                %
%                                                                    %
%  This file has been placed in the public domain by its author,     %
%  Jeffrey H. Kingston                                               %
%                                                                    %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% width height linethickness louteuro -
% draw a Euro symbol of this width and height with this line thickness
/louteuro {
  20 dict begin
    /eurothick exch def
    /euroheight exch def
    /eurowidth exch def
    /eurostrokewidth euroheight 0.8 mul def
    /eurostep eurothick 60 cos mul 60 sin div def
    /eurotheta 40 def

    % llx lly width thickness louteurobox -
    % draw angled box starting at (llx, lly) with given width and thickness
    /louteurobox
    {
      /euroboxthick exch def
      /euroboxwidth exch def
      newpath moveto euroboxwidth 0 rlineto
      eurostep euroboxthick rlineto
      euroboxwidth neg 0 rlineto closepath fill
    } def

    % lower cross stroke
    0 euroheight 2 div eurothick 1.5 mul sub
    eurostrokewidth eurothick louteurobox

    % upper cross stroke
    0 euroheight 2 div eurothick 0.5 mul add
    eurostrokewidth eurostep 2 mul add eurothick louteurobox

    % circular part
    /eurohctr eurowidth euroheight 2 div eurotheta cos mul sub def
    /eurovctr euroheight 2 div def
    newpath
    eurohctr eurovctr eurovctr eurotheta 350 eurotheta sub arc
    eurohctr eurovctr eurovctr eurothick sub 365 eurotheta sub eurotheta arcn
    closepath fill
  end
} def

% path for @FullWidthRule symbol
/LoutRule
{ 0 0 moveto xsize 0 lineto
} def

% path for @Box symbol
/LoutBox
{ 0 0 moveto xsize 0 lineto
  xsize ysize lineto 0 ysize lineto
  closepath
} def

% path for @CurveBox symbol
/LoutCurveBox
{ xmark 0 moveto
  xsize xmark sub xmark xmark 270 360 arc
  xsize xmark sub ysize xmark sub xmark 0 90 arc
  xmark ysize xmark sub xmark 90 180 arc
  xmark xmark xmark 180 270 arc
  closepath
} def

% path for @ShadowBox symbol
/LoutShadowBox
{ xmark 2 mul 0 moveto xsize 0 lineto
  xsize ysize xmark 2 mul sub lineto
  xsize xmark sub ysize xmark 2 mul sub lineto
  xsize xmark sub xmark lineto
  xmark 2 mul xmark lineto
  closepath
} def

% set up dictionary containing margin note data: parity LoutMargSet -
/LoutMargSet
{ /LoutMargDict 12 dict def
  LoutMargDict begin
    /parity exch def
    /matr matrix currentmatrix def
    /rightx xsize def
    /lefty ysize def   % highest allowable point for top of next left note
    /righty ysize def  % highest allowable point for top of next right note
    /max { 2 copy gt { pop } { exch pop } ifelse } def
    /min { 2 copy lt { pop } { exch pop } ifelse } def
  end
} def

%translate coordinate system for marginal notes:  type LoutMargShift -
% where type 0 is left margin, 1 is right margin, 2 is outer, 3 is inner
/LoutMargShift
{ LoutMargDict begin

    % y coordinate of top of note, in margin coords, before vertical adjust
    0 ysize transform matr itransform exch pop

    % decide whether left or right margin based on type and parity
    exch [ 0 1 parity 1 parity sub ] exch get 0 eq
    {
      % left margin: adjust top of note downwards if overlaps previous note
      lefty min

      % bottom of note is new lefty position and also translate position
      ysize sub dup /lefty exch def

      % want right edge of note at coordinate zero
      xsize neg exch
    }
    {
      % right margin: adjust top of note downwards if overlaps previous note
      righty min

      % bottom of note is new righty position and also translate position
      ysize sub dup /righty exch def

      % want left edge of note at coordinate rightx
      rightx exch
    } ifelse

    % stack now contains coord of bottom left corner in margin coordinates
    matr setmatrix translate
  end
} def

% create LoutPageDict with left, right, foot, top for @Place symbol users
/LoutPageSet
{
  /LoutPageDict 5 dict def
  LoutPageDict begin
    /matr matrix currentmatrix def
    /left 0 def
    /right xsize def
    /foot 0 def
    /top ysize def
  end

} def

%%EndResource

%%BeginResource: procset LoutDiagPrependGraphic
% @PrependGraphic file /home/arnau/lout.lib/include/diagf.lpg
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                                                    %
%  PostScript @SysPrependGraphic file for @Diag Jeffrey H. Kingston  %
%  Version 2.0 (includes CIRCUM label)                September 1996 %
%                                                                    %
%  This file has been placed in the public domain by its author,     %
%  Jeffrey H. Kingston                                               %
%                                                                    %
%  To assist in avoiding name clashes, the names of all symbols      %
%  defined here begin with "ldiag".  However, this is not feasible   %
%  with user-defined labels and some labels used by users.           %
%                                                                    %
%  <point>      is two numbers, a point.                             %
%  <length>     is one number, a length                              %
%  <angle>      is one number, an angle in degrees                   %
%  <dashlength> is one number, the preferred length of a dash        %
%                                                                    %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

errordict begin
   /handleerror
   {
      {  /Times-Roman findfont 8 pt scalefont setfont
	 0 setgray 4 pt 4 pt moveto
	 $error /errorname get
	 dup ldiagdict exch known
	 { ldiagdict exch get }
	 { 100 string cvs } ifelse
	 show
	 (  Command: ) show
	 $error /command get 100 string cvs show
      } stopped {} if
      showpage stop
   } def
end

% begin diagram: <maxlabels> ldiagbegin -
% must be defined outside ldiagdict since it loads it
/ldiagbegin
{ xsize 0 0 ysize ldiagdict begin
  5 -1 roll /ldiagmaxlabels exch def
  (@Diag) ldiagpushtagdict
  /OOY ldiagpointdef /OOX ldiagpointdef 0 0 /OOO ldiagpointdef
} def

% end diagram: - ldiagend -
/ldiagend
{ ldiagpoptagdict end
} def

% concat strings: <string> <string> ldiagconcat <string>
% must be defined outside ldiagdict since used in ldiagpromotelabels
/ldiagconcat
{ 2 copy length exch length add string
  dup 0 4 index putinterval
  dup 3 index length 3 index putinterval
  3 1 roll pop pop
} def

% mconcat strings: <string> <string> ldiagmconcat <string>
% returns concatenation, separated by @ if first is non-empty
% must be defined outside ldiagdict since used in ldiagpromotelabels
/ldiagmconcat
{
  2 copy length exch length add 1 add string
  dup 0 4 index putinterval
  dup 3 index length (@) putinterval
  dup 3 index length 1 add 3 index putinterval
  3 1 roll pop pop
} def

% show string in format start ... end: <string> ldiagsends <string>
/ldiagsends
{
  dup length 20 string cvs (: ) ldiagconcat exch
  dup 0 20 getinterval ( ... ) ldiagconcat
  3 -1 roll exch ldiagconcat
  exch dup length 20 sub 20 getinterval ldiagconcat
} def

/ldiagdebugposy 432 def
/ldiagdebugposx 72 def

% - ldiagdebugnextline -
/ldiagdebugnextline
{
  ldiagdebugposy 72 lt
  { /ldiagdebugposx ldiagdebugposx 144 add store
    /ldiagdebugposy 432 store
  }
  {
    /ldiagdebugposy ldiagdebugposy 12 sub store
  } ifelse
  ldiagdebugposx ldiagdebugposy moveto
} def

% - ldiagdebugbeginindent -
/ldiagdebugbeginindent
{
  /ldiagdebugposx ldiagdebugposx 12 add store
} def

% - ldiagdebugendindent -
/ldiagdebugendindent
{
  /ldiagdebugposx ldiagdebugposx 12 sub store
} def

% <string> <int> ldiagdebugprint -
% must be defined outside ldiagdict since used in arbitrary places
% print <string> plus count or <int> stack entries, whichever is the smaller
/ldiagdebugprint
{
  exch
  gsave
  initgraphics
  ldiagdebugnextline
  /Times-Roman findfont 10 scalefont setfont
  0 setgray show
  ldiagdebugbeginindent
  count 1 sub 2 copy lt { pop } { exch pop } ifelse 1 sub
  0 exch 1 exch
  {
    ldiagdebugnextline
    index
    dup type (dicttype) eq
    {
      (begin dict) show
      ldiagdebugbeginindent
      {
	ldiagdebugnextline
	pop 100 string cvs show
      } forall
      ldiagdebugendindent
      ldiagdebugnextline
      (end dict) show
    }
    {
      dup type (arraytype) eq
      {
        (begin array) show
        ldiagdebugbeginindent
	{
	  ldiagdebugnextline
	  100 string cvs show
	} forall
	ldiagdebugendindent
	ldiagdebugnextline
        (end array) show
      }
      {
        100 string cvs show
      } ifelse
    } ifelse
  } for
  ldiagdebugendindent
  grestore
} def

/ldiagdict 200 dict def
ldiagdict begin

% error messages
/dictfull (dictfull error:  too many labels?) def
/dictstackoverflow (dictstackoverflow error:  labels nested too deeply?) def
/execstackoverflow (execstackoverflow error:  figure nested too deeply?) def
/limitcheck (limitcheck error:  figure nested too deeply or too large?) def
/syntaxerror (syntaxerror error:  syntax error in text of figure?) def
/typecheck (typecheck error:  syntax error in text of figure?) def
/undefined (undefined error:  unknown or misspelt label?) def
/VMError (VMError error:  run out of memory?) def

% push pi onto stack:  - ldiagpi <num>
/ldiagpi 3.14159 def

% push e onto stack:  - ldiage <num>
/ldiage 2.71828 def

% arc directions
/clockwise     false def
/anticlockwise true  def

% test equality between two angles:  <angle> <angle> ldiagangleeq <bool>
/ldiagangleeq { ldiagfixangle exch ldiagfixangle eq } def

% test inequality between two angles:  <angle> <angle> ldiaganglene <bool>
/ldiaganglene { ldiagangleeq not } def

% maximum of two numbers:  <num> <num> ldiagmax <num>
/ldiagmax { 2 copy gt { pop } { exch pop } ifelse } def

% minimum of two numbers:  <num> <num> ldiagmin <num>
/ldiagmin { 2 copy lt { pop } { exch pop } ifelse } def

% add two points:  <point> <point> ldiagpadd <point>
/ldiagpadd
{
  % (Entering padd) 4 ldiagdebugprint
  exch 3 1 roll add 3 1 roll add exch
  % (Leaving padd) 2 ldiagdebugprint
} def

% subtract first point from second:  <point> <point> ldiagpsub <point>
/ldiagpsub { 3 2 roll sub 3 1 roll exch sub exch } def

% max two points:  <point> <point> ldiagpmax <point>
/ldiagpmax { exch 3 1 roll ldiagmax 3 1 roll ldiagmax exch } def

% min two points:  <point> <point> ldiagpmin <point>
/ldiagpmin { exch 3 1 roll ldiagmin 3 1 roll ldiagmin exch } def

% scalar multiplication: <point> <num> ldiagpmul <point>
/ldiagpmul { dup 3 1 roll mul 3 1 roll mul exch } def

% point at angle and distance:  <point> <length> <angle> ldiagatangle <point>
/ldiagatangle { 2 copy cos mul 3 1 roll sin mul ldiagpadd } def

% angle from one point to another:  <point> <point> ldiagangleto <angle>
/ldiagangleto { ldiagpsub 2 copy 0 eq exch 0 eq and {pop} {exch atan} ifelse } def

% distance between two points:  <point> <point> ldiagdistance <length>
/ldiagdistance { ldiagpsub dup mul exch dup mul add sqrt } def

% stroke a noline line:  <length> <dashlength> ldiagnoline -
/ldiagnoline
{ pop pop
} def

% stroke a solid line:  <length> <dashlength> ldiagsolid -
/ldiagsolid
{  pop pop [] 0 setdash 1 setlinecap stroke
} def

% stroke a dashed line:   <length> <dashlength> ldiagdashed -
/ldiagdashed
{  2 copy div 2 le 1 index 0 le or
   {  exch pop 1 pt ldiagmax [ exch dup ] 0 setdash }
   {  dup [ exch 4 2 roll 2 copy div
      1 sub 2 div ceiling dup 4 1 roll
      1 add mul sub exch div ] 0 setdash
   } ifelse 0 setlinecap stroke
} def

% stroke a cdashed line:  <length> <dashlength> ldiagcdashed -
/ldiagcdashed
{  % (Entering ldiagcdashed) 2 ldiagdebugprint
   2 copy le 1 index 0 le or
   { exch pop 1 pt ldiagmax [ exch dup ] dup 0 get 2 div setdash }
   { dup [ 4 2 roll exch 2 copy exch div
     2 div ceiling div 1 index sub
     ] exch 2 div setdash
   } ifelse 0 setlinecap stroke
   % (Leaving ldiagcdashed) 0 ldiagdebugprint
} def

% stroke a dotted line:  <length> <dashlength> ldiagdotted -
/ldiagdotted
{  2 copy le 1 index 0 le or
   { exch pop 1 pt ldiagmax [ exch 0 exch ] 0 setdash }
   { 1 index exch div ceiling div
     [ 0 3 2 roll ] 0 setdash
   } ifelse 1 setlinecap stroke
} def

% scale array elements by factor:  <array> <factor> ldiagscalearray <array>
/ldiagscalearray
{
  [ exch 3 2 roll
  { exch dup 3 1 roll mul exch } forall
  pop ]
} def

% sum array elements:  <array> ldiagsumarray <number>
/ldiagsumarray
{
  0 exch { add } forall
} def

% begin a more complex line: <length> <dashlength> ldiaglinebegin -
/ldiaglinebegin
{
  % (Entering ldiaglinebegin) 2 ldiagdebugprint
  20 dict begin
  /dashlen exch 1 pt ldiagmax def
  /len exch def
  /gap dashlen def
  /halfgap dashlen 2 div def
  /dash dashlen def
  /halfdash dashlen 2 div def
  /dot 0 def
  % (Leaving ldiaglinebegin) 0 ldiagdebugprint
} def

% end a more complex line: <linecap> <cycle> <startpos> <stoppos> ldiaglineend -
/ldiaglineend
{
  % (Entering ldiaglineend) 3 ldiagdebugprint
  /stoppos exch def
  /startpos exch def
  /cycle exch def
  /linecap exch def
  /stopposlen stoppos ldiagsumarray def
  /startposlen startpos ldiagsumarray def
  /cyclelen cycle ldiagsumarray def
  /effectivelen len startposlen add stopposlen sub def
  effectivelen 0 gt cyclelen 0 gt and
  {
    /repeats effectivelen cyclelen div ceiling def
    /factor len repeats cyclelen mul startposlen sub stopposlen add div def
    cycle factor ldiagscalearray startposlen factor mul setdash
    linecap setlinecap stroke
  } if
  end
  % (Leaving ldiaglineend) 0 ldiagdebugprint
} def

% stroke a dotdashed line: <length> <dashlength> ldiagdotdashed -
/ldiagdotdashed
{
  ldiaglinebegin
  1 [dash gap dot gap] [] [dash]
  ldiaglineend
} def

% stroke a dotcdashed line: <length> <dashlength> ldiagdotcdashed -
/ldiagdotcdashed
{
  ldiaglinebegin
  1 [dash gap dot gap] [halfdash] [halfdash]
  ldiaglineend
} def

% stroke a dotdotdashed line: <length> <dashlength> ldiagdotdotdashed -
/ldiagdotdotdashed
{
  ldiaglinebegin
  1 [dash gap dot gap dot gap] [] [dash]
  ldiaglineend
} def

% stroke a dotdotcdashed line: <length> <dashlength> ldiagdotdotcdashed -
/ldiagdotdotcdashed
{
  ldiaglinebegin
  1 [dash gap dot gap dot gap] [halfdash] [halfdash]
  ldiaglineend
} def

% stroke a dotdotdotdashed line: <length> <dashlength> ldiagdotdotdotdashed -
/ldiagdotdotdotdashed
{
  ldiaglinebegin
  1 [dash gap dot gap dot gap dot gap] [] [dash]
  ldiaglineend
} def

% stroke a dotdotdotcdashed line: <length> <dashlength> ldiagdotdotdotcdashed -
/ldiagdotdotdotcdashed
{
  ldiaglinebegin
  1 [dash gap dot gap dot gap dot gap] [halfdash] [halfdash]
  ldiaglineend
} def

% shape and labels of the @Box symbol
% ldiagbox <shape>
/ldiagbox
{
   0     0         /SW  ldiagpointdef
   xsize 0         /SE  ldiagpointdef
   xsize ysize     /NE  ldiagpointdef
   0     ysize     /NW  ldiagpointdef

   xsize 0.25 mul ysize /NNW ldiagpointdef
   xsize 0.75 mul ysize /NNE ldiagpointdef
   xsize 0.25 mul     0 /SSW ldiagpointdef
   xsize 0.75 mul     0 /SSE ldiagpointdef

   SE 0.5 ldiagpmul /S   ldiagpointdef
   NW 0.5 ldiagpmul /W   ldiagpointdef
   W SE ldiagpadd   /E   ldiagpointdef
   S NW ldiagpadd   /N   ldiagpointdef

   NE 0.5 ldiagpmul /CTR ldiagpointdef

     0 dg /SSW@ANGLE  ldiagangledef
     0 dg /S@ANGLE    ldiagangledef
     0 dg /SSE@ANGLE  ldiagangledef
    45 dg /SE@ANGLE   ldiagangledef
    90 dg /E@ANGLE    ldiagangledef
   135 dg /NE@ANGLE   ldiagangledef
   180 dg /NNE@ANGLE  ldiagangledef
   180 dg /N@ANGLE    ldiagangledef
   180 dg /NNW@ANGLE  ldiagangledef
   225 dg /NW@ANGLE   ldiagangledef
   270 dg /W@ANGLE    ldiagangledef
   315 dg /SW@ANGLE   ldiagangledef

   [ CTR NE ldiagpsub /ldiagboxcircum cvx ] ldiagcircumdef
   SW SE NE NW SW
} def

% shape and labels of the @CurveBox symbol
% <margin> ldiagcurvebox <shape>
/ldiagcurvebox
{  

   % (Entering ldiagcurvebox) 1 ldiagdebugprint
   ldiagdecodelength /cbmgn exch def

   xsize 0.5 mul	ysize 0.5 mul	/CTR ldiagpointdef
   xsize 0.5 mul	0		/S   ldiagpointdef
   xsize		ysize 0.5 mul	/E   ldiagpointdef
   xsize 0.5 mul	ysize		/N   ldiagpointdef
   0			ysize 0.5 mul	/W   ldiagpointdef

   cbmgn 0.293 mul		cbmgn 0.293 mul		  /SW  ldiagpointdef
   xsize cbmgn 0.293 mul sub	cbmgn 0.293 mul		  /SE  ldiagpointdef
   xsize cbmgn 0.293 mul sub	ysize cbmgn 0.293 mul sub /NE  ldiagpointdef
   cbmgn 0.293 mul		ysize cbmgn 0.293 mul sub /NW  ldiagpointdef

     0 dg /S@ANGLE  ldiagangledef
    45 dg /SE@ANGLE ldiagangledef
    90 dg /E@ANGLE  ldiagangledef
   135 dg /NE@ANGLE ldiagangledef
   180 dg /N@ANGLE  ldiagangledef
   225 dg /NW@ANGLE ldiagangledef
   270 dg /W@ANGLE  ldiagangledef
   315 dg /SW@ANGLE ldiagangledef

   [ xsize ysize 0.5 ldiagpmul cbmgn /ldiagcurveboxcircum cvx ] ldiagcircumdef

   cbmgn		0
   xsize cbmgn sub	0
   [ xsize cbmgn sub	cbmgn		]
   xsize		cbmgn
   xsize		ysize cbmgn sub
   [ xsize cbmgn sub	ysize cbmgn sub	]
   xsize cbmgn sub	ysize
   cbmgn		ysize
   [ cbmgn		ysize cbmgn sub	]
   0			ysize cbmgn sub
   0			cbmgn
   [ cbmgn		cbmgn		]
   cbmgn		0

   % (Leaving ldiagcurvebox) 0 ldiagdebugprint
} def

% shadow of the @ShadowBox symbol
% its shape and labels are done, somewhat inaccurately, with ldiagbox
% <shadowmargin> ldiagshadow -
/ldiagshadow
{ 
  /lfshm exch def
  
  lfshm 0 moveto
  0 lfshm neg rlineto
  xsize 0 rlineto
  0 ysize rlineto
  lfshm neg 0 rlineto
  xsize 0 lineto
  closepath fill

} def

% shape and labels of the @Square symbol
/ldiagsquare
{
   xsize ysize 0.5 ldiagpmul /CTR ldiagpointdef
   CTR xsize xsize ysize ysize ldiagpmax 0.5 ldiagpmul ldiagpadd /NE ldiagpointdef
   CTR 0 0 CTR NE ldiagdistance 135 ldiagatangle ldiagpadd /NW ldiagpointdef
   CTR 0 0 CTR NE ldiagdistance 225 ldiagatangle ldiagpadd /SW ldiagpointdef
   CTR 0 0 CTR NE ldiagdistance 315 ldiagatangle ldiagpadd /SE ldiagpointdef
   SW 0.5 ldiagpmul SE 0.5 ldiagpmul ldiagpadd /S ldiagpointdef
   NW 0.5 ldiagpmul NE 0.5 ldiagpmul ldiagpadd /N ldiagpointdef
   SW 0.5 ldiagpmul NW 0.5 ldiagpmul ldiagpadd /W ldiagpointdef
   SE 0.5 ldiagpmul NE 0.5 ldiagpmul ldiagpadd /E ldiagpointdef

     0 dg /S@ANGLE  ldiagangledef
    45 dg /SE@ANGLE ldiagangledef
    90 dg /E@ANGLE  ldiagangledef
   135 dg /NE@ANGLE ldiagangledef
   180 dg /N@ANGLE  ldiagangledef
   225 dg /NW@ANGLE ldiagangledef
   270 dg /W@ANGLE  ldiagangledef
   315 dg /SW@ANGLE ldiagangledef

   [ CTR NE ldiagpsub /ldiagboxcircum cvx ] ldiagcircumdef
   SW SE NE NW SW
} def

% shape and labels of the @Diamond symbol
/ldiagdiamond
{
   xsize 0 0.5 ldiagpmul /S   ldiagpointdef
   0 ysize 0.5 ldiagpmul /W   ldiagpointdef
   S W         ldiagpadd /CTR ldiagpointdef
   CTR W       ldiagpadd /N   ldiagpointdef
   CTR S       ldiagpadd /E   ldiagpointdef
   E N ldiagpadd 0.5 ldiagpmul /NE ldiagpointdef
   N W ldiagpadd 0.5 ldiagpmul /NW ldiagpointdef
   S W ldiagpadd 0.5 ldiagpmul /SW ldiagpointdef
   S E ldiagpadd 0.5 ldiagpmul /SE ldiagpointdef

     0 dg        /S@ANGLE  ldiagangledef
    90 dg        /E@ANGLE  ldiagangledef
   180 dg        /N@ANGLE  ldiagangledef
   270 dg        /W@ANGLE  ldiagangledef
   S E ldiagangleto /SE@ANGLE ldiagangledef
   E N ldiagangleto /NE@ANGLE ldiagangledef
   N W ldiagangleto /NW@ANGLE ldiagangledef
   W S ldiagangleto /SW@ANGLE ldiagangledef

   [ xsize ysize 0.5 ldiagpmul /ldiagdiamondcircum cvx ] ldiagcircumdef
   S E N W S
} def

% shape and labels of the @Ellipse symbol
/ldiagellipse
{
   xsize 0 0.5 ldiagpmul /S   ldiagpointdef
   0 ysize 0.5 ldiagpmul /W   ldiagpointdef
   S W         ldiagpadd /CTR ldiagpointdef
   CTR W       ldiagpadd /N   ldiagpointdef
   CTR S       ldiagpadd /E   ldiagpointdef
   CTR xsize 0 0.3536 ldiagpmul ldiagpadd 0 ysize 0.3536 ldiagpmul ldiagpadd /NE ldiagpointdef
   0 ysize 0.3536 ldiagpmul CTR xsize 0 0.3536 ldiagpmul ldiagpadd ldiagpsub /SE ldiagpointdef
   xsize 0 0.3536 ldiagpmul CTR ldiagpsub 0 ysize 0.3536 ldiagpmul ldiagpadd /NW ldiagpointdef
   0 ysize 0.3536 ldiagpmul xsize 0 0.3536 ldiagpmul CTR ldiagpsub ldiagpsub /SW ldiagpointdef
   [ xsize ysize 0.5 ldiagpmul /ldiagellipsecircum cvx ] ldiagcircumdef

     0 dg /S@ANGLE  ldiagangledef
    90 dg /E@ANGLE  ldiagangledef
   180 dg /N@ANGLE  ldiagangledef
   270 dg /W@ANGLE  ldiagangledef

   S E ldiagangleto /SE@ANGLE ldiagangledef
   E N ldiagangleto /NE@ANGLE ldiagangledef
   N W ldiagangleto /NW@ANGLE ldiagangledef
   W S ldiagangleto /SW@ANGLE ldiagangledef

   S [ CTR ] E [ CTR ] N [ CTR ] W [ CTR ] S
} def

% shape and labels of the @Circle symbol
/ldiagcircle
{
   xsize ysize 0.5 ldiagpmul /CTR ldiagpointdef
   CTR xsize 0 ysize 0 ldiagpmax 0.5 ldiagpmul ldiagpadd /E ldiagpointdef
   CTR 0 0 CTR E ldiagdistance 45 ldiagatangle ldiagpadd /NE ldiagpointdef
   CTR 0 0 CTR E ldiagdistance 90 ldiagatangle ldiagpadd /N ldiagpointdef
   CTR 0 0 CTR E ldiagdistance 135 ldiagatangle ldiagpadd /NW ldiagpointdef
   CTR 0 0 CTR E ldiagdistance 180 ldiagatangle ldiagpadd /W ldiagpointdef
   CTR 0 0 CTR E ldiagdistance 225 ldiagatangle ldiagpadd /SW ldiagpointdef
   CTR 0 0 CTR E ldiagdistance 270 ldiagatangle ldiagpadd /S ldiagpointdef
   CTR 0 0 CTR E ldiagdistance 315 ldiagatangle ldiagpadd /SE ldiagpointdef
   [ S E ldiagpsub /ldiagellipsecircum cvx ] ldiagcircumdef

     0 dg /S@ANGLE  ldiagangledef
    45 dg /SE@ANGLE ldiagangledef
    90 dg /E@ANGLE  ldiagangledef
   135 dg /NE@ANGLE ldiagangledef
   180 dg /N@ANGLE  ldiagangledef
   225 dg /NW@ANGLE ldiagangledef
   270 dg /W@ANGLE  ldiagangledef
   315 dg /SW@ANGLE ldiagangledef

   S [ CTR ] E [ CTR ] N [ CTR ] W [ CTR ] S
} def

% shape and labels of the @VLine and @VArrow symbols
/ldiagvline
{
   xmark ysize ldiagprevious /FROM ldiagpointdef
   xmark 0 ldiagprevious /TO ldiagpointdef
} def

% points of a polygon around base with given no of sides, vert init angle:
% <sides> <angle> ldiagpolygon <point> ... <point>
/ldiagpolygon
{  exch round cvi exch
   xsize ysize 0.5 ldiagpmul /CTR ldiagpointdef
   90 sub CTR 2 copy ldiagmax 5 3 roll
   [ 4 copy pop /ldiagpolycircum cvx ] ldiagcircumdef
   exch dup 360 exch div exch
   1 1  3 2 roll
   {  4 string cvs (P) exch ldiagconcat
      3 copy exch pop (@ANGLE) ldiagconcat cvn exch 90 add exch ldiagangledef
      cvn 6 copy pop pop ldiagatangle 2 copy 10 2 roll
      3 2 roll ldiagpointdef
      dup 3 1 roll add exch
   }  for
   pop ldiagatangle
} def

% shape and labels of the @Isosceles triangle symbol
/ldiagisosceles
{
   xsize ysize 0.5 ldiagpmul /CTR ldiagpointdef
   0     0                   /SW  ldiagpointdef
   xsize 0                   /SE  ldiagpointdef
   xsize 0.5 mul ysize       /N   ldiagpointdef
   xsize 0.5 mul 0           /S   ldiagpointdef
   SE 0.5 ldiagpmul N 0.5 ldiagpmul ldiagpadd /NE ldiagpointdef
   SW 0.5 ldiagpmul N 0.5 ldiagpmul ldiagpadd /NW ldiagpointdef

   [ xsize ysize /ldiagisoscelescircum cvx ] ldiagcircumdef

     0 dg              /SW@ANGLE ldiagangledef
     0 dg              /SE@ANGLE ldiagangledef
   180 dg              /N@ANGLE  ldiagangledef
     0 dg              /S@ANGLE  ldiagangledef
     SE N ldiagangleto /NE@ANGLE ldiagangledef
     N SW ldiagangleto /NW@ANGLE ldiagangledef

   SW SE N SW
} def

% next array element:  <array> <index> ldiaggetnext <array> <index> <any> true
%                                               or <array> <index> false
/ldiaggetnext
{  2 copy exch length ge
   { false }
   { 2 copy get exch 1 add exch true } ifelse
} def

% check whether thing is number:  <any> ldiagisnumbertype <any> <bool>
/ldiagisnumbertype
{  dup type dup
   /integertype eq exch /realtype eq or
} def

% check whether thing is an array:  <any> ldiagisarraytype <any> <bool>
/ldiagisarraytype { dup type /arraytype eq } def

% check whether thing is an array:  <any> ldiagisnametype <any> <bool>
/ldiagisnametype { dup type /nametype eq } def

% get next item:  <array> <index> ldiaggetnextitem <array> <index> 0
%                                              or <array> <index> <array> 1
%                                              or <array> <index> <point> 2
/ldiaggetnextitem
{   ldiaggetnext
    {	ldiagisarraytype
	{   1
	}
	{   ldiagisnumbertype
	    {	3 1 roll
		ldiaggetnext
		{   ldiagisnumbertype
		    {	4 3 roll exch  2
		    }
		    {	pop 3 2 roll pop  0
		    } ifelse
		}
		{   3 2 roll pop  0
		} ifelse
	    }
	    {	pop 0
	    } ifelse
	} ifelse
    }
    {	0
    } ifelse
} def

% approximate equality: num1 num2  approxeq  <boolean>
/approxeq
{ dup 0 eq
  { pop 0 eq
  }
  { dup 3 1 roll sub exch div abs 0.001 lt
  } ifelse
} def

% set arc path:  bool x1 y1  x2 y2  x0 y0  ldiagsetarc  <angle> <angle> <dist>
% the path goes from x1 y1 to x2 y2 about centre x0 y0,
% anticlockwise if bool is true else clockwise.
% The orientations of backwards pointing and forwards pointing
% arrowheads are returned in the two angles, and
% the length of the arc is returned in <dist>.
/ldiagsetarc
{
  % (Entering ldiagsetarc) 7 ldiagdebugprint
  20 dict begin
     matrix currentmatrix 8 1 roll
     2 copy translate 2 copy 8 2 roll
     4 2 roll ldiagpsub 6 2 roll ldiagpsub
     dup /y1 exch def dup mul /y1s exch def
     dup /x1 exch def dup mul /x1s exch def
     dup /y2 exch def dup mul /y2s exch def
     dup /x2 exch def dup mul /x2s exch def
     /dist1 0 0 x1 y1 ldiagdistance def
     /dist2 0 0 x2 y2 ldiagdistance def

     y1s y2s approxeq
     {	-1
     }
     {	y1s x2s mul y2s x1s mul sub y1s y2s sub div
     } ifelse
     /da exch def

     x1s x2s approxeq
     {	-1
     }
     {	x1s y2s mul x2s y1s mul sub x1s x2s sub div
     } ifelse
     /db exch def

     da 0 gt db 0 gt and
     {
	% (  case 1, ellipse) 0 ldiagdebugprint
	/LMax da sqrt db sqrt ldiagmax def
	/scalex da sqrt LMax div def
	/scaley db sqrt LMax div def
	scalex scaley scale
	0 0 LMax
	0 0 x1 scalex mul y1 scaley mul ldiagangleto
	0 0 x2 scalex mul y2 scaley mul ldiagangleto
	2 copy eq { 360 add } if
	2 copy 8 2 roll
	5 index { arc } { arcn } ifelse
	2 index 1 index
	{ 90 sub } { 90 add } ifelse
	dup sin scaley mul exch cos scalex mul atan
	2 index 2 index
	{ 90 add } { 90 sub } ifelse
	dup sin scaley mul exch cos scalex mul atan
	5 2 roll  % res1 res2 ang1 ang2 anticlockwise
	{ exch sub } { sub } ifelse
	dup 0 le { 360 add } if  ldiagpi mul LMax mul 180 div
     }
     {
	dist1 dist2 approxeq
	% x1 y1 dist1 (  x1 y1, d) 3 ldiagdebugprint pop pop pop
	% x2 y2 dist2 (  x2 y2, d) 3 ldiagdebugprint pop pop pop
	{
		% (  case 2, circle) 0 ldiagdebugprint
		0 0
		dist1
		0 0 x1 y1 ldiagangleto
		0 0 x2 y2 ldiagangleto
		2 copy eq { 360 add } if
		2 copy 8 2 roll
		5 index { arc } { arcn } ifelse
		2 index 1 index
		{ 90 sub } { 90 add } ifelse
		2 index 2 index
		{ 90 add } { 90 sub } ifelse
		5 2 roll % res1 res2 ang1 ang2 clockwise
		{ exch sub } { sub } ifelse
		dup 0 le { 360 add } if
		ldiagpi mul dist1 mul 180 div
	}
	{
		% (  case 3, line) 0 ldiagdebugprint
		x2 y2 lineto pop
		x2 y2 x1 y1 ldiagangleto
		x1 y1 x2 y2 ldiagangleto
		x1 y1 x2 y2 ldiagdistance
	} ifelse
     } ifelse
     4 -1 roll setmatrix
     end
  % (Leaving ldiagsetarc) 3 ldiagdebugprint
} def

% ldiagsetcurve: set up a Bezier curve from x0 y0 to x3 y3
% and return arrowhead angles and length of curve (actually 0)
% x0 y0 x1 y1 x2 y2 x3 y3 ldiagsetcurve <angle> <angle> <length>
/ldiagsetcurve
{ 8 copy curveto pop pop
  ldiagangleto
  5 1 roll
  4 2 roll ldiagangleto
  exch
  0
} def

% ldiagsetpath: convert a Diag path into a PostScript path
% [ shape ] ldiagsetpath -
/ldiagsetpath
{
  10 dict begin
    0 newpath
    /prevseen false def
    /curveseen false def
    { ldiaggetnextitem
      dup 0 eq { pop exit }
      { 1 eq
        { /curveseen true def
	  /curve exch def
	  curve length 0 eq { /curveseen false def } if
        }
        { /ycurr exch def
	  /xcurr exch def
	  prevseen
	  { curveseen
	    { curve length 4 eq
	      { xprev yprev
		curve 0 get curve 1 get
		curve 2 get curve 3 get
		xcurr ycurr
		ldiagsetcurve pop pop pop
	      }
	      { xprev yprev xcurr ycurr
	        curve length 1 ge { curve 0 get } { 0 } ifelse
	        curve length 2 ge { curve 1 get } { 0 } ifelse
	        curve length 3 ge { curve 2 get } { true } ifelse
	        7 1 roll
	        ldiagsetarc pop pop pop
	      } ifelse
	    }
	    { xcurr ycurr lineto
	    } ifelse
	  }
	  { xcurr ycurr moveto
	  } ifelse
	  /xprev xcurr def
	  /yprev ycurr def
	  /prevseen true def
	  /curveseen false def
        } ifelse
      } ifelse
    } loop pop pop
  end
} def

% ldiagpaintpath: paint a path of the given shape
% /paint [ shape ] ldiagpaintpath -
/ldiagpaintpath
{
  ldiagsetpath cvx exec
} def

% stroke a path of the given shape in the given linestyle and dash length.
% Return the origin and angle of the backward and forward arrow heads.
% dashlength /linestyle [shape] ldiagdopath  [<point> <angle>] [<point> <angle>] 
/ldiagdopath
{
  10 dict begin
    0
    /prevseen  false def
    /curveseen false def
    /backarrow []    def
    /fwdarrow  []    def
    {
	ldiaggetnextitem
	dup 0 eq { pop exit }
	{
	    1 eq
	    {	/curveseen true def
		/curve exch def
		curve length 0 eq { /prevseen false def } if
	    }
	    {	/ycurr exch def
		/xcurr exch def
		prevseen
		{   newpath xprev yprev moveto
		    curveseen
		    {	curve length 4 eq
			{   xprev yprev
			    curve 0 get curve 1 get
			    curve 2 get curve 3 get
			    xcurr ycurr ldiagsetcurve
			}
			{   xprev yprev xcurr ycurr
			    curve length 1 ge { curve 0 get } { 0 } ifelse
			    curve length 2 ge { curve 1 get } { 0 } ifelse
			    curve length 3 ge { curve 2 get } { true } ifelse
			    7 1 roll
			    ldiagsetarc
			} ifelse
		    }
		    {	xcurr ycurr lineto
			xcurr ycurr xprev yprev ldiagangleto dup 180 sub
			xprev yprev xcurr ycurr ldiagdistance
		    } ifelse
		    6 index 6 index cvx exec
		    [ xprev yprev 5 -1 roll ]
		    backarrow length 0 eq
		    { /backarrow exch def }
		    { pop } ifelse
		    [ xcurr ycurr 4 -1 roll ] /fwdarrow exch def
		} if
		/xprev xcurr def
		/yprev ycurr def
		/prevseen true def
		/curveseen false def
	    } ifelse
	} ifelse
    } loop
    pop pop pop pop
    backarrow length 0 eq { [ 0 0 0 ] } { backarrow } ifelse
    fwdarrow  length 0 eq { [ 0 0 0 ] } { fwdarrow  } ifelse
  end
} def


% stroke a path of the given shape in the given linestyle and dash length.
% dashlength [ /linestyle ] [shape] ldiagdosegpath  -
/ldiagdosegpath
{
  12 dict begin
    1 index /seg exch def
    1 index length /seglength exch def
    0 /segcount exch def
    0
    /prevseen  false def
    /curveseen false def
    /backarrow []    def
    /fwdarrow  []    def
    {
	ldiaggetnextitem
	dup 0 eq { pop exit }
	{
	    1 eq
	    {	/curveseen true def
		/curve exch def
		curve length 0 eq { /prevseen false def } if
	    }
	    {	/ycurr exch def
		/xcurr exch def
		prevseen
		{   newpath xprev yprev moveto
		    curveseen
		    {	curve length 4 eq
			{   xprev yprev
			    curve 0 get curve 1 get
			    curve 2 get curve 3 get
			    xcurr ycurr ldiagsetcurve
			}
			{   xprev yprev xcurr ycurr
			    curve length 1 ge { curve 0 get } { 0 } ifelse
			    curve length 2 ge { curve 1 get } { 0 } ifelse
			    curve length 3 ge { curve 2 get } { true } ifelse
			    7 1 roll
			    ldiagsetarc
			} ifelse
		    }
		    {	xcurr ycurr lineto
			xcurr ycurr xprev yprev ldiagangleto dup 180 sub
			xprev yprev xcurr ycurr ldiagdistance
		    } ifelse
		    6 index seg segcount seglength mod get cvx exec
		    /segcount segcount 1 add def
		    [ xprev yprev 5 -1 roll ]
		    backarrow length 0 eq
		    { /backarrow exch def }
		    { pop } ifelse
		    [ xcurr ycurr 4 -1 roll ] /fwdarrow exch def
		} if
		/xprev xcurr def
		/yprev ycurr def
		/prevseen true def
		/curveseen false def
	    } ifelse
	} ifelse
    } loop
    pop pop pop pop
  end
} def

% ldiagnodebegin: start of node parameters
% ldiagnodebegin -
/ldiagnodebegin
{ % (Entering ldiagnodebegin) 0 ldiagdebugprint
  ldiagmaxlabels dict begin 
} def

% ldiagnodeend: end of node parameters (so do the node)
% <outline> <dashlength> <style> <linewidth> <colour> <paint> ldiagnodeend -
/ldiagnodeend
{
  % (Entering ldiagnodeend) 0 ldiagdebugprint
  end % matches begin in ldiagnodebegin
  5 index gsave ldiagpaintpath grestore         % <outline> <dl> <st> <lw> <cl>
  4 index ldiagsetpath clip newpath             % <outline> <dl> <st> <lw> <cl>
  exec						% <outline> <dl> <st> <lw>
  2 mul setlinewidth                            % <outline> <dl> <st>
  3 -1 roll                                     % <dashlength> <st> <outline>
  ldiagdosegpath                                % -
  % (Leaving ldiagnodeend) 0 ldiagdebugprint
} def

% ldiaglinkbegin: start of link parameters
% <direct> ldiaglinkbegin -
/ldiaglinkbegin
{ ldiagmaxlabels dict begin 
  1 eq /direct exch def
} def

% ldiaglinkend: end of link parameters (so do the link)
% <outline> <dashlength> <style> <linewidth> ldiaglinkend -
/ldiaglinkend
{
  end % matches begin in ldiaglinkbegin
  setlinewidth
  3 -1 roll ldiagdosegpath
} def

% ldiagdoarrow: draw an arrow head of given form
% dashlength /lstyle /pstyle hfrac height width [ <point> <angle> ] ldiagdoarrow -
/ldiagdoarrow
{  matrix currentmatrix 8 1 roll
   dup 0 get 1 index 1 get translate
   2 get rotate
   [ 2 index neg 2 index 0 0
     3 index 3 index neg
     1 index 10 index mul 0
     7 index 7 index ]
   4 1 roll pop pop pop
   dup 3 1 roll
   gsave ldiagpaintpath grestore ldiagdopath pop pop
   setmatrix
} def

% arrow head styles (unused)
% /ldiagopen     0.0 def
% /ldiaghalfopen 0.5 def
% /ldiagclosed   1.0 def

% stroke no arrows, forward, back, and both
/ldiagnoarrow { pop pop pop pop pop pop pop pop                        } def
/ldiagforward { 7 -1 roll ldiagdoarrow pop                              } def
/ldiagback    { 8 -2 roll pop ldiagdoarrow                              } def
/ldiagboth    { 8 -1 roll 7 copy ldiagdoarrow pop 7 -1 roll ldiagdoarrow } def

% ldiagprevious: return previous point on path
/ldiagprevious
{ ldiagisnumbertype
  { 2 copy }
  { ldiagisarraytype
    { 2 index 2 index }
    { 0 0 }
    ifelse
  } ifelse
} def

% Tag dictionary operators
%
% Diag's tag dictionaries are kept on the same stack as other dictionaries,
% since there is nowhere else to put them.  However, they are managed like
% a separate stack using the following operators:
%
%  <tag>  ldiagpushtagdict  -      Push a new, empty tag dictionary
%         ldiagtoptagdict   dict   Find the top tag dictionary
%         ldiagpoptagdict   -      Pop and destroy the top tag dictionary
%         ldiagpopuptagdict -      Pop top tag dict and promote its entries
% <array> ldiagpopsometagdict -    Like popuptagdict but only those promote
%                                  those labels listed in <array>
%         ldiagdebugtagdict -      Debug print of dictionary stack
%
% They are distinguished from other dictionaries by containing /ldiagtagdict,
% whose value is the <tag> which is used by ldiagpopuptagdict,
% and they are hopefully never the target of any non-tag definition because
% they are never the top dictionary, since push places the new dict second.

/ldiagpushtagdict
{ ldiagmaxlabels dict dup
  currentdict end exch begin begin
  exch /ldiagtagdict exch put
} def

/ldiagtoptagdict
{ /ldiagtagdict where not
  { (Diag internal error: no tag dictionary) show stop
  } if
} def

/ldiagpoptagdict
{
  % (Entering poptagdict) 0 ldiagdebugprint
  % ldiagdebugtagdict
  mark
  { currentdict end
    dup /ldiagtagdict known
    { exit
    } if
  } loop
  pop
  counttomark
  { begin
  } repeat
  pop
  % (Leaving poptagdict) 0 ldiagdebugprint
  % ldiagdebugtagdict
} def

% promote labels from top tag dictionary to second top tag dictionary
% each prefixed by <string>@ if <string> (value of /ldiagtagdict) is not empty
% - ldiagpopuptagdict -
/ldiagpopuptagdict
{
  ldiagtagdict
  % (Entering ldiagpopuptagdict) 1 ldiagdebugprint
  % ldiagdebugtagdict
  ldiagtoptagdict ldiagpoptagdict ldiagtoptagdict exch
  { exch dup length string cvs
    3 index exch ldiagmconcat
    cvn exch 2 index 3 1 roll put
  } forall
  pop pop
  % (Leaving ldiagpopuptagdict) 0 ldiagdebugprint
  % ldiagdebugtagdict
} def

% similar to ldiagpopuptagdict but only those inner labels that are
% present in <array> will be promoted
% <array> ldiagpopsometagdict -
/ldiagpopsometagdict
{
  ldiagtagdict
  % (Entering ldiagpopsometagdict) 1 ldiagdebugprint
  % ldiagdebugtagdict
  ldiagtoptagdict
  ldiagpoptagdict
  ldiagtoptagdict
  4 -1 roll
  { dup 3 index exch
    get
    exch 4 index
    exch ldiagmconcat exch
    3 copy put
    pop pop
  } forall
  pop pop pop
  % (Leaving ldiagpopuptagdict) 0 ldiagdebugprint
  % ldiagdebugtagdict
} def

% debug tag dictionary stack
/ldiagdebugtagdict
{ (Entering ldiagdebugtagdict) 0 ldiagdebugprint
  30 array dictstack
  { dup /ldiagtagdict known
    { dup /ldiagtagdict get 0 ldiagdebugprint
      { pop 100 string cvs (   ) exch ldiagconcat
	dup 0 ldiagdebugprint
	pop
      }
      forall
    }
    { pop (other) 0 ldiagdebugprint
    } ifelse
  } forall
  (Leaving ldiagdebugtagdict) 0 ldiagdebugprint
} def

% label a point in top tag dictionary:  <point> /name ldiagpointdef -
/ldiagpointdef
{
  % (Entering ldiagpointdef) 3 ldiagdebugprint
  [ 4 2 roll transform /itransform cvx ] cvx
  ldiagtoptagdict 3 1 roll put
  % (Leaving ldiagpointdef) 0 ldiagdebugprint
} def

% label an angle in top tag dictionary:  <angle> /name ldiagangledef -
/ldiagangledef
{
  % (Entering ldiagangledef) 2 ldiagdebugprint
  exch ldiagfixangle ldiagtoptagdict 3 1 roll put
  % (Leaving ldiagangledef) 0 ldiagdebugprint
} def

% add CIRCUM operator with this body:  <array> ldiagcircumdef -
/ldiagcircumdef
{   % (Entering ldiagcircumdef) 1 ldiagdebugprint
    /CIRCUM exch cvx
    ldiagtoptagdict 3 1 roll put
    % currentdict end
    % 3 1 roll
    % def
    % begin
    % (Leaving ldiagcircumdef) 0 ldiagdebugprint
} def

% show points (except CIRCUM and ANGLE): - ldiagshowpoints -
/ldiagshowpoints
{
  % (Entering ldiagshowpoints) 0 ldiagdebugprint
  ldiagtoptagdict
  { 1 index 100 string cvs
    (ldiagdebugpos) search
    { pop pop pop pop pop }
    {
      (CIRCUM) search % if CIRCUM in key
      { pop pop pop pop pop }
      { 
        (ANGLE) search % if ANGLE in key
        {
          pop pop pop pop pop
        }
        {
          (ldiagtagdict) search
          {
            pop pop pop pop pop
          }
          {
	    pop cvx exec
	    newpath 2.0 pt 0 360 arc 0 setgray fill pop
          } ifelse
        } ifelse
      } ifelse
    } ifelse
  } forall
  % (Leaving ldiagshowpoints) 0 ldiagdebugprint
} def


/ldiagshowtags
{
  % (Entering ldiagshowtags) 0 ldiagdebugprint
  ldiagtoptagdict
  { 1 index 100 string cvs
    % dup 0 ldiagdebugprint
    (ldiagdebugpos) search
    { pop pop pop pop pop }
    {
      (CIRCUM) search % if CIRCUM in key
      { pop pop pop pop pop }
      { 
        (ANGLE) search % if ANGLE in key
        {
          pop pop pop pop pop
        }
        {
          (ldiagtagdict) search
          {
            pop pop pop pop pop
          }
          {
	    pop cvx exec 2 copy
	    gsave
	    newpath 2.0 pt 0 360 arc 0 setgray fill
            /Times-Roman findfont 8 pt scalefont setfont
            translate 40 rotate 0.2 cm 0.1 cm moveto 100 string cvs show
	    grestore
          } ifelse
        } ifelse
      } ifelse
    } ifelse
  } forall
  % (Leaving ldiagshowtags) 0 ldiagdebugprint
} def


% show angles: - ldiagshowangles -
/ldiagshowangles
{
  % (Entering ldiagshowangles) 0 ldiagdebugprint
  ldiagtoptagdict
  { 1 index 100 string cvs
    % dup 0 ldiagdebugprint
    (ldiagdebugpos) search
    { pop pop pop pop pop }
    {
      (ldiagtagdict) search
      {
        pop pop pop pop pop
      }
      {
        (CIRCUM) search % if CIRCUM in key
        { pop pop pop pop pop }
        { 
          (@ANGLE) search % if ANGLE in key, draw the angle at the point
          {
            % (showing ANGLE) 5 ldiagdebugprint
            gsave exch pop exch pop cvx
            % (about to execute) 1 ldiagdebugprint
            exec translate rotate 0.8 0.8 scale pop
            newpath 0 0 2.0 pt 0 360 arc 0 setgray fill
            newpath 4 pt 0 moveto 9 pt 0 lineto
            9 pt 1.5 pt lineto 11 pt 0 lineto 9 pt -1.5 pt lineto
            9 pt 0 lineto [] 0 setdash 4 pt setlinewidth 0 setlinejoin
	    stroke grestore
            % (finished ANGLE) 5 ldiagdebugprint
          }
          {
            % else must be a point, we aren't showing those
            pop pop pop
          } ifelse
        } ifelse
      } ifelse
    } ifelse
  } forall
  % (Leaving ldiagshowangles) 0 ldiagdebugprint
} def

% fix an angle to 0 <= res < 360:  <angle> ldiagfixangle <angle>
/ldiagfixangle
{
  % (Entering ldiagfixangle) 1 ldiagdebugprint
  { dup 0 ge { exit } if
    360 add
  } loop
  { dup 360 lt { exit } if
    360 sub
  } loop
  % (Leaving ldiagfixangle) 1 ldiagdebugprint
} def

% find point on circumference of box:  alpha a b ldiagboxcircum x y
/ldiagboxcircum
{
  % (Entering ldiagboxcircum) 3 ldiagdebugprint
  4 dict begin
    /b exch def
    /a exch def
    ldiagfixangle /alpha exch def
    0 0 a b ldiagangleto /theta exch def

    % if alpha <= theta, return (a, a*tan(alpha))
    alpha theta le
    { a  a alpha sin mul alpha cos div }
    {
      % else if alpha <= 180 - theta, return (b*cot(alpha), b)
      alpha 180 theta sub le
      { b alpha cos mul alpha sin div  b }
      {
        % else if alpha <= 180 + theta, return (-a, -a*tan(alpha))
        alpha 180 theta add le
        { a neg  a neg alpha sin mul alpha cos div }
        {
	  % else if alpha <= 360 - theta, return (-b*cot(alpha), -b)
	  alpha 360 theta sub le
          { b neg alpha cos mul alpha sin div  b neg }
	  {
	    % else 360 - theta <= alpha, return (a, a*tan(alpha))
	    a  a alpha sin mul alpha cos div
	  } ifelse
        } ifelse
      } ifelse
    } ifelse
  end
  % (Leaving ldiagboxcircum) 2 ldiagdebugprint
} def

% find quadratic roots (assume a != 0): a b c ldiagqroots x1 x2 2
%                                                     or    x2 1
%                                                     or       0
/ldiagqroots
{
  4 dict begin
    /c exch def
    /b exch def
    /a exch def
    /disc b b mul 4 a c mul mul sub def
    disc 0 lt
    { 0
    }
    { disc 0 eq
      { b neg 2 a mul div
	1
      }
      { b neg disc sqrt add 2 a mul div
        b neg disc sqrt sub 2 a mul div
	2
      }
      ifelse
    }
    ifelse
  end
} def

% work our which quadrant: <angle> ldiagquadrant <0-3>
/ldiagquadrant
{ dup 90 lt
  { pop 0
  }
  { dup 180 lt
    { pop 1
    }
    { 270 lt
      { 2
      }
      { 3
      } ifelse
    } ifelse
  } ifelse
} def

% find curvebox circum, assuming upper right quadrant: alpha a b xmk ldiagcb x y
/ldiagcb
{
  6 dict begin
    /xmk exch def
    /b exch def
    /a exch def
    /alpha exch def
    /theta1 0 0 a b xmk sub ldiagangleto def
    /theta2 0 0 a xmk sub b ldiagangleto def
    alpha theta1 le
    { % if alpha <= theta1, return (a, a*tan(alpha))
      a  a alpha sin mul alpha cos div
    }
    { alpha theta2 ge
      { % else if alpha > theta2, return (b*cot(alpha), b)
	b alpha cos mul alpha sin div  b
      }
      {
	% else, return the intersection of line and circle
	a xmk sub b xmk sub xmk  0 0 alpha ldiagcircleintersect
	dup 0 eq
	{ % should never happen, just return any reasonable point
	  pop
	  a b 0.5 ldiagpmul
	}
	{ 1 eq
	  { % should never happen, just return the point on top of stack
	  }
	  { % the usual case, two points on stack, return the larger
	    ldiagpmax
	  } ifelse
	} ifelse
      } ifelse
    } ifelse
  end
} def

% find point on circumference of curvebox: alpha a b xmk ldiagcurveboxcircum x y
/ldiagcurveboxcircum
{
  % (Entering ldiagcurveboxcircum) 4 ldiagdebugprint
  5 dict begin
    /xmk exch def
    /b exch def
    /a exch def
    ldiagfixangle /alpha exch def

    % work out which quadrant we are in, and reflect accordingly
    /quad alpha ldiagquadrant def
    quad 0 eq
    { alpha a b xmk ldiagcb
    }
    { quad 1 eq
      { 180 alpha sub a b xmk ldiagcb exch neg exch
      }
      { quad 2 eq
	{ alpha 180 sub a b xmk ldiagcb neg exch neg exch
	}
	{ 360 alpha sub a b xmk ldiagcb neg
	} ifelse
      } ifelse
    } ifelse
  end
  % (Leaving ldiagcurveboxcircum) 2 ldiagdebugprint
} def

% find point on circumference of diamond:  alpha a b ldiagdiamondcircum x y
/ldiagdiamondcircum
{
  % (Entering ldiagdiamondcircum) 3 ldiagdebugprint
  4 dict begin
    /b exch def
    /a exch def
    ldiagfixangle /alpha exch def
    b alpha cos abs mul  a alpha sin abs mul  add  /denom exch def
    a b mul alpha cos mul denom div
    a b mul alpha sin mul denom div
  end
  % (Leaving ldiagdiamondcircum) 2 ldiagdebugprint
} def

% find point on circumference of ellipse:  alpha a b ldiagellipsecircum x y
/ldiagellipsecircum
{
  % (Entering ldiagellipsecircum) 3 ldiagdebugprint
  4 dict begin
    /b exch def
    /a exch def
    ldiagfixangle /alpha exch def
    b alpha cos mul dup mul  a alpha sin mul dup mul  add sqrt /denom exch def
    a b mul alpha cos mul denom div
    a b mul alpha sin mul denom div
  end
  % (Leaving ldiagellipsecircum) 2 ldiagdebugprint
} def

% find point on circumference of isosceles:  alpha a b ldiagisoscelescircum x y
/ldiagisoscelescircum
{
  % (Entering ldiagisoscelescircum) 3 ldiagdebugprint
  7 dict begin
    /b exch def
    /a exch def
    /alpha exch ldiagfixangle def
    /theta1 90 def
    /theta2 a b 0.5 ldiagpmul 0 0 ldiagangleto def
    /theta3 a b 0.5 ldiagpmul a 0 ldiagangleto def
    alpha theta1 ge alpha theta2 le and
    { 0 0 a 2 div b
    }
    { alpha theta2 ge alpha theta3 le and
      { 0 0 a 0
      }
      { a 0 a 2 div b
      } ifelse
    } ifelse
    a 2 div b 2 div 2 copy 1 ft alpha ldiagatangle ldiaglineintersect
    a 2 div b 2 div 4 2 roll ldiagpsub
  end
  % (Leaving ldiagisoscelescircum) 2 ldiagdebugprint
} def

% find point of intersection of two lines each defined by two points
% x1 y1 x2 y2  x3 y3 x4 y4  ldiaglineintersect x y
/ldiaglineintersect
{
  % (Entering ldiaglineintersect) 8 ldiagdebugprint
  13 dict begin
    /y4 exch def
    /x4 exch def
    /y3 exch def
    /x3 exch def
    /y2 exch def
    /x2 exch def
    /y1 exch def
    /x1 exch def
    x2 x1 sub /x21 exch def
    x4 x3 sub /x43 exch def
    y2 y1 sub /y21 exch def
    y4 y3 sub /y43 exch def
    y21 x43 mul y43 x21 mul sub /det exch def
  
    % calculate x 
    y21 x43 mul x1 mul
    y43 x21 mul x3 mul sub
    y3 y1 sub x21 mul x43 mul add
    det div

    % calculate y
    x21 y43 mul y1 mul
    x43 y21 mul y3 mul sub
    x3 x1 sub y21 mul y43 mul add
    det neg div

  end
  % (Leaving ldiaglineintersect) 2 ldiagdebugprint
} def

% find point on circumference of polygon
% alpha radius num theta ldiagpolycircum x y
/ldiagpolycircum
{
  % (Entering ldiagpolycircum) 4 ldiagdebugprint
  13 dict begin
    /theta exch def
    /num exch def
    /radius exch def
    /alpha exch def

    % calculate delta, the angle from theta to alpha
    alpha theta sub ldiagfixangle

    % calculate the angle which is the multiple of 360/num closest to delta
    360 num div div truncate 360 num div mul theta add /anglea exch def

    % calculate the next multiple of 360/num after anglea
    anglea 360 num div add /angleb exch def

    % intersect the line through these two points with the alpha line
    anglea cos anglea sin  angleb cos angleb sin
    0 0  alpha cos 2 mul alpha sin 2 mul
    ldiaglineintersect radius ldiagpmul

  end
  % (Leaving ldiagpolycircum) 2 ldiagdebugprint
} def

% find point of intersection of a line and a circle
% x0 y0 r  x1 y1 theta  ldiagcircleintersect xa ya xb yb 2
%                                        or       xb yb 1
%                                        or             0
/ldiagcircleintersect
{
  % (Entering ldiagcircleintersect) 6 ldiagdebugprint
  15 dict begin
    /theta exch def
    /y1    exch def
    /x1    exch def
    /r     exch def
    /y0    exch def
    /x0    exch def

    % if sin(theta) = 0 then line is horizontal and y must be y1
    theta sin abs 0.00001 lt
    { 
      /a 1 def
      /b -2 x0 mul def
      /c x0 dup mul y1 y0 sub dup mul add r dup mul sub def
      a b c ldiagqroots dup
      0 eq
      { pop
	0
      }
      { 1 eq
	{ y1 1
	}
	{ y1 exch y1 2
	} ifelse
      } ifelse
    }
    {
      /ct theta cos theta sin div def
      /a ct ct mul 1 add def
      /b ct x1 x0 sub mul y1 add y0 sub 2 mul def
      /c x1 x0 sub dup mul y1 y0 sub dup mul add r dup mul sub def
      a b c ldiagqroots dup
      0 eq
      { pop
	0
      }
      { 1 eq
	{ y1 add /yb exch def
	  yb y1 sub ct mul x1 add /xb exch def
	  xb yb 1
	}
	{ y1 add /ya exch def
	  ya y1 sub ct mul x1 add /xa exch def
	  y1 add /yb exch def
	  yb y1 sub ct mul x1 add /xb exch def
	  xa ya xb yb 2
	} ifelse
      } ifelse
    } ifelse
  end
  % (Leaving ldiagcircleintersect) 1 ldiagdebugprint
} def

% find line which is the perpendicular bisector of two points, defined
% by two points
% x1 y1 x2 y2 ldiaglinebetween x3 y3 x4 y4
/ldiaglinebetween
{ % (Entering ldiaglinebetween) 4 ldiagdebugprint
  /y2 exch def /x2 exch def
  /y1 exch def /x1 exch def

  % let x3, y3 be the point halfway between the two points
  x1 y1 x2 y2 ldiagpadd 0.5 ldiagpmul
  /y3 exch def /x3 exch def

  % find a point perpendicular to x3, y3
  x3 y3 50 x1 y1 x2 y2 ldiagangleto 90 dg add ldiagatangle

  % plus x3 y3 gives the two points
  x3 y3

  % (Leaving ldiaglinebetween) 4 ldiagdebugprint
} def

% find <proc>@<string>:  <proc> <string> ldiagfindlabel <any> true
%                                                      <proc> <string> false
/ldiagfindlabel
{
  % (Entering ldiagfindlabel) 2 ldiagdebugprint
  exch dup length 1 ne
  { exch false
    % (Leaving ldiagfindabel (length not 1)) 3 ldiagdebugprint
  }
  { dup 0 get type /nametype ne
    { exch false
      % (Leaving ldiagfindabel (not a name)) 3 ldiagdebugprint
    }
    { dup 0 get dup length string cvs (@) ldiagconcat
      2 index ldiagconcat dup where
      { exch get exch pop exch pop cvx exec true
	% (Leaving ldiagfindlabel with success) 100 ldiagdebugprint
      }
      {
	pop exch false
	% (Leaving ldiagfindabel (concat not sensible)) 3 ldiagdebugprint
      } ifelse
    } ifelse
  } ifelse
} bind def

% execute <proc>@<string> or else default:  <proc> <string> ldiagdolabel <various>
/ldiagdolabel
{
  % (Entering ldiagdolabel) 2 ldiagdebugprint
  ldiagfindlabel not
  {
    dup (CIRCUM) eq
    { pop pop pop 0 0
    }
    {
      dup (ANGLE) eq
      { pop pop 0
      }
      { pop cvx exec
      } ifelse
    } ifelse
  } if
  % (Leaving ldiagdolabel) 2 ldiagdebugprint
} bind def

% execute a proc depending on whether number is negative, zero, or positive
% procneg proczero procpos number ldiagsigncase <anything>
/ldiagsigncase
{
  % (Entering ldiagsigncase) 4 ldiagdebugprint
  dup 0 lt
  { pop pop pop exec
  }
  { 0 gt
    { exch pop exch pop exec
    }
    { pop exch pop exec
    } ifelse
  } ifelse
  % (Leaving ldiagsigncase) 0 ldiagdebugprint
} bind def

% execute proci if angle is in ith quadrant
% proc45 proc270 proc180 proc90 proc0 proc315 proc225 proc135 angle ldiagquadcase <anything>
/ldiagquadcase
{
  % (Entering ldiagquadcase) 9 ldiagdebugprint
  round ldiagfixangle cvi dup 90 mod 0 eq
  { 90 idiv 4 add } { 90 idiv } ifelse
  8 exch roll pop pop pop pop pop pop pop exec
  % (Leaving ldiagquadcase) 0 ldiagdebugprint
} bind def

% decode Lout length into PostScript length
% <string> ldiagdecodelength <number>
/ldiagdecodelength
{
  % (Entering ldiagdecodelength) 1 ldiagdebugprint
  (f) search
  { exch pop exch pop cvr ft
  }
  { (c) search
    { exch pop exch pop cvr cm
    }
    { (p) search
      { exch pop exch pop cvr pt
      }
      { (m) search
	{ exch pop exch pop cvr em
	}
	{ (s) search
	  { exch pop exch pop cvr sp
	  }
	  { (v) search
	    { exch pop exch pop cvr vs
	    }
	    { (i) search
	      { exch pop exch pop cvr in
	      }
	      { pop 0
	      } ifelse
	    } ifelse
	  } ifelse
	} ifelse
      } ifelse
    } ifelse
  } ifelse
  % (Leaving ldiagdecodelength) 1 ldiagdebugprint
} def

% implement aabout function
% logical form:  <circum> <extra> <centre> aabout <point>
% actual form:   { <labelorpoint> } cvlit <length> [ <point> ] cvx aabout <point>
/ldiagaabout
{
  /centre exch def
  /extra exch def
  /circum exch def

  /ZXCTR [ centre ] cvx def
  /ZFCTR [ circum (CTR) ldiagdolabel ] cvx def
  /ZAREF ZFCTR ZXCTR ldiagangleto def
  /ZAMIN 0 dg def
  /ZPMIN [ circum (CTR) ldiagdolabel ZAREF ZAMIN sub
	 circum (CIRCUM) ldiagdolabel ldiagpadd
	 0 0 extra ZAREF ZAMIN sub ldiagatangle
	 ldiagpadd ] cvx def

  /ZAMAX 90 dg def
  /ZPMAX [ circum (CTR) ldiagdolabel ZAREF ZAMAX sub
	 circum (CIRCUM) ldiagdolabel ldiagpadd
	 0 0 extra ZAREF ZAMAX sub ldiagatangle
	 ldiagpadd ] cvx def

  1 1 20
  { /xval exch def
    /ZAMID ZAMIN ZAMAX add 0.5 mul def
    /ZPMID [ circum (CTR) ldiagdolabel ZAREF ZAMID sub
	   circum (CIRCUM) ldiagdolabel ldiagpadd
	   0 0 extra ZAREF ZAMID sub ldiagatangle
	   ldiagpadd ] cvx def
    ZPMID ZXCTR ldiagdistance ZFCTR ZXCTR ldiagdistance gt
    {
      /ZAMAX [ ZAMID ] cvx def
      /ZPMAX [ ZPMID ] cvx def
    }
    {
      /ZAMIN [ ZAMID ] cvx def
      /ZPMIN [ ZPMID ] cvx def
    } ifelse
  } for
  ZPMID
} def

% implement cabout function
% logical form:  <circum> <extra> <centre> cabout <point>
% actual form:   { <labelorpoint> } cvlit <length> [ <point> ] cvx cabout <point>
/ldiagcabout
{
  /centre exch def
  /extra exch def
  /circum exch def

  /ZXCTR [ centre ] cvx def
  /ZFCTR [ circum (CTR) ldiagdolabel ] cvx def
  /ZAREF ZFCTR ZXCTR ldiagangleto def
  /ZAMIN 0 dg def
  /ZPMIN [ circum (CTR) ldiagdolabel ZAREF ZAMIN add
	 circum (CIRCUM) ldiagdolabel ldiagpadd
	 0 0 extra ZAREF ZAMIN add ldiagatangle
	 ldiagpadd ] cvx def

  /ZAMAX 90 dg def
  /ZPMAX [ circum (CTR) ldiagdolabel ZAREF ZAMAX add
	 circum (CIRCUM) ldiagdolabel ldiagpadd
	 0 0 extra ZAREF ZAMAX add ldiagatangle
	 ldiagpadd ] cvx def

  1 1 20
  { /xval exch def
    /ZAMID ZAMIN ZAMAX add 0.5 mul def
    /ZPMID [ circum (CTR) ldiagdolabel ZAREF ZAMID add
	   circum (CIRCUM) ldiagdolabel ldiagpadd
	   0 0 extra ZAREF ZAMID add ldiagatangle
	   ldiagpadd ] cvx def
    ZPMID ZXCTR ldiagdistance ZFCTR ZXCTR ldiagdistance gt
    {
      /ZAMAX [ ZAMID ] cvx def
      /ZPMAX [ ZPMID ] cvx def
    }
    {
      /ZAMIN [ ZAMID ] cvx def
      /ZPMIN [ ZPMID ] cvx def
    } ifelse
  } for
  ZPMID
} def

% fromarrowlength toarrowlength { from } { to } xindent zindent ldiaglinepath -
/ldiaglinepath
{
  % (entering ldiaglinepath) 0 ldiagdebugprint
  /zindent exch def
  /xindent exch def
  cvlit /to exch def
  cvlit /from exch def
  /toarrowlength exch def
  /fromarrowlength exch def

  from (CTR) ldiagdolabel to (CTR) ldiagdolabel ldiagangleto
  /FROM@ANGLE ldiagangledef 
  from (CTR) ldiagdolabel FROM@ANGLE from (CIRCUM) ldiagdolabel ldiagpadd
  0 0 fromarrowlength FROM@ANGLE ldiagatangle ldiagpadd
  /FROM ldiagpointdef

  FROM@ANGLE /TO@ANGLE ldiagangledef
  to (CTR) ldiagdolabel TO@ANGLE 180 dg sub to (CIRCUM) ldiagdolabel ldiagpadd
  0 0 toarrowlength TO@ANGLE 180 dg sub ldiagatangle ldiagpadd /TO ldiagpointdef

  FROM 0.5 ldiagpmul TO 0.5 ldiagpmul ldiagpadd /LMID ldiagpointdef
  FROM@ANGLE /LMID@ANGLE ldiagangledef

  /XINDENT xindent FROM LMID ldiagdistance ldiagmin def
  FROM 0 0 XINDENT FROM@ANGLE ldiagatangle ldiagpadd /LFROM ldiagpointdef
  FROM@ANGLE /LFROM@ANGLE ldiagangledef

  /ZINDENT zindent TO LMID ldiagdistance ldiagmin def
  0 0 ZINDENT FROM@ANGLE ldiagatangle TO ldiagpsub /LTO ldiagpointdef
  FROM@ANGLE /LTO@ANGLE ldiagangledef

  direct { FROM TO } { FROM LFROM LMID LTO TO } ifelse

  % (leaving ldiaglinepath) 0 ldiagdebugprint
} def

% fromarrowlength toarrowlength { from } { to } xindent zindent pathgap ldiagdoublelinepath -
/ldiagdoublelinepath
{
  % (entering ldiagdoublelinepath) 0 ldiagdebugprint
  /pathgap exch def
  /zindent exch def
  /xindent exch def
  cvlit /to exch def
  cvlit /from exch def
  /toarrowlength exch def
  /fromarrowlength exch def

  from (CTR) ldiagdolabel to (CTR) ldiagdolabel ldiagangleto
  /FROM@ANGLE ldiagangledef 
  from (CTR) ldiagdolabel FROM@ANGLE from (CIRCUM) ldiagdolabel ldiagpadd
  0 0 fromarrowlength FROM@ANGLE ldiagatangle ldiagpadd
  /FROM ldiagpointdef

  FROM@ANGLE /TO@ANGLE ldiagangledef
  to (CTR) ldiagdolabel TO@ANGLE 180 dg sub to (CIRCUM) ldiagdolabel ldiagpadd
  0 0 toarrowlength TO@ANGLE 180 dg sub ldiagatangle ldiagpadd /TO ldiagpointdef

  FROM 0.5 ldiagpmul TO 0.5 ldiagpmul ldiagpadd /LMID ldiagpointdef
  FROM@ANGLE /LMID@ANGLE ldiagangledef

  /XINDENT xindent FROM LMID ldiagdistance ldiagmin def
  FROM 0 0 XINDENT FROM@ANGLE ldiagatangle ldiagpadd /LFROM ldiagpointdef
  FROM@ANGLE /LFROM@ANGLE ldiagangledef

  /ZINDENT zindent TO LMID ldiagdistance ldiagmin def
  0 0 ZINDENT FROM@ANGLE ldiagatangle TO ldiagpsub /LTO ldiagpointdef
  FROM@ANGLE /LTO@ANGLE ldiagangledef

  direct {
    FROM pathgap 2 div FROM@ANGLE 90 dg sub ldiagatangle
    TO   pathgap 2 div FROM@ANGLE 90 dg sub ldiagatangle
    []
    FROM pathgap 2 div FROM@ANGLE 90 dg add ldiagatangle
    TO   pathgap 2 div FROM@ANGLE 90 dg add ldiagatangle
  }
  {
    FROM  pathgap 2 div FROM@ANGLE 90 dg sub ldiagatangle
    LFROM pathgap 2 div FROM@ANGLE 90 dg sub ldiagatangle
    LMID  pathgap 2 div FROM@ANGLE 90 dg sub ldiagatangle
    LTO   pathgap 2 div FROM@ANGLE 90 dg sub ldiagatangle
    TO    pathgap 2 div FROM@ANGLE 90 dg sub ldiagatangle
    []
    FROM  pathgap 2 div FROM@ANGLE 90 dg add ldiagatangle
    LFROM pathgap 2 div FROM@ANGLE 90 dg add ldiagatangle
    LMID  pathgap 2 div FROM@ANGLE 90 dg add ldiagatangle
    LTO   pathgap 2 div FROM@ANGLE 90 dg add ldiagatangle
    TO    pathgap 2 div FROM@ANGLE 90 dg add ldiagatangle
  } ifelse

  % (leaving ldiagdoublelinepath) 0 ldiagdebugprint
} def

% fromarrowlen toarrowlen { from } { to } xindent zindent bias ldiagacurvepath -
/ldiagacurvepath
{
  % (entering ldiagacurvepath) 0 ldiagdebugprint
  /bias exch def
  /zindent exch def
  /xindent exch def
  cvlit /to exch def
  cvlit /from exch def
  /toarrowlength exch def
  /fromarrowlength exch def

  %/B1 bias 0.02 ft ldiagmax def
  %/B2 from (CTR) ldiagdolabel to (CTR) ldiagdolabel ldiagdistance 0.5 mul def
  %/BIAS B1 B2 ldiagmin def
  /BIAS bias 0.02 ft ldiagmax def
  /XMID [ from (CTR) ldiagdolabel 0.5 ldiagpmul
	  to   (CTR) ldiagdolabel 0.5 ldiagpmul ldiagpadd ] cvx def
  /XTOP [ XMID 0 0 BIAS from (CTR) ldiagdolabel to (CTR) ldiagdolabel
	  ldiagangleto 90 dg sub ldiagatangle ldiagpadd ] cvx def
  /CTR [ from (CTR) ldiagdolabel XTOP ldiaglinebetween
	 to   (CTR) ldiagdolabel XTOP ldiaglinebetween
	 ldiaglineintersect ] cvx def

  from fromarrowlength [ CTR ] cvx ldiagaabout /FROM ldiagpointdef
  from (CTR) ldiagdolabel FROM ldiagdistance 0 gt
  { from (CTR) ldiagdolabel FROM ldiagangleto
  }
  { CTR FROM ldiagangleto 90 dg add
  } ifelse /FROM@ANGLE ldiagangledef

  to toarrowlength [ CTR ] cvx ldiagcabout /TO ldiagpointdef
  TO to (CTR) ldiagdolabel ldiagdistance 0 gt
  { TO to (CTR) ldiagdolabel ldiagangleto
  }
  { CTR TO ldiagangleto 90 dg add
  } ifelse /TO@ANGLE ldiagangledef

  /RADIUS CTR FROM ldiagdistance def
  CTR 0 0 RADIUS CTR FROM ldiagangleto 360 dg CTR TO ldiagangleto
  add CTR FROM ldiagangleto sub cvi 360 mod 0.5 mul add
  ldiagatangle ldiagpadd /LMID ldiagpointdef
  CTR LMID ldiagangleto 90 dg add /LMID@ANGLE ldiagangledef

  /XINDENT xindent FROM LMID ldiagdistance ldiagmin def
  CTR 0 0 RADIUS CTR FROM 0 0 XINDENT FROM@ANGLE ldiagatangle
  ldiagpadd ldiagangleto ldiagatangle ldiagpadd /LFROM ldiagpointdef
  CTR LFROM ldiagangleto 90 dg add /LFROM@ANGLE ldiagangledef

  /ZINDENT zindent TO LMID ldiagdistance ldiagmin def
  CTR 0 0 RADIUS CTR TO 0 0 ZINDENT TO@ANGLE 180 dg add
  ldiagatangle ldiagpadd ldiagangleto ldiagatangle ldiagpadd /LTO ldiagpointdef
  CTR LTO ldiagangleto 90 dg add /LTO@ANGLE ldiagangledef

  direct
  { FROM [CTR] TO }
  { FROM [CTR] LFROM [CTR] LMID [CTR] LTO [CTR] TO }
  ifelse

  % (leaving ldiagacurvepath) 0 ldiagdebugprint
} def

% fromarrowlen toarrowlen { from } { to } xindent zindent bias ldiagccurvepath -
/ldiagccurvepath
{
  % (entering ldiagccurvepath) 0 ldiagdebugprint
  % count (  stack size is) 1 ldiagdebugprint pop
  /bias exch def
  /zindent exch def
  /xindent exch def
  cvlit /to exch def
  cvlit /from exch def
  /toarrowlength exch def
  /fromarrowlength exch def

  %/B1 bias 0.02 ft ldiagmax def
  %/B2 from (CTR) ldiagdolabel to (CTR) ldiagdolabel ldiagdistance 0.5 mul def
  %/BIAS B1 B2 ldiagmin def
  /BIAS bias 0.02 ft ldiagmax def
  /XMID [ from (CTR) ldiagdolabel 0.5 ldiagpmul
	to (CTR) ldiagdolabel 0.5 ldiagpmul ldiagpadd ] cvx def
  /XTOP [ XMID 0 0 BIAS from (CTR) ldiagdolabel to (CTR) ldiagdolabel
	ldiagangleto 90 dg add ldiagatangle ldiagpadd ] cvx def
  /CTR [ from (CTR) ldiagdolabel XTOP ldiaglinebetween
         to (CTR) ldiagdolabel XTOP ldiaglinebetween ldiaglineintersect ] cvx def

  from fromarrowlength [ CTR ] cvx ldiagcabout /FROM ldiagpointdef
  from (CTR) ldiagdolabel FROM ldiagdistance 0 gt
  { from (CTR) ldiagdolabel FROM ldiagangleto }
  { CTR FROM ldiagangleto 90 dg sub }
  ifelse /FROM@ANGLE ldiagangledef

  to toarrowlength [ CTR ] cvx ldiagaabout /TO ldiagpointdef
  TO to (CTR) ldiagdolabel ldiagdistance 0 gt
  { TO to (CTR) ldiagdolabel ldiagangleto }
  { CTR TO ldiagangleto 90 dg sub }
  ifelse /TO@ANGLE ldiagangledef

  /RADIUS [ CTR FROM ldiagdistance ] cvx def
  CTR 0 0 RADIUS CTR TO ldiagangleto 360 dg CTR FROM ldiagangleto add
  CTR TO ldiagangleto sub cvi 360 cvi mod 2 div add ldiagatangle
  ldiagpadd /LMID ldiagpointdef
  CTR LMID ldiagangleto 90 dg sub /LMID@ANGLE ldiagangledef

  /XINDENT [ xindent FROM LMID ldiagdistance ldiagmin ] cvx def
  CTR 0 0 RADIUS CTR FROM 0 0 XINDENT FROM@ANGLE ldiagatangle ldiagpadd
  ldiagangleto ldiagatangle ldiagpadd /LFROM ldiagpointdef
  CTR LFROM ldiagangleto 90 dg sub /LFROM@ANGLE ldiagangledef

  /ZINDENT [ zindent TO LMID ldiagdistance ldiagmin ] cvx def
  CTR 0 0 RADIUS CTR TO 0 0 ZINDENT TO@ANGLE 180 dg add ldiagatangle
  ldiagpadd ldiagangleto ldiagatangle ldiagpadd /LTO ldiagpointdef
  CTR LTO ldiagangleto 90 dg sub /LTO@ANGLE ldiagangledef

  direct
  { FROM [CTR clockwise] TO }
  { FROM [CTR clockwise] LFROM [CTR clockwise]
  LMID [CTR clockwise] LTO [CTR clockwise] TO }
  ifelse
  % (leaving ldiagccurvepath) 0 ldiagdebugprint
} def


% farr tarr { from } { to } xindent zindent [frompt] [topt] ldiagbezierpath -
/ldiagbezierpath
{
  % (entering ldiagbezierpath) 0 ldiagdebugprint
  % count (  stack size is) 1 ldiagdebugprint pop
  cvx /topt exch def
  cvx /frompt exch def
  /zindent exch def
  /xindent exch def
  cvlit /to exch def
  cvlit /from exch def
  /toarrowlength exch def
  /fromarrowlength exch def

  from (CTR) ldiagdolabel frompt ldiagangleto /FROM@ANGLE ldiagangledef
  from (CTR) ldiagdolabel FROM@ANGLE from (CIRCUM) ldiagdolabel
  ldiagpadd 0 0 fromarrowlength FROM@ANGLE ldiagatangle ldiagpadd
  /FROM ldiagpointdef

  topt to (CTR) ldiagdolabel ldiagangleto /TO@ANGLE ldiagangledef
  to (CTR) ldiagdolabel TO@ANGLE 180 dg add to (CIRCUM) ldiagdolabel
  ldiagpadd 0 0 toarrowlength TO@ANGLE 180 dg add ldiagatangle ldiagpadd
  /TO ldiagpointdef

  FROM 0 0 xindent FROM@ANGLE ldiagatangle ldiagpadd
  /LFROM ldiagpointdef
  FROM@ANGLE /LFROM@ANGLE ldiagangledef

  TO 0 0 zindent TO@ANGLE 180 dg add ldiagatangle ldiagpadd
  /LTO ldiagpointdef
  TO@ANGLE /LTO@ANGLE ldiagangledef

  FROM TO ldiagpadd frompt ldiagpadd topt ldiagpadd 0.25 ldiagpmul
  /LMID ldiagpointdef

  FROM [frompt topt] TO

  % (leaving ldiagbezierpath) 0 ldiagdebugprint
  % count (  stack size is) 1 ldiagdebugprint pop
} def


% farr tarr { from } { to } xindent zindent ldiagvhlinepath -
/ldiagvhlinepath
{
  % (entering ldiagvhlinepath) 0 ldiagdebugprint
  % count (  stack size is) 1 ldiagdebugprint pop
  /zindent exch def
  /xindent exch def
  cvlit /to exch def
  cvlit /from exch def
  /toarrowlength exch def
  /fromarrowlength exch def

  /CTR [ from (CTR) ldiagdolabel pop to (CTR) ldiagdolabel exch pop ] cvx def
  /FANG [ from (CTR) ldiagdolabel CTR ldiagangleto ] cvx def
  /TANG [ to (CTR) ldiagdolabel CTR ldiagangleto ] cvx def

  from (CTR) ldiagdolabel FANG from (CIRCUM) ldiagdolabel ldiagpadd
  0 0 fromarrowlength FANG ldiagatangle ldiagpadd /FROM ldiagpointdef
  FANG /FROM@ANGLE ldiagangledef

  to (CTR) ldiagdolabel TANG to (CIRCUM) ldiagdolabel ldiagpadd
  0 0 toarrowlength TANG ldiagatangle ldiagpadd /TO ldiagpointdef
  TANG 180 dg add /TO@ANGLE ldiagangledef

  /FDIST [ FROM CTR ldiagdistance ] cvx def
  /TDIST [ TO CTR ldiagdistance ] cvx def
  /XINDENT [ xindent FDIST ldiagmin ] cvx def
  /ZINDENT [ zindent TDIST ldiagmin ] cvx def
  FROM 0 0 XINDENT FANG ldiagatangle ldiagpadd /LFROM ldiagpointdef
  FROM@ANGLE /LFROM@ANGLE ldiagangledef
  TO 0 0 ZINDENT TANG ldiagatangle ldiagpadd /LTO ldiagpointdef
  TO@ANGLE /LTO@ANGLE ldiagangledef

  CTR /LMID ldiagpointdef
  0 0 1 ft FANG 180 dg add ldiagatangle
  0 0 1 ft TANG 180 dg add ldiagatangle
  ldiagangleto /LMID@ANGLE ldiagangledef

  FROM LFROM LMID LTO TO

  % (leaving ldiagvhlinepath) 0 ldiagdebugprint
  % count (  stack size is) 1 ldiagdebugprint pop
} def

% farr tarr { from } { to } xindent zindent radius ldiagvhcurvepath -
/ldiagvhcurvepath
{
  % (entering ldiagvhcurvepath) 0 ldiagdebugprint
  % count (  stack size is) 1 ldiagdebugprint pop
  /radius exch def
  /zindent exch def
  /xindent exch def
  cvlit /to exch def
  cvlit /from exch def
  /toarrowlength exch def
  /fromarrowlength exch def

  /CTR [ from (CTR) ldiagdolabel pop to (CTR) ldiagdolabel exch pop ] cvx def
  /FANG [ from (CTR) ldiagdolabel CTR ldiagangleto ] cvx def
  /TANG [ to (CTR) ldiagdolabel CTR ldiagangleto ] cvx def

  from (CTR) ldiagdolabel FANG from (CIRCUM) ldiagdolabel ldiagpadd
  0 0 fromarrowlength FANG ldiagatangle ldiagpadd /FROM ldiagpointdef
  FANG /FROM@ANGLE ldiagangledef

  to (CTR) ldiagdolabel TANG to (CIRCUM) ldiagdolabel ldiagpadd
  0 0 toarrowlength TANG ldiagatangle ldiagpadd /TO ldiagpointdef
  TANG 180 dg add /TO@ANGLE ldiagangledef

  /FDIST [ FROM CTR ldiagdistance ] cvx def
  /TDIST [ TO CTR ldiagdistance ] cvx def
  /RADIUS [ radius FDIST TDIST ldiagmin ldiagmin ] cvx def
  /XINDENT [ xindent FDIST RADIUS sub ldiagmin ] cvx def
  /ZINDENT [ zindent TDIST RADIUS sub ldiagmin ] cvx def

  FROM 0 0 XINDENT FANG ldiagatangle ldiagpadd /LFROM ldiagpointdef
  FROM@ANGLE /LFROM@ANGLE ldiagangledef
  TO 0 0 ZINDENT TANG ldiagatangle ldiagpadd /LTO ldiagpointdef
  TO@ANGLE /LTO@ANGLE ldiagangledef

  /FCTR [ CTR 0 0 RADIUS FROM@ANGLE 180 dg add ldiagatangle ldiagpadd ] cvx def
  /TCTR [ CTR 0 0 RADIUS TO@ANGLE ldiagatangle ldiagpadd ] cvx def
  /XCTR [ CTR 0 0 RADIUS FROM@ANGLE 180 dg add ldiagatangle ldiagpadd
              0 0 RADIUS TO@ANGLE ldiagatangle ldiagpadd ] cvx def
  XCTR 0 0 RADIUS XCTR CTR ldiagangleto ldiagatangle ldiagpadd
  /LMID ldiagpointdef
  FCTR TCTR ldiagangleto /LMID@ANGLE ldiagangledef

  FROM LFROM FCTR
  {[XCTR clockwise]} {} {} {} {} {[XCTR]} {[XCTR clockwise]} {[XCTR]}
  FCTR TCTR ldiagangleto ldiagquadcase
  TCTR LTO TO

  % (leaving ldiagvhcurvepath) 0 ldiagdebugprint
  % count (  stack size is) 1 ldiagdebugprint pop
} def

% farr tarr { from } { to } xindent zindent ldiaghvlinepath -
/ldiaghvlinepath
{
  % (entering ldiaghvlinepath) 0 ldiagdebugprint
  % count (  stack size is) 1 ldiagdebugprint pop
  /zindent exch def
  /xindent exch def
  cvlit /to exch def
  cvlit /from exch def
  /toarrowlength exch def
  /fromarrowlength exch def

  /CTR [ to (CTR) ldiagdolabel pop from (CTR) ldiagdolabel exch pop ] cvx def
  /FANG [ from (CTR) ldiagdolabel CTR ldiagangleto ] cvx def
  /TANG [ to (CTR) ldiagdolabel CTR ldiagangleto ] cvx def

  from (CTR) ldiagdolabel FANG from (CIRCUM) ldiagdolabel ldiagpadd
  0 0 fromarrowlength FANG ldiagatangle ldiagpadd /FROM ldiagpointdef
  FANG /FROM@ANGLE ldiagangledef

  to (CTR) ldiagdolabel TANG to (CIRCUM) ldiagdolabel ldiagpadd
  0 0 toarrowlength TANG ldiagatangle ldiagpadd /TO ldiagpointdef
  TANG 180 dg add /TO@ANGLE ldiagangledef

  /FDIST [ FROM CTR ldiagdistance ] cvx def
  /TDIST [ TO CTR ldiagdistance ] cvx def
  /XINDENT [ xindent FDIST ldiagmin ] cvx def
  /ZINDENT [ zindent TDIST ldiagmin ] cvx def

  FROM 0 0 XINDENT FANG ldiagatangle ldiagpadd /LFROM ldiagpointdef
  FROM@ANGLE /LFROM@ANGLE ldiagangledef
  TO 0 0 ZINDENT TANG ldiagatangle ldiagpadd /LTO ldiagpointdef
  TO@ANGLE /LTO@ANGLE ldiagangledef

  CTR /LMID ldiagpointdef
  0 0 1 ft FANG 180 dg add ldiagatangle
  0 0 1 ft TANG 180 dg add ldiagatangle ldiagangleto
  /LMID@ANGLE ldiagangledef

  FROM LFROM LMID LTO TO

  % (leaving ldiaghvlinepath) 0 ldiagdebugprint
  % count (  stack size is) 1 ldiagdebugprint pop
} def

% farr tarr { from } { to } xindent zindent radius ldiaghvcurvepath -
/ldiaghvcurvepath
{
  % (entering ldiaghvcurvepath) 0 ldiagdebugprint
  % count (  stack size is) 1 ldiagdebugprint pop
  /radius exch def
  /zindent exch def
  /xindent exch def
  cvlit /to exch def
  cvlit /from exch def
  /toarrowlength exch def
  /fromarrowlength exch def

  /CTR [ to (CTR) ldiagdolabel pop from (CTR) ldiagdolabel exch pop ] cvx def
  /FANG [ from (CTR) ldiagdolabel CTR ldiagangleto ] cvx def
  /TANG [ to (CTR) ldiagdolabel CTR ldiagangleto ] cvx def

  from (CTR) ldiagdolabel FANG from (CIRCUM) ldiagdolabel ldiagpadd
  0 0 fromarrowlength FANG ldiagatangle ldiagpadd /FROM ldiagpointdef
  FANG /FROM@ANGLE ldiagangledef

  to (CTR) ldiagdolabel TANG to (CIRCUM) ldiagdolabel ldiagpadd
  0 0 toarrowlength TANG ldiagatangle ldiagpadd /TO ldiagpointdef
  TANG 180 dg add /TO@ANGLE ldiagangledef

  /FDIST [ FROM CTR ldiagdistance ] cvx def
  /TDIST [ TO CTR ldiagdistance ] cvx def
  /RADIUS [ radius FDIST TDIST ldiagmin ldiagmin ] cvx def
  /XINDENT [ xindent FDIST RADIUS sub ldiagmin ] cvx def
  /ZINDENT [ zindent TDIST RADIUS sub ldiagmin ] cvx def
  FROM 0 0 XINDENT FANG ldiagatangle ldiagpadd /LFROM ldiagpointdef
  FROM@ANGLE /LFROM@ANGLE ldiagangledef
  TO 0 0 ZINDENT TANG ldiagatangle ldiagpadd /LTO ldiagpointdef
  TO@ANGLE /LTO@ANGLE ldiagangledef

  /FCTR [ CTR 0 0 RADIUS FROM@ANGLE 180 dg add ldiagatangle ldiagpadd ] cvx def
  /TCTR [ CTR 0 0 RADIUS TO@ANGLE ldiagatangle ldiagpadd ] cvx def
  /XCTR [ CTR 0 0 RADIUS FROM@ANGLE 180 dg add ldiagatangle ldiagpadd
	      0 0 RADIUS TO@ANGLE ldiagatangle ldiagpadd ] cvx def
  XCTR 0 0 RADIUS XCTR CTR ldiagangleto ldiagatangle ldiagpadd
  /LMID ldiagpointdef
  FCTR TCTR ldiagangleto /LMID@ANGLE ldiagangledef

  FROM LFROM FCTR
  {[XCTR]} {} {} {} {} {[XCTR clockwise]} {[XCTR]} {[XCTR clockwise]}
  FCTR TCTR ldiagangleto ldiagquadcase
  TCTR LTO TO

  % (leaving ldiaghvcurvepath) 0 ldiagdebugprint
  % count (  stack size is) 1 ldiagdebugprint pop
} def

% farr tarr { from } { to } xindent zindent bias ldiaglvrlinepath -
/ldiaglvrlinepath
{
  % (entering ldiaglvrlinepath) 0 ldiagdebugprint
  % count (  stack size is) 1 ldiagdebugprint pop
  /bias exch def
  /zindent exch def
  /xindent exch def
  cvlit /to exch def
  cvlit /from exch def
  /toarrowlength exch def
  /fromarrowlength exch def

  from (CTR) ldiagdolabel 180 dg from (CIRCUM) ldiagdolabel ldiagpadd
  0 0 fromarrowlength 180 dg ldiagatangle ldiagpadd /FROM ldiagpointdef
  180 dg /FROM@ANGLE ldiagangledef

  to (CTR) ldiagdolabel 180 dg to (CIRCUM) ldiagdolabel ldiagpadd
  0 0 toarrowlength 180 dg ldiagatangle ldiagpadd /TO ldiagpointdef
  0 dg /TO@ANGLE ldiagangledef

  /XLEFT [ FROM pop TO pop ldiagmin bias sub ] cvx def
  XLEFT FROM exch pop /P1 ldiagpointdef
  XLEFT TO exch pop /P2 ldiagpointdef
  /VERT [ P1 P2 ldiagangleto ] cvx def
  P1 P1 0 0 1 ft 180 dg ldiagatangle ldiagpadd 0 0 1 ft VERT ldiagatangle
  ldiagpadd ldiagangleto /P1@ANGLE ldiagangledef
  P2 P2 0 0 1 ft 0 dg ldiagatangle ldiagpadd 0 0 1 ft VERT ldiagatangle
  ldiagpadd ldiagangleto /P2@ANGLE ldiagangledef

  P1 0.5 ldiagpmul P2 0.5 ldiagpmul ldiagpadd /LMID ldiagpointdef
  VERT /LMID@ANGLE ldiagangledef

  /XINDENT [ xindent FROM P1 ldiagdistance ldiagmin ] cvx def
  /ZINDENT [ zindent P2 TO ldiagdistance ldiagmin ] cvx def
  XINDENT 0 FROM ldiagpsub /LFROM ldiagpointdef
  180 dg /LFROM@ANGLE ldiagangledef
  ZINDENT 0 TO ldiagpsub /LTO ldiagpointdef
  0 dg /LTO@ANGLE ldiagangledef

  FROM LFROM P1 LMID P2 LTO TO

  % (leaving ldiaglvrlinepath) 0 ldiagdebugprint
  % count (  stack size is) 1 ldiagdebugprint pop
} def

% farr tarr { from } { to } xindent zindent bias radius ldiaglvrcurvepath -
/ldiaglvrcurvepath
{
  % (entering ldiaglvrcurvepath) 0 ldiagdebugprint
  % count (  stack size is) 1 ldiagdebugprint pop
  /radius exch def
  /bias exch def
  /zindent exch def
  /xindent exch def
  cvlit /to exch def
  cvlit /from exch def
  /toarrowlength exch def
  /fromarrowlength exch def

  from (CTR) ldiagdolabel 180 dg from (CIRCUM) ldiagdolabel ldiagpadd 0 0
  fromarrowlength 180 dg ldiagatangle ldiagpadd /FROM ldiagpointdef
  180 dg /FROM@ANGLE ldiagangledef
  to (CTR) ldiagdolabel 180 dg to (CIRCUM) ldiagdolabel ldiagpadd 0 0
  toarrowlength 180 dg ldiagatangle ldiagpadd /TO ldiagpointdef
  0 dg /TO@ANGLE ldiagangledef
  /XLEFT [ FROM pop TO pop ldiagmin bias sub ] cvx def
  /XP1 [ XLEFT FROM exch pop ] cvx def
  /XP2 [ XLEFT TO exch pop ] cvx def
  /VERT [ XP1 XP2 ldiagangleto ] cvx def
  XP1 0.5 ldiagpmul XP2 0.5 ldiagpmul ldiagpadd /LMID ldiagpointdef
  VERT /LMID@ANGLE ldiagangledef
  /XINDENT [ xindent FROM XP1 ldiagdistance ldiagmin ] cvx def
  /ZINDENT [ zindent XP2 TO ldiagdistance ldiagmin ] cvx def
  XINDENT 0 FROM ldiagpsub /LFROM ldiagpointdef
  180 dg /LFROM@ANGLE ldiagangledef
  ZINDENT 0 TO ldiagpsub /LTO ldiagpointdef
  0 dg /LTO@ANGLE ldiagangledef
  /RADIUS [ radius XP1 XP2 ldiagdistance 2 div ldiagmin ] cvx def
  /XP1PRE [ XP1 0 0 RADIUS 0 dg ldiagatangle ldiagpadd ] cvx def
  /XP1POST [ XP1 0 0 RADIUS VERT ldiagatangle ldiagpadd ] cvx def
  /XP1CTR [ XP1PRE 0 0 RADIUS VERT ldiagatangle ldiagpadd ] cvx def
  XP1CTR 0 0 RADIUS XP1CTR XP1 ldiagangleto ldiagatangle ldiagpadd
  /P1 ldiagpointdef
  XP1PRE XP1POST ldiagangleto /P1@ANGLE ldiagangledef
  /XP2PRE [ 0 0 RADIUS VERT ldiagatangle XP2 ldiagpsub ] cvx def
  /XP2POST [ XP2 0 0 RADIUS 0 dg ldiagatangle ldiagpadd ] cvx def
  /XP2CTR [ XP2PRE 0 0 RADIUS 0 dg ldiagatangle ldiagpadd ] cvx def
  XP2CTR 0 0 RADIUS XP2CTR XP2 ldiagangleto ldiagatangle ldiagpadd
  /P2 ldiagpointdef
  XP2PRE XP2POST ldiagangleto /P2@ANGLE ldiagangledef
  FROM LFROM XP1PRE
  {  } { [XP1CTR] P1 [XP1CTR] } {  } { [XP1CTR clockwise] P1 [XP1CTR clockwise] }
  {  } {  } {  } {  } VERT round ldiagquadcase
  XP1POST LMID XP2PRE
  {  } { [XP2CTR] P2 [XP2CTR] } {  } { [XP2CTR clockwise] P2 [XP2CTR clockwise] }
  {  } {  } {  } {  } VERT round ldiagquadcase
  XP2POST LTO TO

  % (leaving ldiaglvrcurvepath) 0 ldiagdebugprint
  % count (  stack size is) 1 ldiagdebugprint pop
} def

% farr tarr { from } { to } xindent zindent bias ldiagrvllinepath -
/ldiagrvllinepath
{
  % (entering ldiagrvllinepath) 0 ldiagdebugprint
  % count (  stack size is) 1 ldiagdebugprint pop
  /bias exch def
  /zindent exch def
  /xindent exch def
  cvlit /to exch def
  cvlit /from exch def
  /toarrowlength exch def
  /fromarrowlength exch def

  from (CTR) ldiagdolabel 0 dg from (CIRCUM) ldiagdolabel ldiagpadd
  0 0 fromarrowlength 0 dg ldiagatangle ldiagpadd /FROM ldiagpointdef
  0 dg /FROM@ANGLE ldiagangledef
  to (CTR) ldiagdolabel 0 dg to (CIRCUM) ldiagdolabel ldiagpadd
  0 0 toarrowlength 0 dg ldiagatangle ldiagpadd /TO ldiagpointdef
  180 dg /TO@ANGLE ldiagangledef
  /XRIGHT [ FROM pop TO pop ldiagmax bias add ] cvx def
  XRIGHT FROM exch pop /P1 ldiagpointdef
  XRIGHT TO exch pop /P2 ldiagpointdef
  /VERT [ P1 P2 ldiagangleto ] cvx def
  P1 P1 0 0 1 ft 0 dg ldiagatangle ldiagpadd 0 0 1 ft VERT ldiagatangle
  ldiagpadd ldiagangleto /P1@ANGLE ldiagangledef
  P2 P2 0 0 1 ft 180 dg ldiagatangle ldiagpadd 0 0 1 ft VERT ldiagatangle
  ldiagpadd ldiagangleto /P2@ANGLE ldiagangledef
  P1 0.5 ldiagpmul P2 0.5 ldiagpmul ldiagpadd /LMID ldiagpointdef
  VERT /LMID@ANGLE ldiagangledef
  /XINDENT [ xindent FROM P1 ldiagdistance ldiagmin ] cvx def
  /ZINDENT [ zindent P2 TO ldiagdistance ldiagmin ] cvx def
  FROM XINDENT 0 ldiagpadd /LFROM ldiagpointdef
  0 dg /LFROM@ANGLE ldiagangledef
  TO ZINDENT 0 ldiagpadd /LTO ldiagpointdef
  180 dg /LTO@ANGLE ldiagangledef
  FROM LFROM P1 LMID P2 LTO TO

  % (leaving ldiagrvllinepath) 0 ldiagdebugprint
  % count (  stack size is) 1 ldiagdebugprint pop
} def


% farr tarr { from } { to } xindent zindent bias radius ldiagrvlcurvepath -
/ldiagrvlcurvepath
{
  % (entering ldiagrvlcurvepath) 0 ldiagdebugprint
  % count (  stack size is) 1 ldiagdebugprint pop
  /radius exch def
  /bias exch def
  /zindent exch def
  /xindent exch def
  cvlit /to exch def
  cvlit /from exch def
  /toarrowlength exch def
  /fromarrowlength exch def

  from (CTR) ldiagdolabel 0 dg from (CIRCUM) ldiagdolabel ldiagpadd
  0 0 fromarrowlength 0 dg ldiagatangle ldiagpadd /FROM ldiagpointdef
  0 dg /FROM@ANGLE ldiagangledef
  to (CTR) ldiagdolabel 0 dg to (CIRCUM) ldiagdolabel ldiagpadd
  0 0 toarrowlength 0 dg ldiagatangle ldiagpadd /TO ldiagpointdef
  180 dg /TO@ANGLE ldiagangledef
  /XRIGHT [ FROM pop TO pop ldiagmax bias add ] cvx def
  /XP1 [ XRIGHT FROM exch pop ] cvx def
  /XP2 [ XRIGHT TO exch pop ] cvx def
  /VERT [ XP1 XP2 ldiagangleto ] cvx def
  XP1 0.5 ldiagpmul XP2 0.5 ldiagpmul ldiagpadd /LMID ldiagpointdef
  VERT /LMID@ANGLE ldiagangledef
  /XINDENT [ xindent FROM XP1 ldiagdistance ldiagmin ] cvx def
  /ZINDENT [ zindent XP2 TO ldiagdistance ldiagmin ] cvx def
  FROM XINDENT 0 ldiagpadd /LFROM ldiagpointdef
  0 dg /LFROM@ANGLE ldiagangledef
  TO ZINDENT 0 ldiagpadd /LTO ldiagpointdef
  180 dg /LTO@ANGLE ldiagangledef
  /RADIUS [ radius XP1 XP2 ldiagdistance 0.5 mul ldiagmin ] cvx def
  /XP1PRE [ XP1 0 0 RADIUS 180 dg ldiagatangle ldiagpadd ] cvx def
  /XP1POST [ XP1 0 0 RADIUS VERT ldiagatangle ldiagpadd ] cvx def
  /XP1CTR [ XP1PRE 0 0 RADIUS VERT ldiagatangle ldiagpadd ] cvx def
  XP1CTR 0 0 RADIUS XP1CTR XP1 ldiagangleto ldiagatangle ldiagpadd
  /P1 ldiagpointdef
  XP1PRE XP1POST ldiagangleto /P1@ANGLE ldiagangledef
  /XP2PRE [ 0 0 RADIUS VERT ldiagatangle XP2 ldiagpsub ] cvx def
  /XP2POST [ XP2 0 0 RADIUS 180 dg ldiagatangle ldiagpadd ] cvx def
  /XP2CTR [ XP2PRE 0 0 RADIUS 180 dg ldiagatangle ldiagpadd ] cvx def
  XP2CTR 0 0 RADIUS XP2CTR XP2 ldiagangleto ldiagatangle ldiagpadd
  /P2 ldiagpointdef
  XP2PRE XP2POST ldiagangleto /P2@ANGLE ldiagangledef
  FROM LFROM XP1PRE
  {} {[XP1CTR clockwise] P1 [XP1CTR clockwise]} {} {[XP1CTR] P1 [XP1CTR]}
  {} {} {} {} VERT round ldiagquadcase
  XP1POST LMID XP2PRE
  {} {[XP2CTR clockwise] P2 [XP2CTR clockwise]} {} {[XP2CTR] P2 [XP2CTR]}
  {} {} {} {} VERT round ldiagquadcase
  XP2POST LTO TO

  % (leaving ldiagrvlcurvepath) 0 ldiagdebugprint
  % count (  stack size is) 1 ldiagdebugprint pop
} def

% farr tarr { from } { to } xindent zindent bias ldiagdhulinepath -
/ldiagdhulinepath
{
  % (entering ldiagdhulinepath) 0 ldiagdebugprint
  % count (  stack size is) 1 ldiagdebugprint pop
  /bias exch def
  /zindent exch def
  /xindent exch def
  cvlit /to exch def
  cvlit /from exch def
  /toarrowlength exch def
  /fromarrowlength exch def

  from (CTR) ldiagdolabel 270 dg from (CIRCUM) ldiagdolabel ldiagpadd
  0 0 fromarrowlength 270 dg ldiagatangle ldiagpadd /FROM ldiagpointdef
  270 dg /FROM@ANGLE ldiagangledef

  to (CTR) ldiagdolabel 270 dg to (CIRCUM) ldiagdolabel ldiagpadd
  0 0 toarrowlength 270 dg ldiagatangle ldiagpadd /TO ldiagpointdef
  90 dg /TO@ANGLE ldiagangledef

  /XDOWN [ FROM exch pop TO exch pop ldiagmin bias sub ] cvx def
  FROM pop XDOWN /P1 ldiagpointdef
  TO pop XDOWN /P2 ldiagpointdef
  /HORIZ [ P1 P2 ldiagangleto ] cvx def
  P1 P1 0 0 1 ft 270 dg ldiagatangle ldiagpadd 0 0 1 ft HORIZ ldiagatangle
  ldiagpadd ldiagangleto /P1@ANGLE ldiagangledef
  P2 P2 0 0 1 ft 90 dg ldiagatangle ldiagpadd 0 0 1 ft HORIZ ldiagatangle
  ldiagpadd ldiagangleto /P2@ANGLE ldiagangledef

  P1 0.5 ldiagpmul P2 0.5 ldiagpmul ldiagpadd /LMID ldiagpointdef
  HORIZ /LMID@ANGLE ldiagangledef

  /XINDENT [ xindent FROM P1 ldiagdistance ldiagmin ] cvx def
  /ZINDENT [ zindent P2 TO ldiagdistance ldiagmin ] cvx def
  0 XINDENT FROM ldiagpsub /LFROM ldiagpointdef
  270 dg /LFROM@ANGLE ldiagangledef
  0 ZINDENT TO ldiagpsub /LTO ldiagpointdef
  90 dg /LTO@ANGLE ldiagangledef

  FROM LFROM P1 LMID P2 LTO TO

  % (leaving ldiagdhulinepath) 0 ldiagdebugprint
  % count (  stack size is) 1 ldiagdebugprint pop
} def

% farr tarr { from } { to } xindent zindent bias radius ldiagdhucurvepath -
/ldiagdhucurvepath
{
  % (entering ldiagdhucurvepath) 0 ldiagdebugprint
  % count (  stack size is) 1 ldiagdebugprint pop
  /radius exch def
  /bias exch def
  /zindent exch def
  /xindent exch def
  cvlit /to exch def
  cvlit /from exch def
  /toarrowlength exch def
  /fromarrowlength exch def

  from (CTR) ldiagdolabel 270 dg from (CIRCUM) ldiagdolabel ldiagpadd 0 0
  fromarrowlength 270 dg ldiagatangle ldiagpadd /FROM ldiagpointdef
  270 dg /FROM@ANGLE ldiagangledef
  to (CTR) ldiagdolabel 270 dg to (CIRCUM) ldiagdolabel ldiagpadd 0 0
  toarrowlength 270 dg ldiagatangle ldiagpadd /TO ldiagpointdef
  90 dg /TO@ANGLE ldiagangledef
  /XDOWN [ FROM exch pop TO exch pop ldiagmin bias sub ] cvx def
  /XP1 [ FROM pop XDOWN ] cvx def
  /XP2 [ TO pop XDOWN ] cvx def
  /HORIZ [ XP1 XP2 ldiagangleto ] cvx def
  XP1 0.5 ldiagpmul XP2 0.5 ldiagpmul ldiagpadd /LMID ldiagpointdef
  HORIZ /LMID@ANGLE ldiagangledef
  /XINDENT [ xindent FROM XP1 ldiagdistance ldiagmin ] cvx def
  /ZINDENT [ zindent XP2 TO ldiagdistance ldiagmin ] cvx def
  0 XINDENT FROM ldiagpsub /LFROM ldiagpointdef
  270 dg /LFROM@ANGLE ldiagangledef
  0 ZINDENT TO ldiagpsub /LTO ldiagpointdef
  90 dg /LTO@ANGLE ldiagangledef
  /RADIUS [ radius XP1 XP2 ldiagdistance 2 div ldiagmin ] cvx def
  /XP1PRE [ XP1 0 0 RADIUS 90 dg ldiagatangle ldiagpadd ] cvx def
  /XP1POST [ XP1 0 0 RADIUS HORIZ ldiagatangle ldiagpadd ] cvx def
  /XP1CTR [ XP1PRE 0 0 RADIUS HORIZ ldiagatangle ldiagpadd ] cvx def
  XP1CTR 0 0 RADIUS XP1CTR XP1 ldiagangleto ldiagatangle ldiagpadd
  /P1 ldiagpointdef
  XP1PRE XP1POST ldiagangleto /P1@ANGLE ldiagangledef
  /XP2PRE [ 0 0 RADIUS HORIZ ldiagatangle XP2 ldiagpsub ] cvx def
  /XP2POST [ XP2 0 0 RADIUS 90 dg ldiagatangle ldiagpadd ] cvx def
  /XP2CTR [ XP2PRE 0 0 RADIUS 90 dg ldiagatangle ldiagpadd ] cvx def
  XP2CTR 0 0 RADIUS XP2CTR XP2 ldiagangleto ldiagatangle ldiagpadd
  /P2 ldiagpointdef
  XP2PRE XP2POST ldiagangleto /P2@ANGLE ldiagangledef
  FROM LFROM XP1PRE
  {} {} { [XP1CTR clockwise] P1 [XP1CTR clockwise] } {} { [XP1CTR] P1 [XP1CTR] }
  {} {} {} HORIZ round ldiagquadcase
  XP1POST LMID XP2PRE
  {} {} { [XP2CTR clockwise ] P2 [XP2CTR clockwise ] } {} { [XP2CTR] P2 [XP2CTR] }
  {} {} {} HORIZ round ldiagquadcase
  XP2POST LTO TO

  % (leaving ldiagdhucurvepath) 0 ldiagdebugprint
  % count (  stack size is) 1 ldiagdebugprint pop
} def

% farr tarr { from } { to } xindent zindent bias ldiaguhdlinepath -
/ldiaguhdlinepath
{
  % (entering ldiaguhdlinepath) 0 ldiagdebugprint
  % count (  stack size is) 1 ldiagdebugprint pop
  /bias exch def
  /zindent exch def
  /xindent exch def
  cvlit /to exch def
  cvlit /from exch def
  /toarrowlength exch def
  /fromarrowlength exch def

  from (CTR) ldiagdolabel 90 dg from (CIRCUM) ldiagdolabel ldiagpadd
  0 0 fromarrowlength 90 dg ldiagatangle ldiagpadd /FROM ldiagpointdef
  90 dg /FROM@ANGLE ldiagangledef
  to (CTR) ldiagdolabel 90 dg to (CIRCUM) ldiagdolabel ldiagpadd
  0 0 toarrowlength 90 dg ldiagatangle ldiagpadd /TO ldiagpointdef
  270 dg /TO@ANGLE ldiagangledef
  /XUP [ FROM exch pop TO exch pop ldiagmax bias add ] cvx def
  FROM pop XUP /P1 ldiagpointdef
  TO pop XUP /P2 ldiagpointdef
  /HORIZ [ P1 P2 ldiagangleto ] cvx def
  P1 P1 0 0 1 ft 90 dg ldiagatangle ldiagpadd 0 0 1 ft HORIZ ldiagatangle
  ldiagpadd ldiagangleto /P1@ANGLE ldiagangledef
  P2 P2 0 0 1 ft 270 dg ldiagatangle ldiagpadd 0 0 1 ft HORIZ ldiagatangle
  ldiagpadd ldiagangleto /P2@ANGLE ldiagangledef
  P1 0.5 ldiagpmul P2 0.5 ldiagpmul ldiagpadd /LMID ldiagpointdef
  HORIZ /LMID@ANGLE ldiagangledef
  /XINDENT [ xindent FROM P1 ldiagdistance ldiagmin ] cvx def
  /ZINDENT [ zindent P2 TO ldiagdistance ldiagmin ] cvx def
  FROM 0 XINDENT ldiagpadd /LFROM ldiagpointdef
  90 dg /LFROM@ANGLE ldiagangledef
  TO 0 ZINDENT ldiagpadd /LTO ldiagpointdef
  270 dg /LTO@ANGLE ldiagangledef
  FROM LFROM P1 LMID P2 LTO TO

  % (leaving ldiaguhdlinepath) 0 ldiagdebugprint
  % count (  stack size is) 1 ldiagdebugprint pop
} def


% farr tarr { from } { to } xindent zindent bias radius ldiaguhdcurvepath -
/ldiaguhdcurvepath
{
  % (entering ldiaguhdcurvepath) 0 ldiagdebugprint
  % count (  stack size is) 1 ldiagdebugprint pop
  /radius exch def
  /bias exch def
  /zindent exch def
  /xindent exch def
  cvlit /to exch def
  cvlit /from exch def
  /toarrowlength exch def
  /fromarrowlength exch def

  from (CTR) ldiagdolabel 90 dg from (CIRCUM) ldiagdolabel ldiagpadd
  0 0 fromarrowlength 90 dg ldiagatangle ldiagpadd /FROM ldiagpointdef
  90 dg /FROM@ANGLE ldiagangledef
  to (CTR) ldiagdolabel 90 dg to (CIRCUM) ldiagdolabel ldiagpadd
  0 0 toarrowlength 90 dg ldiagatangle ldiagpadd /TO ldiagpointdef
  270 dg /TO@ANGLE ldiagangledef
  /XUP [ FROM exch pop TO exch pop ldiagmax bias add ] cvx def
  /XP1 [ FROM pop XUP ] cvx def
  /XP2 [ TO pop XUP ] cvx def
  /HORIZ [ XP1 XP2 ldiagangleto ] cvx def
  XP1 0.5 ldiagpmul XP2 0.5 ldiagpmul ldiagpadd /LMID ldiagpointdef
  HORIZ /LMID@ANGLE ldiagangledef
  /XINDENT [ xindent FROM XP1 ldiagdistance ldiagmin ] cvx def
  /ZINDENT [ zindent XP2 TO ldiagdistance ldiagmin ] cvx def
  FROM 0 XINDENT ldiagpadd /LFROM ldiagpointdef
  90 dg /LFROM@ANGLE ldiagangledef
  TO 0 ZINDENT ldiagpadd /LTO ldiagpointdef
  270 dg /LTO@ANGLE ldiagangledef
  /RADIUS [ radius XP1 XP2 ldiagdistance 0.5 mul ldiagmin ] cvx def
  /XP1PRE [ XP1 0 0 RADIUS 270 dg ldiagatangle ldiagpadd ] cvx def
  /XP1POST [ XP1 0 0 RADIUS HORIZ ldiagatangle ldiagpadd ] cvx def
  /XP1CTR [ XP1PRE 0 0 RADIUS HORIZ ldiagatangle ldiagpadd ] cvx def
  XP1CTR 0 0 RADIUS XP1CTR XP1 ldiagangleto ldiagatangle ldiagpadd
  /P1 ldiagpointdef
  XP1PRE XP1POST ldiagangleto /P1@ANGLE ldiagangledef
  /XP2PRE [ 0 0 RADIUS HORIZ ldiagatangle XP2 ldiagpsub ] cvx def
  /XP2POST [ XP2 0 0 RADIUS 270 dg ldiagatangle ldiagpadd ] cvx def
  /XP2CTR [ XP2PRE 0 0 RADIUS 270 dg ldiagatangle ldiagpadd ] cvx def
  XP2CTR 0 0 RADIUS XP2CTR XP2 ldiagangleto ldiagatangle ldiagpadd
  /P2 ldiagpointdef
  XP2PRE XP2POST ldiagangleto /P2@ANGLE ldiagangledef
  FROM LFROM XP1PRE
  {} {} {[XP1CTR] P1 [XP1CTR]} {} {[XP1CTR clockwise] P1 [XP1CTR clockwise]}
  {} {} {} HORIZ round ldiagquadcase
  XP1POST LMID XP2PRE
  {} {} {[XP2CTR] P2 [XP2CTR]} {} {[XP2CTR clockwise] P2 [XP2CTR clockwise]}
  {} {} {} HORIZ round ldiagquadcase
  XP2POST LTO TO

  % (leaving ldiaguhdcurvepath) 0 ldiagdebugprint
  % count (  stack size is) 1 ldiagdebugprint pop
} def

% farr tarr { from } { to } xindent zindent hfrac hbias ldiaghvhlinepath -
/ldiaghvhlinepath % still to do
{
  % (entering ldiaghvhlinepath) 0 ldiagdebugprint
  % count (  stack size is) 1 ldiagdebugprint pop
  /hbias exch def
  /hfrac exch def
  /zindent exch def
  /xindent exch def
  cvlit /to exch def
  cvlit /from exch def
  /toarrowlength exch def
  /fromarrowlength exch def

  /FRDIRN [ { 0 dg } { 180 dg } { 180 dg } { 0 dg }
  { 0 dg } { 0 dg } { 180 dg } { 180 dg }
  from (CTR) ldiagdolabel to (CTR) ldiagdolabel
  ldiagangleto ldiagquadcase ] cvx def
  /TODIRN [ FRDIRN 180 dg add ] cvx def
  from (CTR) ldiagdolabel FRDIRN from (CIRCUM) ldiagdolabel ldiagpadd
  0 0 fromarrowlength FRDIRN ldiagatangle ldiagpadd /FROM ldiagpointdef
  FRDIRN /FROM@ANGLE ldiagangledef
  to (CTR) ldiagdolabel TODIRN to (CIRCUM) ldiagdolabel ldiagpadd
  0 0 toarrowlength TODIRN ldiagatangle ldiagpadd /TO ldiagpointdef
  FRDIRN /TO@ANGLE ldiagangledef
  /BIAS [ FROM pop TO pop sub abs hfrac mul hbias add ] cvx def
  FROM 0 0 BIAS FRDIRN ldiagatangle ldiagpadd /P1 ldiagpointdef
  P1 pop TO exch pop /P2 ldiagpointdef
  P1 0.5 ldiagpmul P2 0.5 ldiagpmul ldiagpadd /LMID ldiagpointdef
  P1 P2 ldiagangleto /LMID@ANGLE ldiagangledef
  /XINDENT [ xindent FROM P1 ldiagdistance ldiagmin ] cvx def
  /ZINDENT [ zindent P2 TO ldiagdistance ldiagmin ] cvx def
  FROM 0 0 XINDENT FRDIRN ldiagatangle ldiagpadd /LFROM ldiagpointdef
  FRDIRN /LFROM@ANGLE ldiagangledef
  TO 0 0 ZINDENT TODIRN ldiagatangle ldiagpadd /LTO ldiagpointdef
  FRDIRN /LTO@ANGLE ldiagangledef
  FROM LFROM P1 LMID P2 LTO TO

  % (leaving ldiaghvhlinepath) 0 ldiagdebugprint
  % count (  stack size is) 1 ldiagdebugprint pop
} def


% farr tarr { from } { to } xindent zindent hfrac hbias radius ldiaghvhcurvepath -
/ldiaghvhcurvepath % still to do
{
  % (entering ldiaghvhcurvepath) 0 ldiagdebugprint
  % count (  stack size is) 1 ldiagdebugprint pop
  /radius exch def
  /hbias exch def
  /hfrac exch def
  /zindent exch def
  /xindent exch def
  cvlit /to exch def
  cvlit /from exch def
  /toarrowlength exch def
  /fromarrowlength exch def

  /FRDIRN [ { 0 dg } { 180 dg } { 180 dg } { 0 dg }
  { 0 dg } { 0 dg } { 180 dg } { 180 dg }
  from (CTR) ldiagdolabel to (CTR) ldiagdolabel
  ldiagangleto ldiagquadcase ] cvx def
  /TODIRN [ FRDIRN 180 dg add ] cvx def

  from (CTR) ldiagdolabel FRDIRN from (CIRCUM) ldiagdolabel ldiagpadd
  0 0 fromarrowlength FRDIRN ldiagatangle ldiagpadd /FROM ldiagpointdef
  FRDIRN /FROM@ANGLE ldiagangledef
  to (CTR) ldiagdolabel TODIRN to (CIRCUM) ldiagdolabel ldiagpadd
  0 0 toarrowlength TODIRN ldiagatangle ldiagpadd /TO ldiagpointdef

  FRDIRN /TO@ANGLE ldiagangledef
  /BIAS [ FROM pop TO pop sub abs hfrac mul hbias add ] cvx def
  /XP1 [ FROM 0 0 BIAS FRDIRN ldiagatangle ldiagpadd ] cvx def
  /XP2 [ XP1 pop TO exch pop ] cvx def
  XP1 0.5 ldiagpmul XP2 0.5 ldiagpmul ldiagpadd /LMID ldiagpointdef
  /VERT [ XP1 XP2 ldiagangleto round ] cvx def
  VERT /LMID@ANGLE ldiagangledef
  /XINDENT [ xindent FROM XP1 ldiagdistance ldiagmin ] cvx def
  /ZINDENT [ zindent XP2 TO ldiagdistance ldiagmin ] cvx def
  FROM 0 0 XINDENT FRDIRN ldiagatangle ldiagpadd /LFROM ldiagpointdef
  FRDIRN /LFROM@ANGLE ldiagangledef
  TO 0 0 ZINDENT TODIRN ldiagatangle ldiagpadd /LTO ldiagpointdef
  FRDIRN /LTO@ANGLE ldiagangledef
  /RADIUS [ radius XP1 XP2 ldiagdistance 2 div ldiagmin ] cvx def
  /XP1PRE [ XP1 0 0 RADIUS TODIRN ldiagatangle ldiagpadd ] cvx def
  /XP1POST [ XP1 0 0 RADIUS VERT ldiagatangle ldiagpadd ] cvx def
  /XP1CTR [ XP1PRE 0 0 RADIUS VERT ldiagatangle ldiagpadd ] cvx def
  XP1CTR 0 0 RADIUS XP1CTR XP1 ldiagangleto ldiagatangle ldiagpadd /P1 ldiagpointdef
  XP1PRE XP1POST ldiagangleto /P1@ANGLE ldiagangledef
  /XP2PRE [ 0 0 RADIUS VERT ldiagatangle XP2 ldiagpsub ] cvx def
  /XP2POST [ XP2 0 0 RADIUS FRDIRN ldiagatangle ldiagpadd ] cvx def
  /XP2CTR [ 0 0 RADIUS VERT ldiagatangle XP2POST ldiagpsub ] cvx def
  XP2CTR 0 0 RADIUS XP2CTR XP2 ldiagangleto ldiagatangle ldiagpadd /P2 ldiagpointdef
  XP2PRE XP2POST ldiagangleto /P2@ANGLE ldiagangledef
  VERT FRDIRN sub 90 eq
  { /P1GO [ anticlockwise ] cvx def /P2GO [ clockwise ] cvx def }
  { /P1GO [ clockwise ] cvx def /P2GO [ anticlockwise ] cvx def }
  ifelse
  FROM LFROM
  XP1PRE [XP1CTR P1GO] P1 [XP1CTR P1GO] XP1POST
  LMID
  XP2PRE [XP2CTR P2GO] P2 [XP2CTR P2GO] XP2POST
  LTO TO

  % (leaving ldiaghvhcurvepath) 0 ldiagdebugprint
  % count (  stack size is) 1 ldiagdebugprint pop
} def

% farr tarr { from } { to } xindent zindent hfrac hbias ldiagvhvlinepath -
/ldiagvhvlinepath % still to do
{
  % (entering ldiagvhvlinepath) 0 ldiagdebugprint
  % count (  stack size is) 1 ldiagdebugprint pop
  /hbias exch def
  /hfrac exch def
  /zindent exch def
  /xindent exch def
  cvlit /to exch def
  cvlit /from exch def
  /toarrowlength exch def
  /fromarrowlength exch def

  /FRDIRN [ { 90 dg } { 270 dg } { 270 dg } { 0 dg }
  { 90 dg } { 270 dg } { 270 dg } { 90 dg }
  from (CTR) ldiagdolabel to (CTR) ldiagdolabel
  ldiagangleto ldiagquadcase ] cvx def
  /TODIRN [ FRDIRN 180 dg sub ] cvx def
  from (CTR) ldiagdolabel FRDIRN from (CIRCUM) ldiagdolabel ldiagpadd
  0 0 fromarrowlength FRDIRN ldiagatangle ldiagpadd /FROM ldiagpointdef
  FRDIRN /FROM@ANGLE ldiagangledef
  to (CTR) ldiagdolabel TODIRN to (CIRCUM) ldiagdolabel ldiagpadd
  0 0 toarrowlength TODIRN ldiagatangle ldiagpadd /TO ldiagpointdef
  FRDIRN /TO@ANGLE ldiagangledef
  /BIAS [ FROM exch pop TO exch pop sub abs hfrac mul hbias ft add ] cvx def
  FROM 0 0 BIAS FRDIRN ldiagatangle ldiagpadd /P1 ldiagpointdef
  TO pop P1 exch pop /P2 ldiagpointdef
  P1 0.5 ldiagpmul P2 0.5 ldiagpmul ldiagpadd /LMID ldiagpointdef
  P1 P2 ldiagangleto /LMID@ANGLE ldiagangledef
  /XINDENT [ xindent FROM P1 ldiagdistance ldiagmin ] cvx def
  /ZINDENT [ zindent P2 TO ldiagdistance ldiagmin ] cvx def
  FROM 0 0 XINDENT FRDIRN ldiagatangle ldiagpadd /LFROM ldiagpointdef
  FRDIRN /LFROM@ANGLE ldiagangledef
  TO 0 0 ZINDENT TODIRN ldiagatangle ldiagpadd /LTO ldiagpointdef
  FRDIRN /LTO@ANGLE ldiagangledef
  FROM LFROM P1 LMID P2 LTO TO

  % (leaving ldiagvhvlinepath) 0 ldiagdebugprint
  % count (  stack size is) 1 ldiagdebugprint pop
} def


% farr tarr { from } { to } xindent zindent hfrac hbias radius ldiagvhvcurvepath -
/ldiagvhvcurvepath % still to do
{
  % (entering ldiagvhvcurvepath) 0 ldiagdebugprint
  % count (  stack size is) 1 ldiagdebugprint pop
  /radius exch def
  /hbias exch def
  /hfrac exch def
  /zindent exch def
  /xindent exch def
  cvlit /to exch def
  cvlit /from exch def
  /toarrowlength exch def
  /fromarrowlength exch def

  /FRDIRN [ { 90 dg } { 270 dg } { 270 dg } { 0 dg }
  { 90 dg } { 270 dg } { 270 dg } { 90 dg }
  from (CTR) ldiagdolabel to (CTR) ldiagdolabel
  ldiagangleto ldiagquadcase ] cvx def
  /TODIRN [ FRDIRN 180 dg sub ] cvx def
  from (CTR) ldiagdolabel FRDIRN from (CIRCUM) ldiagdolabel ldiagpadd
  0 0 fromarrowlength FRDIRN ldiagatangle ldiagpadd /FROM ldiagpointdef
  FRDIRN /FROM@ANGLE ldiagangledef
  to (CTR) ldiagdolabel TODIRN to (CIRCUM) ldiagdolabel ldiagpadd
  0 0 toarrowlength TODIRN ldiagatangle ldiagpadd /TO ldiagpointdef
  FRDIRN /TO@ANGLE ldiagangledef
  /BIAS [ FROM exch pop TO exch pop sub abs hfrac mul hbias add ] cvx def
  /XP1 [ FROM 0 0 BIAS FRDIRN ldiagatangle ldiagpadd ] cvx def
  /XP2 [ TO pop XP1 exch pop ] cvx def
  XP1 0.5 ldiagpmul XP2 0.5 ldiagpmul ldiagpadd /LMID ldiagpointdef
  /VERT [ XP1 XP2 ldiagangleto round ] cvx def
  VERT /LMID@ANGLE ldiagangledef
  /XINDENT [ xindent FROM XP1 ldiagdistance ldiagmin ] cvx def
  /ZINDENT [ zindent XP2 TO ldiagdistance ldiagmin ] cvx def
  FROM 0 0 XINDENT FRDIRN ldiagatangle ldiagpadd /LFROM ldiagpointdef
  FRDIRN /LFROM@ANGLE ldiagangledef
  TO 0 0 ZINDENT TODIRN ldiagatangle ldiagpadd /LTO ldiagpointdef
  FRDIRN /LTO@ANGLE ldiagangledef
  /RADIUS [ radius XP1 XP2 ldiagdistance 2 div ldiagmin ] cvx def
  /XP1PRE [ XP1 0 0 RADIUS TODIRN ldiagatangle ldiagpadd ] cvx def
  /XP1POST [ XP1 0 0 RADIUS VERT ldiagatangle ldiagpadd ] cvx def
  /XP1CTR [ XP1PRE 0 0 RADIUS VERT ldiagatangle ldiagpadd ] cvx def
  XP1CTR 0 0 RADIUS XP1CTR XP1 ldiagangleto ldiagatangle ldiagpadd /P1 ldiagpointdef
  XP1PRE XP1POST ldiagangleto /P1@ANGLE ldiagangledef
  /XP2PRE [ 0 0 RADIUS VERT ldiagatangle XP2 ldiagpsub ] cvx def
  /XP2POST [ XP2 0 0 RADIUS FRDIRN ldiagatangle ldiagpadd ] cvx def
  /XP2CTR [ 0 0 RADIUS VERT ldiagatangle XP2POST ldiagpsub ] cvx def
  XP2CTR 0 0 RADIUS XP2CTR XP2 ldiagangleto ldiagatangle ldiagpadd /P2 ldiagpointdef
  XP2PRE XP2POST ldiagangleto /P2@ANGLE ldiagangledef
  FRDIRN VERT sub 90 eq
  { /P1GO [ clockwise ] cvx def /P2GO [ anticlockwise ] cvx def }
  { /P1GO [ anticlockwise ] cvx def /P2GO [ clockwise ] cvx def }
  ifelse
  FROM LFROM
  XP1PRE [XP1CTR P1GO] P1 [XP1CTR P1GO] XP1POST
  LMID
  XP2PRE [XP2CTR P2GO] P2 [XP2CTR P2GO] XP2POST
  LTO TO


  % (leaving ldiagvhvcurvepath) 0 ldiagdebugprint
  % count (  stack size is) 1 ldiagdebugprint pop
} def

% farr tarr { from } { to } xindent zindent bias fbias tbias ldiagdwraplinepath -
/ldiagdwraplinepath
{
  % (entering ldiagdwraplinepath) 0 ldiagdebugprint
  % count (  stack size is) 1 ldiagdebugprint pop
  /tbias exch def
  /fbias exch def
  /bias exch def
  /zindent exch def
  /xindent exch def
  cvlit /to exch def
  cvlit /from exch def
  /toarrowlength exch def
  /fromarrowlength exch def

  /DIRN [ from (CTR) ldiagdolabel pop to (CTR) ldiagdolabel pop
  lt { 180 dg } { 0 dg } ifelse ] cvx def
  from (CTR) ldiagdolabel DIRN from (CIRCUM) ldiagdolabel ldiagpadd 0 0
  fromarrowlength DIRN ldiagatangle ldiagpadd /FROM ldiagpointdef
  DIRN /FROM@ANGLE ldiagangledef
  to (CTR) ldiagdolabel DIRN 180 dg add to (CIRCUM) ldiagdolabel ldiagpadd
  0 0 toarrowlength DIRN 180 dg add ldiagatangle ldiagpadd /TO ldiagpointdef
  DIRN /TO@ANGLE ldiagangledef
  FROM 0 0 fbias 0 ldiagmax DIRN ldiagatangle ldiagpadd /P1 ldiagpointdef
  DIRN 180 dg eq { 225 dg } { -45 dg } ifelse /P1@ANGLE ldiagangledef
  TO 0 0 tbias 0 ldiagmax DIRN 180 dg add ldiagatangle ldiagpadd
  /P4 ldiagpointdef
  DIRN 180 dg eq { 135 dg } { 45 dg } ifelse /P4@ANGLE ldiagangledef
  /YC [ from (CTR) ldiagdolabel 270 dg from (CIRCUM) ldiagdolabel ldiagpadd
  exch pop to (CTR) ldiagdolabel 270 dg to (CIRCUM) ldiagdolabel ldiagpadd
  exch pop ldiagmin bias 0 ldiagmax sub ] cvx def
  P1 pop YC /P2 ldiagpointdef
  P4@ANGLE 180 dg sub /P2@ANGLE ldiagangledef
  P4 pop YC /P3 ldiagpointdef
  P1@ANGLE 180 dg sub /P3@ANGLE ldiagangledef
  /XINDENT [ xindent FROM P1 ldiagdistance ldiagmin ] cvx def
  FROM 0 0 XINDENT DIRN ldiagatangle ldiagpadd /LFROM ldiagpointdef
  FROM@ANGLE /LFROM@ANGLE ldiagangledef
  /ZINDENT [ zindent TO P4 ldiagdistance ldiagmin ] cvx def
  TO 0 0 ZINDENT DIRN 180 dg add ldiagatangle ldiagpadd /LTO ldiagpointdef
  TO@ANGLE /LTO@ANGLE ldiagangledef
  P2 0.5 ldiagpmul P3 0.5 ldiagpmul ldiagpadd /LMID ldiagpointdef
  DIRN 180 dg sub /LMID@ANGLE ldiagangledef
  FROM P1 P2 P3 P4 TO

  % (leaving ldiagdwraplinepath) 0 ldiagdebugprint
  % count (  stack size is) 1 ldiagdebugprint pop
} def

% farr tarr { from } { to } xindent zindent bias fbias tbias radius
% ldiagdwrapcurvepath -
/ldiagdwrapcurvepath
{
  % (entering ldiagdwrapcurvepath) 0 ldiagdebugprint
  % count (  stack size is) 1 ldiagdebugprint pop
  /radius exch def
  /tbias exch def
  /fbias exch def
  /bias exch def
  /zindent exch def
  /xindent exch def
  cvlit /to exch def
  cvlit /from exch def
  /toarrowlength exch def
  /fromarrowlength exch def

  /DIRN [ from (CTR) ldiagdolabel pop to (CTR) ldiagdolabel pop lt
  { 180 dg } { 0 dg } ifelse ] cvx def
  /CLOCK [ from (CTR) ldiagdolabel pop to (CTR) ldiagdolabel pop lt
  { anticlockwise } { clockwise } ifelse ] cvx def
  from (CTR) ldiagdolabel DIRN from (CIRCUM) ldiagdolabel ldiagpadd
  0 0 fromarrowlength DIRN ldiagatangle ldiagpadd /FROM ldiagpointdef
  DIRN /FROM@ANGLE ldiagangledef
  to (CTR) ldiagdolabel DIRN 180 dg add to (CIRCUM) ldiagdolabel ldiagpadd
  0 0 toarrowlength DIRN 180 dg add ldiagatangle ldiagpadd /TO ldiagpointdef
  DIRN /TO@ANGLE ldiagangledef
  /XP1 [ FROM 0 0 fbias 0 ldiagmax DIRN ldiagatangle ldiagpadd ] cvx def
  /XP4 [ TO 0 0 tbias 0 ldiagmax DIRN 180 dg add ldiagatangle ldiagpadd ] cvx def
  /YC [ from (CTR) ldiagdolabel 270 dg from (CIRCUM) ldiagdolabel ldiagpadd
  exch pop to (CTR) ldiagdolabel 270 dg to (CIRCUM) ldiagdolabel ldiagpadd
  exch pop ldiagmin bias 0 ldiagmax sub ] cvx def
  /XP2 [ XP1 pop YC ] cvx def
  /XP3 [ XP4 pop YC ] cvx def
  /RP1 [ radius XP1 FROM ldiagdistance XP1 XP2 ldiagdistance 2 div
  ldiagmin ldiagmin ] cvx def
  /XP1PRE [ XP1 0 0 RP1 XP1 FROM ldiagangleto ldiagatangle ldiagpadd ] cvx def
  /XP1POST [ XP1 0 0 RP1 XP1 XP2 ldiagangleto ldiagatangle ldiagpadd ] cvx def
  /XP1CTR [ XP1PRE 0 0 RP1 XP1 XP2 ldiagangleto ldiagatangle ldiagpadd ] cvx def
  XP1CTR 0 0 RP1 XP1CTR XP1 ldiagangleto ldiagatangle ldiagpadd /P1 ldiagpointdef
  XP1CTR P1 ldiagangleto DIRN add 90 dg sub /P1@ANGLE ldiagangledef
  /RP2 [ radius XP1 XP2 ldiagdistance 2 div XP2 XP3 ldiagdistance 2 div
  ldiagmin ldiagmin ] cvx def
  /XP2PRE [ XP2 0 0 RP2 XP2 XP1 ldiagangleto ldiagatangle ldiagpadd ] cvx def
  /XP2POST [ XP2 0 0 RP2 XP2 XP3 ldiagangleto ldiagatangle ldiagpadd ] cvx def
  /XP2CTR [ XP2PRE 0 0 RP2 XP2 XP3 ldiagangleto ldiagatangle ldiagpadd ] cvx def
  XP2CTR 0 0 RP2 XP2CTR XP2 ldiagangleto ldiagatangle ldiagpadd /P2 ldiagpointdef
  XP2CTR P2 ldiagangleto DIRN add 90 dg sub /P2@ANGLE ldiagangledef
  /RP3 [ radius XP2 XP3 ldiagdistance 2 div XP3 XP4 ldiagdistance 2 div
  ldiagmin ldiagmin ] cvx def
  /XP3PRE [ XP3 0 0 RP3 XP3 XP2 ldiagangleto ldiagatangle ldiagpadd ] cvx def
  /XP3POST [ XP3 0 0 RP3 XP3 XP4 ldiagangleto ldiagatangle ldiagpadd ] cvx def
  /XP3CTR [ XP3PRE 0 0 RP3 XP3 XP4 ldiagangleto ldiagatangle ldiagpadd ] cvx def
  XP3CTR 0 0 RP3 XP3CTR XP3 ldiagangleto ldiagatangle ldiagpadd /P3 ldiagpointdef
  XP3CTR P3 ldiagangleto DIRN add 90 dg sub /P3@ANGLE ldiagangledef
  /RP4 [ radius XP4 XP3 ldiagdistance 2 div XP4 TO ldiagdistance
  ldiagmin ldiagmin ] cvx def
  /XP4PRE [ XP4 0 0 RP4 XP4 XP3 ldiagangleto ldiagatangle ldiagpadd ] cvx def
  /XP4POST [ XP4 0 0 RP4 XP4 TO ldiagangleto ldiagatangle ldiagpadd ] cvx def
  /XP4CTR [ XP4PRE 0 0 RP4 XP4 TO ldiagangleto ldiagatangle ldiagpadd ] cvx def
  XP4CTR 0 0 RP4 XP4CTR XP4 ldiagangleto ldiagatangle ldiagpadd /P4 ldiagpointdef
  XP4CTR P4 ldiagangleto DIRN add 90 dg sub /P4@ANGLE ldiagangledef
  /XINDENT [ xindent FROM XP1PRE ldiagdistance ldiagmin ] cvx def
  FROM 0 0 XINDENT DIRN ldiagatangle ldiagpadd /LFROM ldiagpointdef
  FROM@ANGLE /LFROM@ANGLE ldiagangledef
  XP2 0.5 ldiagpmul XP3 0.5 ldiagpmul ldiagpadd /LMID ldiagpointdef
  DIRN 180 dg sub /LMID@ANGLE ldiagangledef
  /ZINDENT [ zindent TO XP4POST ldiagdistance ldiagmin ] cvx def
  TO 0 0 ZINDENT DIRN 180 dg add ldiagatangle ldiagpadd /LTO ldiagpointdef
  TO@ANGLE /LTO@ANGLE ldiagangledef
  FROM LFROM
  XP1PRE [XP1CTR CLOCK] XP1POST
  XP2PRE [XP2CTR CLOCK] XP2POST
  LMID
  XP3PRE [XP3CTR CLOCK] XP3POST
  XP4PRE [XP4CTR CLOCK] XP4POST
  LTO TO

  % (leaving ldiagdwrapcurvepath) 0 ldiagdebugprint
  % count (  stack size is) 1 ldiagdebugprint pop
} def

% farr tarr { from } { to } xindent zindent bias fbias tbias ldiaguwraplinepath -
/ldiaguwraplinepath
{
  % (entering ldiaguwraplinepath) 0 ldiagdebugprint
  % count (  stack size is) 1 ldiagdebugprint pop
  /tbias exch def
  /fbias exch def
  /bias exch def
  /zindent exch def
  /xindent exch def
  cvlit /to exch def
  cvlit /from exch def
  /toarrowlength exch def
  /fromarrowlength exch def

  /DIRN [ from (CTR) ldiagdolabel pop to (CTR) ldiagdolabel pop lt
  { 180 dg } { 0 dg } ifelse ] cvx def
  from (CTR) ldiagdolabel DIRN from (CIRCUM) ldiagdolabel ldiagpadd
  0 0 fromarrowlength DIRN ldiagatangle ldiagpadd /FROM ldiagpointdef
  DIRN /FROM@ANGLE ldiagangledef
  to (CTR) ldiagdolabel DIRN 180 dg add to (CIRCUM) ldiagdolabel ldiagpadd
  0 0 toarrowlength DIRN 180 dg add ldiagatangle ldiagpadd /TO ldiagpointdef
  DIRN /TO@ANGLE ldiagangledef
  FROM 0 0 fbias 0 ldiagmax DIRN ldiagatangle ldiagpadd /P1 ldiagpointdef
  DIRN 180 dg eq { 135 dg } { 45 dg } ifelse /P1@ANGLE ldiagangledef
  TO 0 0 tbias 0 ldiagmax DIRN 180 dg add ldiagatangle ldiagpadd
  /P4 ldiagpointdef
  DIRN 180 dg eq { 225 dg } { -45 dg } ifelse /P4@ANGLE ldiagangledef
  /YC [ from (CTR) ldiagdolabel 90 dg from (CIRCUM) ldiagdolabel ldiagpadd
  exch pop to (CTR) ldiagdolabel 90 dg to (CIRCUM) ldiagdolabel ldiagpadd
  exch pop ldiagmax bias 0 ldiagmax add ] cvx def
  P1 pop YC /P2 ldiagpointdef
  P4@ANGLE 180 dg sub /P2@ANGLE ldiagangledef
  P4 pop YC /P3 ldiagpointdef
  P1@ANGLE 180 dg sub /P3@ANGLE ldiagangledef
  /XINDENT [ xindent FROM P1 ldiagdistance ldiagmin ] cvx def
  FROM 0 0 XINDENT DIRN ldiagatangle ldiagpadd /LFROM ldiagpointdef
  FROM@ANGLE /LFROM@ANGLE ldiagangledef
  /ZINDENT [ zindent TO P4 ldiagdistance ldiagmin ] cvx def
  TO 0 0 ZINDENT DIRN 180 dg add ldiagatangle ldiagpadd /LTO ldiagpointdef
  TO@ANGLE /LTO@ANGLE ldiagangledef
  P2 0.5 ldiagpmul P3 0.5 ldiagpmul ldiagpadd /LMID ldiagpointdef
  DIRN 180 dg sub /LMID@ANGLE ldiagangledef
  FROM P1 P2 P3 P4 TO

  % (leaving ldiaguwraplinepath) 0 ldiagdebugprint
  % count (  stack size is) 1 ldiagdebugprint pop
} def

% farr tarr { from } { to } xindent zindent bias fbias tbias radius
% ldiaguwrapcurvepath -
/ldiaguwrapcurvepath
{
  % (entering ldiaguwrapcurvepath) 0 ldiagdebugprint
  % count (  stack size is) 1 ldiagdebugprint pop
  /radius exch def
  /tbias exch def
  /fbias exch def
  /bias exch def
  /zindent exch def
  /xindent exch def
  cvlit /to exch def
  cvlit /from exch def
  /toarrowlength exch def
  /fromarrowlength exch def

  /DIRN [ from (CTR) ldiagdolabel pop to (CTR) ldiagdolabel pop lt
  { 180 dg } { 0 dg } ifelse ] cvx def
  /CLOCK [ from (CTR) ldiagdolabel pop to (CTR) ldiagdolabel pop lt
  { clockwise } { anticlockwise } ifelse ] cvx def
  from (CTR) ldiagdolabel DIRN from (CIRCUM) ldiagdolabel ldiagpadd
  0 0 fromarrowlength DIRN ldiagatangle ldiagpadd /FROM ldiagpointdef
  DIRN /FROM@ANGLE ldiagangledef
  to (CTR) ldiagdolabel DIRN 180 dg add to (CIRCUM) ldiagdolabel ldiagpadd
  0 0 toarrowlength DIRN 180 dg add ldiagatangle ldiagpadd /TO ldiagpointdef
  DIRN /TO@ANGLE ldiagangledef
  /XP1 [ FROM 0 0 fbias 0 ldiagmax DIRN ldiagatangle ldiagpadd ] cvx def
  /XP4 [ TO 0 0 tbias 0 ldiagmax DIRN 180 dg add ldiagatangle ldiagpadd ] cvx def
  /YC [ from (CTR) ldiagdolabel 90 dg from (CIRCUM) ldiagdolabel ldiagpadd
  exch pop to (CTR) ldiagdolabel 90 dg to (CIRCUM) ldiagdolabel ldiagpadd
  exch pop ldiagmax bias 0 ldiagmax add ] cvx def
  /XP2 [ XP1 pop YC ] cvx def
  /XP3 [ XP4 pop YC ] cvx def
  /RP1 [ radius XP1 FROM ldiagdistance XP1 XP2 ldiagdistance 2 div
  ldiagmin ldiagmin ] cvx def
  /XP1PRE [ XP1 0 0 RP1 XP1 FROM ldiagangleto ldiagatangle ldiagpadd ] cvx def
  /XP1POST [ XP1 0 0 RP1 XP1 XP2 ldiagangleto ldiagatangle ldiagpadd ] cvx def
  /XP1CTR [ XP1PRE 0 0 RP1 XP1 XP2 ldiagangleto ldiagatangle ldiagpadd ] cvx def
  XP1CTR 0 0 RP1 XP1CTR XP1 ldiagangleto ldiagatangle ldiagpadd /P1 ldiagpointdef
  XP1CTR P1 ldiagangleto DIRN add 90 dg add /P1@ANGLE ldiagangledef
  /RP2 [ radius XP1 XP2 ldiagdistance 2 div XP2 XP3 ldiagdistance 2 div
  ldiagmin ldiagmin ] cvx def
  /XP2PRE [ XP2 0 0 RP2 XP2 XP1 ldiagangleto ldiagatangle ldiagpadd ] cvx def
  /XP2POST [ XP2 0 0 RP2 XP2 XP3 ldiagangleto ldiagatangle ldiagpadd ] cvx def
  /XP2CTR [ XP2PRE 0 0 RP2 XP2 XP3 ldiagangleto ldiagatangle ldiagpadd ] cvx def
  XP2CTR 0 0 RP2 XP2CTR XP2 ldiagangleto ldiagatangle ldiagpadd /P2 ldiagpointdef
  XP2CTR P2 ldiagangleto DIRN add 90 dg add /P2@ANGLE ldiagangledef
  /RP3 [ radius XP2 XP3 ldiagdistance 2 div XP3 XP4 ldiagdistance 2 div
  ldiagmin ldiagmin ] cvx def
  /XP3PRE [ XP3 0 0 RP3 XP3 XP2 ldiagangleto ldiagatangle ldiagpadd ] cvx def
  /XP3POST [ XP3 0 0 RP3 XP3 XP4 ldiagangleto ldiagatangle ldiagpadd ] cvx def
  /XP3CTR [ XP3PRE 0 0 RP3 XP3 XP4 ldiagangleto ldiagatangle ldiagpadd ] cvx def
  XP3CTR 0 0 RP3 XP3CTR XP3 ldiagangleto ldiagatangle ldiagpadd /P3 ldiagpointdef
  XP3CTR P3 ldiagangleto DIRN add 90 dg add /P3@ANGLE ldiagangledef
  /RP4 [ radius XP4 XP3 ldiagdistance 2 div XP4 TO ldiagdistance
  ldiagmin ldiagmin ] cvx def
  /XP4PRE [ XP4 0 0 RP4 XP4 XP3 ldiagangleto ldiagatangle ldiagpadd ] cvx def
  /XP4POST [ XP4 0 0 RP4 XP4 TO ldiagangleto ldiagatangle ldiagpadd ] cvx def
  /XP4CTR [ XP4PRE 0 0 RP4 XP4 TO ldiagangleto ldiagatangle ldiagpadd ] cvx def
  XP4CTR 0 0 RP4 XP4CTR XP4 ldiagangleto ldiagatangle ldiagpadd /P4 ldiagpointdef
  XP4CTR P4 ldiagangleto DIRN add 90 dg add /P4@ANGLE ldiagangledef
  /XINDENT [ xindent FROM XP1PRE ldiagdistance ldiagmin ] cvx def
  FROM 0 0 XINDENT DIRN ldiagatangle ldiagpadd /LFROM ldiagpointdef
  FROM@ANGLE /LFROM@ANGLE ldiagangledef
  XP2 0.5 ldiagpmul XP3 0.5 ldiagpmul ldiagpadd /LMID ldiagpointdef
  DIRN 180 dg sub /LMID@ANGLE ldiagangledef
  /ZINDENT [ zindent TO XP4POST ldiagdistance ldiagmin ] cvx def
  TO 0 0 ZINDENT DIRN 180 dg add ldiagatangle ldiagpadd /LTO ldiagpointdef
  TO@ANGLE /LTO@ANGLE ldiagangledef
  FROM LFROM
  XP1PRE [XP1CTR CLOCK] XP1POST
  XP2PRE [XP2CTR CLOCK] XP2POST
  LMID
  XP3PRE [XP3CTR CLOCK] XP3POST
  XP4PRE [XP4CTR CLOCK] XP4POST
  LTO TO

  % (leaving ldiaguwrapcurvepath) 0 ldiagdebugprint
  % count (  stack size is) 1 ldiagdebugprint pop
} def

% shape and labels of the @SolidArrowHead symbol
% - ldiagsolidarrowhead -
/ldiagsolidarrowhead
{
  0 0 xsize ysize 0.5 mul 0 ysize
} def

% shape and labels of the @SolidWithBarArrowHead symbol
% <pathwidth> ldiagsolidwithbararrowhead -
/ldiagsolidwithbararrowhead
{
  /pathwidth exch def
  /XBK [ xsize pathwidth 0.5 mul sub ] cvx def
  /XFW [ xsize pathwidth 0.5 mul add ] cvx def
  0 0 XBK ysize 0.5 mul XBK 0 XFW 0 XFW ysize
  XBK ysize XBK ysize 0.5 mul 0 ysize 0 0
} def

% shape and labels of the @OpenArrowHead symbol
% <pathwidth> <pathgap> ldiagopenarrowhead -
/ldiagopenarrowhead
{
  /pathgap exch def
  /pathwidth exch def
  /PSW [ 0 0 ] cvx def
  /PNW [ 0 ysize ] cvx def
  /PE  [ xsize ysize 0.5 mul ] cvx def
  /REL [ 0 0 pathwidth PE PNW ldiagangleto 90 add ldiagatangle ] cvx def
  pathgap 0 eq
  {
    /PNA [ 0 ysize 0.5 mul pathwidth 0.5 mul add ] cvx def
    /PSA [ 0 ysize 0.5 mul pathwidth 0.5 mul sub ] cvx def
    /PNI [ PNA PNA xsize 0 ldiagpadd PNW REL ldiagpadd
	   PE REL ldiagpadd ldiaglineintersect ] cvx def
    /PSI [ 0 pathwidth PNI ldiagpsub ] cvx def

    PSW PE PNW PNI PNA PSA PSI PSW
  }
  {
    /PNA [ 0 ysize 0.5 mul pathgap 0.5 mul add pathwidth 0.5 mul add ] cvx def
    /PSA [ 0 ysize 0.5 mul pathgap 0.5 mul sub pathwidth 0.5 mul sub ] cvx def
    /PNI [ PNA PNA xsize 0 ldiagpadd PNW REL ldiagpadd
	   PE REL ldiagpadd ldiaglineintersect ] cvx def
    /PSI [ 0 pathwidth pathgap add PNI ldiagpsub ] cvx def
    /PXA [ 0 pathwidth PNA ldiagpsub ] cvx def
    /PXI [ 0 pathwidth PNI ldiagpsub ] cvx def
    /PYA [ 0 pathwidth PSA ldiagpadd ] cvx def
    /PYI [ 0 pathwidth PSI ldiagpadd ] cvx def

    PSW PE PNW PNI PNA PXA PXI PYI PYA PSA PSI PSW
  } ifelse
} def

% shape and labels of the @HalfOpenArrowHead symbol
% <pathwidth> <pathgap> ldiaghalfopenarrowhead -
/ldiaghalfopenarrowhead
{
  /pathgap exch def
  /pathwidth exch def
  0 0
  xsize ysize 0.5 mul
  0 ysize
  pathgap 0 eq
  {
    xsize 0.3 mul ysize 0.5 mul pathwidth 0.5 mul add
    0             ysize 0.5 mul pathwidth 0.5 mul add
    0             ysize 0.5 mul pathwidth 0.5 mul sub
    xsize 0.3 mul ysize 0.5 mul pathwidth 0.5 mul sub
  }
  {
    xsize 0.3 mul ysize 0.5 mul pathgap 0.5 mul add pathwidth 0.5 mul add
    0             ysize 0.5 mul pathgap 0.5 mul add pathwidth 0.5 mul add
    0             ysize 0.5 mul pathgap 0.5 mul add pathwidth 0.5 mul sub
    xsize 0.3 mul ysize 0.5 mul pathgap 0.5 mul add pathwidth 0.5 mul sub
    xsize 0.3 mul ysize 0.5 mul pathgap 0.5 mul sub pathwidth 0.5 mul add
    0             ysize 0.5 mul pathgap 0.5 mul sub pathwidth 0.5 mul add
    0             ysize 0.5 mul pathgap 0.5 mul sub pathwidth 0.5 mul sub
    xsize 0.3 mul ysize 0.5 mul pathgap 0.5 mul sub pathwidth 0.5 mul sub
  } ifelse
  0 0
} def

% shape and labels of the @SolidCurvedArrowHead symbol
% - ldiagsolidcurvedarrowhead -
/ldiagsolidcurvedarrowhead
{
  0 0
  [0 0 xsize ysize 0.5 mul ldiaglinebetween
   xsize 0 xsize ysize ldiaglineintersect clockwise]
  xsize ysize 0.5 mul
  [xsize ysize 0.5 mul 0 ysize ldiaglinebetween
   xsize 0 xsize ysize ldiaglineintersect clockwise]
  0 ysize
} def

% shape and labels of the @OpenCurvedArrowHead symbol
% <pathwidth> <pathgap> ldiagopencurvedarrowhead -
/ldiagopencurvedarrowhead
{
  /pathgap exch def
  /pathwidth exch def
  /LR [ 0 0 xsize ysize 0.5 mul ldiaglinebetween
	xsize 0 xsize ysize ldiaglineintersect
      ] cvx def
  /UR [ xsize ysize 0.5 mul 0 ysize ldiaglinebetween
	xsize 0 xsize ysize ldiaglineintersect
      ] cvx def
  /PW2 [ pathwidth 0.5 mul ] cvx def
  0 0
  [LR clockwise]
  xsize ysize 0.5 mul
  [UR clockwise]
  0 ysize
  pathgap 0 eq
  {
    /UMID [
	0 ysize 0.5 mul PW2 add
	xsize ysize 0.5 mul PW2 add
	0 ysize 0 0 1 ft UR 0 ysize ldiagangleto 90 add ldiagatangle
	ldiagpadd 0 ysize ldiaglineintersect
    ] cvx def
    /LMID [ 0 pathwidth UMID ldiagpsub ] cvx def
    UMID
    0 ysize 0.5 mul PW2 add
    0 ysize 0.5 mul PW2 sub
    LMID
  }
  {
    /UMIDU [
	0 ysize 0.5 mul PW2 add pathgap 0.5 mul add
	xsize ysize 0.5 mul PW2 add pathgap 0.5 mul add
	0 ysize 0 0 1 ft UR 0 ysize ldiagangleto 90 add ldiagatangle
	ldiagpadd 0 ysize ldiaglineintersect
    ] cvx def
    /UMIDL [ 0 pathwidth UMIDU ldiagpsub ] cvx def
    /LMIDL [ 0 pathgap 0 pathwidth UMIDU ldiagpsub ldiagpsub ] cvx def
    /LMIDU [ 0 pathwidth LMIDL ldiagpadd ] cvx def
    UMIDU
    0 UMIDU exch pop
    0 UMIDL exch pop
    UMIDL
    LMIDU
    0 LMIDU exch pop
    0 LMIDL exch pop
    LMIDL
  } ifelse
  0 0
} def

% shape and labels of the @HalfOpenCurvedArrowHead symbol
% <pathwidth> <pathgap> ldiaghalfopencurvedarrowhead -
/ldiaghalfopencurvedarrowhead
{
  /pathgap exch def
  /pathwidth exch def
  /LR [ 0 0 xsize ysize 0.5 mul ldiaglinebetween
	xsize 0 xsize ysize ldiaglineintersect
      ] cvx def
  /UR [ xsize ysize 0.5 mul 0 ysize ldiaglinebetween
	xsize 0 xsize ysize ldiaglineintersect
      ] cvx def
  /BR [ 0 0 LR 0 ysize UR ldiaglineintersect ] cvx def
  /BRAD [ 0 0 BR ldiagdistance ] cvx def
  /PW2 [ pathwidth 0.5 mul ] cvx def
  0 0
  [LR clockwise]
  xsize ysize 0.5 mul
  [UR clockwise]
  0 ysize
  [BR clockwise]
  pathgap 0 eq
  {
    /XDIST [ BRAD dup mul PW2 dup mul sub sqrt ] cvx def
    /UMID [ BR XDIST PW2 ldiagpadd ] cvx def
    /LMID [ BR XDIST 0 PW2 sub ldiagpadd ] cvx def
    UMID
    0 ysize 0.5 mul PW2 add
    0 ysize 0.5 mul PW2 sub
    LMID
  }
  {
    /XDIST [ BRAD dup mul PW2 dup mul sub sqrt ] cvx def
    /UMIDU [ BR XDIST PW2 pathgap 0.5 mul add ldiagpadd ] cvx def
    /UMIDL [ 0 pathwidth UMIDU ldiagpsub ] cvx def
    /LMIDL [ BR XDIST 0 PW2 sub pathgap 0.5 mul sub ldiagpadd ] cvx def
    /LMIDU [ 0 pathwidth LMIDL ldiagpadd ] cvx def
    UMIDU
    0 UMIDU exch pop
    0 UMIDL exch pop
    UMIDL
    LMIDU
    0 LMIDU exch pop
    0 LMIDL exch pop
    LMIDL
  } ifelse
  [BR clockwise]
  0 0
} def

% shape and labels of the @ManyArrowHead symbol
% <pathwidth> ldiagmanyarrowhead -
/ldiagmanyarrowhead
{
  /pathwidth exch def
  /LL [ 0 ysize 2 div pathwidth 2 div sub ] cvx def
  /LU [ 0 ysize 2 div pathwidth 2 div add ] cvx def
  LL
  xsize 0
  xsize pathwidth
  LU
  LL
  []
  LL
  xsize LL exch pop
  xsize LU exch pop
  LU
  LL
  []
  LL
  xsize ysize pathwidth sub
  xsize ysize
  LU
  LL
} def

end
%%EndResource

%%BeginResource: procset LoutGraphPrependGraphic
% @PrependGraphic file /home/arnau/lout.lib/include/graphf.lpg
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                                                    %
%  PostScript @SysPrependGraphic file for @Graph (Version 1.0)       %
%                                                                    %
%  Version 1.0 by Jeffrey H. Kingston, December 1993.                %
%  swapxandy added September 2001 by JHK.                            %
%                                                                    %
%  This file has been placed in the public domain by its author,     %
%  Jeffrey H. Kingston                                               %
%                                                                    %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

errordict begin
   /handleerror
   {
      {  /Times-Roman findfont 8 pt scalefont setfont
	 0 setgray 4 pt 4 pt moveto
	 $error /errorname get
	 dup lgraphdict exch known
	 { lgraphdict exch get }
	 { 30 string cvs } ifelse
	 show
	 (  Command: ) show
	 $error /command get 30 string cvs show
      } stopped {} if
      showpage stop
   } def
end

/lgraphdebugposy 432 def
/lgraphdebugposx 72 def

% - lgraphdebugnextline -
/lgraphdebugnextline
{
  lgraphdebugposy 72 lt
  { /lgraphdebugposx lgraphdebugposx 144 add store
    /lgraphdebugposy 432 store
  }
  {
    /lgraphdebugposy lgraphdebugposy 12 sub store
  } ifelse
  lgraphdebugposx lgraphdebugposy moveto
} def

% - lgraphdebugbeginindent -
/lgraphdebugbeginindent
{
  /lgraphdebugposx lgraphdebugposx 12 add store
} def

% - lgraphdebugendindent -
/lgraphdebugendindent
{
  /lgraphdebugposx lgraphdebugposx 12 sub store
} def

% <string> <int> lgraphdebugprint -
% must be defined outside lgraphdict since used in arbitrary places
% print <string> plus count or <int> stack entries, whichever is the smaller
/lgraphdebugprint
{
  exch
  gsave
  initgraphics
  lgraphdebugnextline
  /Times-Roman findfont 10 scalefont setfont
  0 setgray show
  lgraphdebugbeginindent
  count 1 sub 2 copy lt { pop } { exch pop } ifelse 1 sub
  0 exch 1 exch
  {
    lgraphdebugnextline
    index
    dup type (dicttype) eq
    {
      (begin dict) show
      lgraphdebugbeginindent
      {
	lgraphdebugnextline
	pop 100 string cvs show
      } forall
      lgraphdebugendindent
      lgraphdebugnextline
      (end dict) show
    }
    {
      dup type (arraytype) eq
      {
        (begin array) show
        lgraphdebugbeginindent
	{
	  lgraphdebugnextline
	  100 string cvs show
	} forall
	lgraphdebugendindent
	lgraphdebugnextline
        (end array) show
      }
      {
        100 string cvs show
      } ifelse
    } ifelse
  } for
  lgraphdebugendindent
  grestore
} def


/lgraphdict 200 dict def
lgraphdict begin

% error messages
/dictfull (dictfull error) def
/dictstackoverflow (dictstackoverflow error) def
/execstackoverflow (execstackoverflow error:  expression too complex?) def
/limitcheck (limitcheck error:  graph too complex or too large?) def
/syntaxerror (syntaxerror error:  syntax error in text of graph?) def
/typecheck (typecheck error:  syntax error in text of graph?) def
/undefined (undefined error:  unknown or misspelt symbol?) def
/rangecheck (rangecheck error:  undefined expression (e.g. divide by zero)?) def
/VMError (VMError error:  run out of memory?) def

% random number between x and y inclusive: x y dorand num
/dorand { 1 index sub 1 add rand exch mod add } def

% log to given base: base num dolog num
/dolog { ln exch ln div } def

% maximum of two numbers:  <num> <num> max <num>
/max { 2 copy gt { pop } { exch pop } ifelse } def

% add two points:  <point> <point> padd <point>
/padd { exch 3 1 roll add 3 1 roll add exch } def

% subtract first point from second:  <point> <point> psub <point>
/psub { 3 2 roll sub 3 1 roll exch sub exch } def

% distance between two points:  <point> <point> distance <length>
/distance { psub dup mul exch dup mul add sqrt } def

% point at angle and distance:  <point> <length> <angle> atangle <point>
/atangle { 2 copy cos mul 3 1 roll sin mul padd } def

% angle from one point to another:  <point> <point> angle <angle>
/angle { psub 2 copy 0 eq exch 0 eq and {pop} {exch atan} ifelse } def


% set up for line
% - linesetup <length> <dashlength>
/linesetup
{ newpath
  xcurr ycurr trpoint xprev yprev trpoint
  4 copy moveto lineto distance dashlength
} def

% set up for icon-avoiding line
% - ilinesetup <length> <dashlength>
/ilinesetup
{ newpath
  xprev yprev trpoint xcurr ycurr trpoint 4 copy
  4 copy angle symbolsize 1.5 mul exch 4 2 roll pop pop atangle
  6 2 roll 4 2 roll
  4 copy angle symbolsize 1.5 mul exch 4 2 roll pop pop atangle 
  4 copy moveto lineto distance dashlength
} def


% stroke a solid line:  <length> <dashlength> solid -
/solid
{ pop pop [] 0 setdash linewidth setlinewidth stroke
} def
  
% stroke a dashed line:   <length> <dashlength> dashed -
/dashed
{  2 copy 2 mul le 1 index 0 le or
   {  exch pop 1 pt max [ exch dup ] 0 setdash }
   {  dup [ exch 4 2 roll 2 copy div
      1 sub 2 div ceiling dup 4 1 roll
      1 add mul sub exch div ] 0 setdash
   } ifelse linewidth setlinewidth stroke
} def

% stroke a cdashed line:  <length> <dashlength> cdashed -
/cdashed
{  2 copy le 1 index 0 le or
   { exch pop 1 pt max [ exch dup ] dup 0 get 2 div setdash }
   { dup [ 4 2 roll exch 2 copy exch div
     2 div ceiling div 1 index sub
     ] exch 2 div setdash
   } ifelse linewidth setlinewidth stroke
} def

% stroke a dotted line:  <length> <dashlength> dotted -
/dotted
{  2 copy le 1 index 0 le or
   { exch pop 1 pt max [ exch 0 exch ] 0 setdash }
   { 1 index exch div ceiling div 0.99999 mul
     [ 0 3 2 roll ] 0 setdash
   } ifelse gsave 1 setlinecap linewidth setlinewidth stroke grestore newpath
} def

% stroke a noline line:  <length> <dashlength> noline -
/noline
{ pop pop
} def

% scale array elements by factor:  <array> <factor> scalearray <array>
/scalearray
{
  [ exch 3 2 roll
  { exch dup 3 1 roll mul exch } forall
  pop ]
} def

% sum array elements:  <array> sumarray <number>
/sumarray
{
  0 exch { add } forall
} def

% begin a more complex line: <length> <dashlength> linebegin -
/linebegin
{
  % (Entering linebegin) 2 debugprint
  20 dict begin
  /dashlen exch 1 pt max def
  /len exch def
  /gap dashlen def
  /halfgap dashlen 2 div def
  /dash dashlen def
  /halfdash dashlen 2 div def
  /dot 0 def
  % (Leaving linebegin) 0 debugprint
} def
% end a more complex line: <linecap> <cycle> <startpos> <stoppos> lineend -
/lineend
{
  % (Entering lineend) 3 debugprint
  /stoppos exch def
  /startpos exch def
  /cycle exch def
  /linecap exch def
  /stopposlen stoppos sumarray def
  /startposlen startpos sumarray def
  /cyclelen cycle sumarray def
  /effectivelen len startposlen add stopposlen sub def
  effectivelen 0 gt cyclelen 0 gt and
  {
    /repeats effectivelen cyclelen div ceiling def
    /factor len repeats cyclelen mul startposlen sub stopposlen add div def
    cycle factor scalearray startposlen factor mul setdash
    linecap setlinecap stroke
  } if
  end
  % (Leaving lineend) 0 debugprint
} def

% stroke a dotdashed line: <length> <dashlength> dotdashed -
/dotdashed
{
  linebegin
  1 [dash gap dot gap] [] [dash]
  lineend
} def

% stroke a dotcdashed line: <length> <dashlength> dotcdashed -
/dotcdashed
{
  linebegin
  1 [dash gap dot gap] [halfdash] [halfdash]
  lineend
} def

% stroke a dotdotdashed line: <length> <dashlength> dotdotdashed -
/dotdotdashed
{
  linebegin
  1 [dash gap dot gap dot gap] [] [dash]
  lineend
} def

% stroke a dotdotcdashed line: <length> <dashlength> dotdotcdashed -
/dotdotcdashed
{
  linebegin
  1 [dash gap dot gap dot gap] [halfdash] [halfdash]
  lineend
} def

% stroke a dotdotdotdashed line: <length> <dashlength> dotdotdotdashed -
/dotdotdotdashed
{
  linebegin
  1 [dash gap dot gap dot gap dot gap] [] [dash]
  lineend
} def

% stroke a dotdotdotcdashed line: <length> <dashlength> dotdotdotcdashed -
/dotdotdotcdashed
{
  linebegin
  1 [dash gap dot gap dot gap dot gap] [halfdash] [halfdash]
  lineend
} def


% stroke a y histogram: - yhisto -
/yhisto
{ xprev yleft trpoint yextra sub moveto
  xprev yprev trpoint lineto
  xcurr yprev trpoint lineto
  xcurr yleft trpoint yextra sub lineto 
  linewidth setlinewidth stroke
} def

% stroke an x histogram: - xhisto -
/xhisto
{ xleft yprev trpoint exch xextra sub exch moveto
  xcurr yprev trpoint lineto
  xcurr ycurr trpoint lineto
  xleft ycurr trpoint exch xextra sub exch lineto 
  linewidth setlinewidth stroke
} def

% stroke a surface y histogram: - surfaceyhisto -
/surfaceyhisto
{ firstpair
  { xprev yleft trpoint yextra sub moveto
    xprev yprev trpoint lineto
  }
  { xprev yprev trpoint moveto
  } ifelse
  xcurr yprev trpoint lineto
  lastpair
  { xcurr yleft trpoint yextra sub lineto 
  }
  { xcurr ycurr trpoint lineto
  } ifelse
  linewidth setlinewidth stroke
} def

% stroke a surface x histogram: - surfacexhisto -
/surfacexhisto
{ firstpair
  { xleft yprev trpoint exch xextra sub exch moveto
  }
  { xprev yprev trpoint moveto
  } ifelse
  xcurr yprev trpoint lineto
  xcurr ycurr trpoint lineto
  lastpair
  { xleft ycurr trpoint exch xextra sub exch lineto 
  } if
  linewidth setlinewidth stroke
} def

% % pre-texture versions
% % stroke a filled y histogram: - filledyhisto -
% /filledyhisto
% {
%   linewidth setlinewidth
%   xprev yleft trpoint exch currentlinewidth 2 div add exch yextra sub moveto
%   xprev yprev trpoint exch currentlinewidth 2 div add exch lineto
%   xcurr yprev trpoint exch currentlinewidth 2 div sub exch lineto
%   xcurr yleft trpoint exch currentlinewidth 2 div sub exch yextra sub lineto 
%   closepath fill
% } def

% % stroke a filled x histogram: - filledxhisto -
% /filledxhisto
% {
%   linewidth setlinewidth
%   xleft yprev trpoint currentlinewidth 2 div add exch xextra sub exch moveto
%   xcurr yprev trpoint currentlinewidth 2 div add lineto
%   xcurr ycurr trpoint currentlinewidth 2 div sub lineto
%   xleft ycurr trpoint currentlinewidth 2 div sub exch xextra sub exch lineto 
%   closepath fill
% } def

% stroke a filled y histogram: - filledyhisto -
/filledyhisto
{
  linewidth setlinewidth
  xprev yleft trpoint exch currentlinewidth 1.3 mul add exch yextra sub moveto
  xprev yprev trpoint exch currentlinewidth 1.3 mul add exch lineto
  xcurr yprev trpoint exch currentlinewidth 1.3 mul sub exch lineto
  xcurr yleft trpoint exch currentlinewidth 1.3 mul sub exch yextra sub lineto 
  gsave texture fill grestore stroke
} def

% stroke a filled x histogram: - filledxhisto -
/filledxhisto
{
  linewidth setlinewidth
  xleft yprev trpoint currentlinewidth 1.3 mul add exch xextra sub exch moveto
  xcurr yprev trpoint currentlinewidth 1.3 mul add lineto
  xcurr ycurr trpoint currentlinewidth 1.3 mul sub lineto
  xleft ycurr trpoint currentlinewidth 1.3 mul sub exch xextra sub exch lineto 
  gsave texture fill grestore stroke
} def


% docross: show a cross with a given symbolsize and symbollinewidth
% <x> <y> <symbolsize> <symbollinewidth> docross -
/docross
{
  setlinewidth
  /ss exch def
  newpath
  moveto
  ss neg ss neg rmoveto
  ss 2 mul ss 2 mul rlineto
  0 ss -2 mul rmoveto
  ss -2 mul ss 2 mul rlineto
  [] 0 setdash 0 setlinecap stroke
} def

% cross: show a cross
% - cross -
/cross { xcurr ycurr trpoint symbolsize symbollinewidth docross } def

% doplus: show a plus with a given symbolsize and symbollinewidth
% <x> <y> <symbolsize> <symbollinewidth> doplus -
/doplus
{
  setlinewidth
  /ss exch def
  newpath
  moveto
  ss neg 0 rmoveto
  ss 2 mul 0 rlineto
  ss neg ss neg rmoveto
  0 ss 2 mul rlineto
  [] 0 setdash 0 setlinecap stroke
} def

% plus: show a plus
% - plus -
/plus { xcurr ycurr trpoint symbolsize symbollinewidth doplus } def

% dosquare: show an open square with a given symbolsize and symbollinewidth
% NB symbolsize is reduced by half the line width to get size exactly right
% <x> <y> <symbolsize> <symbollinewidth> dosquare -
/dosquare
{
  dup setlinewidth
  0.5 mul sub 0 max /ss exch def
  newpath
  moveto
  ss neg ss neg rmoveto
  ss 2 mul 0 rlineto
  0 ss 2 mul rlineto
  ss -2 mul 0 rlineto
  closepath [] 0 setdash stroke
} def

% square: show an open square
% - square -
/square { xcurr ycurr trpoint symbolsize symbollinewidth dosquare } def

% dofilledsquare: show filled square with given symbolsize and symbollinewidth
% NB symbollinewidth is not used
% <x> <y> <symbolsize> <symbollinewidth> dofilledsquare -
/dofilledsquare
{
  pop /ss exch def
  newpath
  moveto
  ss neg ss neg rmoveto
  ss 2 mul 0 rlineto
  0 ss 2 mul rlineto
  ss -2 mul 0 rlineto
  closepath fill
} def

% filledsquare: show a filled square
% - filledsquare -
/filledsquare { xcurr ycurr trpoint symbolsize symbollinewidth dofilledsquare } def

% dodiamond: show an open diamond with a given symbolsize and symbollinewidth
% NB symbolsize is reduced by half the line width to get size exactly right
% <x> <y> <symbolsize> <symbollinewidth> dodiamond -
/dodiamond
{
  dup setlinewidth
  0.5 mul sub 0 max /ss exch def
  newpath
  moveto
  ss neg 0 rmoveto
  ss ss neg rlineto
  ss ss rlineto
  ss neg ss rlineto
  closepath [] 0 setdash stroke
} def

% diamond: show an open diamond
% - diamond -
/diamond { xcurr ycurr trpoint symbolsize symbollinewidth dodiamond } def

% dofilleddiamond: show filled diamond with given symbolsize and symbollinewidth
% NB symbollinewidth is not used
% <x> <y> <symbolsize> <symbollinewidth> dofilleddiamond -
/dofilleddiamond
{
  pop /ss exch def
  newpath
  moveto
  ss neg 0 rmoveto
  ss ss neg rlineto
  ss ss rlineto
  ss neg ss rlineto
  closepath fill
} def

% filleddiamond: show a filled diamond
% - filleddiamond -
/filleddiamond { xcurr ycurr trpoint symbolsize symbollinewidth dofilleddiamond } def

% docircle: show an open circle with a given symbolsize and symbollinewidth
% NB symbolsize is reduced by half the line width to get size exactly right
% <x> <y> <symbolsize> <symbollinewidth> docircle -
/docircle
{
  dup setlinewidth
  0.5 mul sub 0 max /ss exch def
  newpath
  ss 0 360 arc [] 0 setdash stroke
} def

% circle: show an open circle
% - circle -
/circle { xcurr ycurr trpoint symbolsize symbollinewidth docircle } def

% dofilledcircle: show filled circle with given symbolsize and symbollinewidth
% NB symbollinewidth is not used
% <x> <y> <symbolsize> <symbollinewidth> dofilledcircle -
/dofilledcircle
{
  pop /ss exch def
  newpath
  ss 0 360 arc fill
} def

% filledcircle: show a filled circle
% - filledcircle -
/filledcircle { xcurr ycurr trpoint symbolsize symbollinewidth dofilledcircle } def

% dotriangle: show an open triangle with a given symbolsize and symbollinewidth
% NB symbolsize is reduced by half the line width to get size exactly right
% <x> <y> <symbolsize> <symbollinewidth> dotriangle -
/dotriangle
{
  dup setlinewidth
  0.5 mul sub 0 max /ss exch def
  newpath
  moveto
  0 ss 1.5 mul rmoveto
  ss neg ss -2.5 mul rlineto
  ss 2 mul 0 rlineto
  closepath [] 0 setdash stroke
} def

% triangle: show an open triangle
% - triangle -
/triangle { xcurr ycurr trpoint symbolsize symbollinewidth dotriangle } def

% dofilledtriangle: show filled triangle with symbolsize and symbollinewidth
% NB symbollinewidth is not used
% <x> <y> <symbolsize> <symbollinewidth> dofilledtriangle -
/dofilledtriangle
{
  pop /ss exch def
  newpath
  moveto
  0 ss 1.5 mul rmoveto
  ss neg ss -2.5 mul rlineto
  ss 2 mul 0 rlineto
  closepath fill
} def

% filledtriangle: show a filled triangle
% - filledtriangle -
/filledtriangle { symbolsize symbollinewidth dofilledtriangle } def


%plog: like log only with a base, and protected from failing if <= 0
% base x plog res
/plog { dup 0 le { pop pop 0 } { ln exch ln div } ifelse } def

% xtr: transform one x value logarithmically if xlog > 1
% <num> xtr <num>
/xtr
{ xlog 1 gt
  { xlog exch plog
  } if
} def

% ytr: transform one y value logarithmically if ylog > 1
% <num> ytr <num>
/ytr
{ ylog 1 gt
  { ylog exch plog
  } if
} def


% trpoint: transform (x, y) in graph space into (x', y') in print space
% x y trpoint x' y'
/trpoint
{ exch xtr xdecr { trxmax exch sub } { trxmin sub } ifelse
  trxmax trxmin sub div xwidth mul xextra add

  exch ytr ydecr { trymax exch sub } { trymin sub } ifelse
  trymax trymin sub div ywidth mul yextra add
} def


% yonly: interpolate x values 1, 2, ... into data
% [ data ] yonly [ newdata ]
/yonly
{ dup /tmp exch def
  length [ exch 1 exch 1 exch
  { dup tmp exch 1 sub get
  } for
  ]
} def

% xonly: interpolate y values 1, 2, ... into data
% [ data ] yonly [ newdata ]
/xonly
{ dup /tmp exch def
  length [ exch 1 exch 1 exch
  { dup tmp exch 1 sub get exch
  } for
  ]
} def

% xandy: no interpolation of x or y values
% [ data ] xandy [ data ]
/xandy {} def

% swapxandy: swap x and y values
% [ data ] swapxandy [ data ]
/swapxandy
{ dup /tmp exch def
  length [ exch 2 exch 2 exch
  { dup tmp exch 1 sub get exch 2 sub tmp exch get
  } for
  ]
} def


% expstringwidth: calculate width of string containing optional exponent
% <string> expstringwidth <width>
/expstringwidth
{ (^) search
  { exch pop stringwidth pop exch stringwidth pop 0.7 mul add }
  { stringwidth pop }
  ifelse
} def

% expstringshow: show string containing optional exponent
% <string> expstringshow -
/expstringshow
{ (^) search
  { exch pop show 0 0.5 ft rmoveto
    gsave currentfont 0.7 scalefont setfont show grestore
  }
  { show
  }
  ifelse
} def

% concatenate two strings: <string> <string> strconcat <string>
/strconcat
{ 2 copy length exch length add string
  dup 0 4 index putinterval
  dup 3 index length 3 index putinterval
  3 1 roll pop pop
} def

% lgen: generate one label automatically
% num lgen num string
/lgen { dup 20 string cvs } def

% loglgen: generate one logarithmic label (with exponent)
% <base> <exponent> loglgen <string>
/loglgen
{ 20 string cvs exch 20 string cvs
  (^) strconcat exch strconcat
} def


% printxtick: print one x tick
% xpos printxtick -
/printxtick
{ newpath
  yleft trpoint moveto 0 yextra neg rmoveto
  0 xticklength neg rlineto [] 0 setdash stroke
} def

% printxgrid: print one x grid line
% xpos printxgrid -
/printxgrid
{ dup newpath
  yleft trpoint moveto 0 yextra neg rmoveto
  yright trpoint lineto 0 yextra rlineto [] 0 setdash stroke
} def

% printxlabel: print one x label
% (xlabel) xpos printxlabel -
/printxlabel
{ yleft trpoint moveto 0 yextra neg rmoveto
  0 xticklength neg rmoveto 0 0.9 ft neg rmoveto
  xlog 1 gt { 0 0.3 ft neg rmoveto } if
  dup expstringwidth -2 div 0 rmoveto expstringshow
} def

% printytick: print one y tick
% ypos printytick -
/printytick
{ newpath
  xleft exch trpoint moveto xextra neg 0 rmoveto
  yticklength neg 0 rlineto [] 0 setdash stroke
} def

% printygrid: print one y grid line
% ypos printygrid -
/printygrid
{ dup newpath
  xleft exch trpoint moveto xextra neg 0 rmoveto
  xright exch trpoint lineto xextra 0 rlineto [] 0 setdash stroke
} def

% printylabel: print one y label
% (ylabel) ypos printylabel -
/printylabel
{ xleft exch trpoint moveto xextra neg 0 rmoveto
  yticklength neg 0 rmoveto -0.3 ft -0.3 ft rmoveto
  dup expstringwidth neg 0 rmoveto expstringshow
} def

% printrtick: print one r tick
% ypos printrtick -
/printrtick
{ newpath
  xright exch trpoint moveto xextra 0 rmoveto
  rticklength 0 rlineto [] 0 setdash stroke
} def

% printrlabel: print one r label
% (rlabel) ypos printrlabel -
/printrlabel
{ xright exch trpoint moveto xextra 0 rmoveto
  rticklength 0 rmoveto  0.3 ft -0.3 ft rmoveto
  expstringshow
} def

% printticks: print ticks and labels
% /tickproc /labelproc [ tickandlabeldata ] min printticks -
/printticks
{ /prev exch def
  { dup type dup dup /integertype eq exch /realtype eq or
    { pop dup /prev exch def 2 index cvx exec
    }
    { /stringtype eq
      { prev 2 index cvx exec
      }
      { pop
      } ifelse
    } ifelse
  } forall
  pop pop
} def


% printxaxistick: print one x axis tick
% xpos printxaxistick -
/printxaxistick
{ newpath
  yaxis trpoint moveto 0 xticklength -2 div rmoveto
  0 xticklength rlineto [] 0 setdash stroke
} def

% printxaxislabel: print one x axis label
% (xlabel) xpos printxaxislabel -
/printxaxislabel
{ yaxis trpoint moveto
  0 xticklength -2 div rmoveto 0 0.9 ft neg rmoveto
  xlog 1 gt { 0 0.3 ft neg rmoveto } if
  dup expstringwidth -2 div 0 rmoveto expstringshow
} def

% printyaxistick: print one y axis tick
% ypos printyaxistick -
/printyaxistick
{ newpath
  xaxis exch trpoint moveto
  yticklength -2 div 0 rmoveto
  yticklength 0 rlineto [] 0 setdash stroke
} def

% printyaxislabel: print one y axis label
% (ylabel) ypos printyaxislabel -
/printyaxislabel
{ xaxis exch trpoint moveto
  yticklength -2 div 0 rmoveto -0.3 ft -0.3 ft rmoveto
  dup expstringwidth neg 0 rmoveto expstringshow
} def


% <val> minmax -
% perform minv := min(minv, val); maxv := max(maxv, val)
% allowing for the possibility of minv, maxv, val being false (undefined)
/minmax
{ dup false eq
  { pop }
  { minv false eq
    { dup /minv exch def /maxv exch def }
    { dup minv lt
      { /minv exch def }
      { dup maxv gt
	{ /maxv exch def }
	{ pop }
	ifelse
      } ifelse
    } ifelse
  } ifelse
} def

% <ticks> ticksundef <ticks> <bool>
% returns true iff the ticks array is undefined (one false entry)
/ticksundef
{ dup length 1 eq
  { dup 0 get false eq
  }
  { false }
  ifelse
} def

% <number> integral <boolean>
% true if the number has an integral value
/integral { dup round eq } def

% ticksep ticks xory alldata minval maxval axis base ticksandlimits ticks min max base
% ticksandlimits: sort out value of x or y ticks and limits and log base
/ticksandlimits
{ /base exch def
  /minv false def
  /maxv false def

  % min and max of user-supplied minval, maxval, and axis
  minmax minmax minmax

  % min and max of data points
  { 0 get dup dup length 1 sub 3 index exch 2 exch
    { get minmax dup
    } for pop pop
  } forall
  pop dup

  % min and max of tick values
  { dup type /stringtype eq
    { pop } { minmax } ifelse
  } forall

  % fix minv and maxv if undefined (false) or equal
  minv false eq
  { /minv -1 def /maxv 1 def }
  { minv maxv eq
    { minv 0 lt
      { /minv 2 minv mul def /maxv 0 def
      }
      { minv 0 eq
	{ /minv -1 def /maxv 1 def
	}
	{ /minv 0 def /maxv 2 maxv mul def
	} ifelse
      } ifelse
    } if
  } ifelse

  % invent ticks if undefined
  ticksundef
  { pop /ticksep exch def

    % if base is reasonable and minv is positive, logarithmic ticks
    base 1 gt minv 0 gt and
    {
      % get integral log of minv and maxv
      /logminv base minv plog floor   cvi def
      /logmaxv base maxv plog ceiling cvi def

      % if minv close to base, make it 1; reset minv and maxv
      logminv 1 eq logmaxv 4 ge and { /logminv 0 def } if
      /minv base logminv exp def
      /maxv base logmaxv exp def

      % ticks := [ base**logminv, ... , base**logmaxv ]
      [ logminv 1 logmaxv
	{ dup base exch exp
	  exch base exch loglgen
	} for
      ]
    }
    { % non-logarithmic ticks
      {
        % fix tick separation if undefined (0) or too small
	/base 0 def
        /delta maxv minv sub def
        ticksep delta 30 div le
        { /ticksep 10 delta log 1 sub ceiling exp def
	  ticksep delta 2 div ge
	  { /ticksep ticksep 2 div def }
	  { ticksep delta 5 div lt
	    { /ticksep 2 ticksep mul def
	    } if
	  } ifelse
        } if

        % adjust minv and maxv to be multiples of ticksep
        /minv minv ticksep div floor   ticksep mul def
        /maxv maxv ticksep div ceiling ticksep mul def
        /delta maxv minv sub def

        % if minv or maxv near zero, move to zero and redo
        minv ticksep eq
        { /minv 0 def }
        { maxv ticksep neg eq { /maxv 0 def } { exit } ifelse
        } ifelse
      } loop

      % if minv, maxv, and ticksep are all integral, set "makeint" to true
      /makeint minv integral maxv integral ticksep integral and and def

      % ticks := [ minv, minv+ticksep, ... , maxv ]
      [ 0 1 delta ticksep div round
	{ ticksep mul minv add makeint { cvi } if lgen }
	for
      ]
    } ifelse
  }
  { exch pop
  } ifelse
  minv maxv base
} def

% xset: set up all data for x axis, including limits and ticks
% xticksep xticks 0 alldata xmin xmax xlog xextra xdecr xaxis xticklength xset -
/xset
{ /xticklength exch def
  /xaxis exch def
  /xdecr exch def
  /xextra exch def
  xaxis exch ticksandlimits
  /xlog exch def /xmax exch def /xmin exch def /xticks exch def
  /xleft xdecr { xmax } { xmin } ifelse def
  /xright xdecr { xmin } { xmax } ifelse def
  /xwidth xsize xextra 2 mul sub def
  /trxmin xmin xtr def /trxmax xmax xtr def
} def

% yset: set up all data for y axis, including limits and yticks
% yticksep yticks 0 alldata ymin ymax ylog yextra ydecr yaxis yticklength yset -
/yset
{ /yticklength exch def
  /yaxis exch def
  /ydecr exch def
  /yextra exch def
  yaxis exch ticksandlimits
  /ylog exch def /ymax exch def /ymin exch def /yticks exch def
  /yleft ydecr { ymax } { ymin } ifelse def
  /yright ydecr { ymin } { ymax } ifelse def
  /ywidth ysize yextra 2 mul sub def
  /trymin ymin ytr def /trymax ymax ytr def
} def

% rset: set up all data for y axis (again), but including limits and rticks
% rticksep rticks 0 alldata ymin ymax ylog yextra ydecr yaxis rticklength rset -
/rset
{ /rticklength exch def
  /yaxis exch def
  /ydecr exch def
  /yextra exch def
  yaxis exch ticksandlimits
  /ylog exch def /ymax exch def /ymin exch def /rticks exch def
  /yleft ydecr { ymax } { ymin } ifelse def
  /yright ydecr { ymin } { ymax } ifelse def
  /ywidth ysize yextra 2 mul sub def
  /trymin ymin ytr def /trymax ymax ytr def
} def

% norset: set up data for no rticks
% - norset -
/norset
{ /rticklength 0 def
  /rticks [] def
} def

% framestyle: print a frame around the graph
/framestyle
{ 0 0 moveto xsize 0 lineto xsize ysize lineto
  0 ysize lineto closepath stroke
  /printxtick /printxlabel xticks xleft printticks
  /printytick /printylabel yticks ymin printticks
  /printrtick /printrlabel rticks ymin printticks
} def

% gridstyle: print a frame around the graph, plus a grid
/gridstyle
{ 0 0 moveto xsize 0 lineto xsize ysize lineto
  0 ysize lineto closepath stroke
  /printxgrid /printxlabel xticks xleft printticks
  /printygrid /printylabel yticks ymin printticks
  /printrtick /printrlabel rticks ymin printticks
} def

% nonestyle: print nothing around the graph
/nonestyle
{
} def

% axesstyle: print axes for the graph (unless axis values missing)
/axesstyle
{
  xaxis false eq yaxis false eq or
  { framestyle }
  { xaxis yaxis trpoint dup 0 exch moveto xsize exch lineto
    dup 0 moveto ysize lineto stroke
    /printxaxistick /printxaxislabel xticks xleft printticks
    /printyaxistick /printyaxislabel yticks ymin printticks
  } ifelse
} def

% rundata: run all data sets
/rundata
{ alldata
  { gsave
    dup dup dup dup dup
    5 get /texture exch def
    4 get /dopaint exch def
    3 get /initrun exch def
    2 get /pairs exch def
    1 get /points exch def
    0 get /data exch def
    dopaint
    { data length 4 ge
      {
	gsave
	initrun
	newpath
	data 0 get ymin trpoint yextra sub moveto
	0 2 data length 2 sub
	{ dup 1 add
	  data exch get /ycurr exch def
	  data exch get /xcurr exch def
	  xcurr ycurr trpoint lineto
	} for
	data dup length 2 sub get ymin trpoint yextra sub lineto
	closepath texture fill
	grestore
      } if
    } if
    initrun
    data length 2 ge
    {
      /xcurr data 0 get def
      /ycurr data 1 get def
      points
      data length 4 ge
      { 2 2 data length 2 sub
	{ /xprev xcurr def
          /yprev ycurr def
	  dup dup 2 eq /firstpair exch def
	  data length 2 sub eq /lastpair exch def
	  dup 1 add
          data exch get /ycurr exch def
          data exch get /xcurr exch def
	  pairs
	  points
	} for
      } if
    } if
    grestore
  } forall
} def

end
%%EndResource

%%BeginResource: procset LoutPiePrependGraphic
% @PrependGraphic file /home/arnau/lout.lib/include/pief.lpg
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                                                    %
%  PostScript @SysPrependGraphic file for @Pie  Jeffrey H. Kingston  %
%  Version 1.0                                                       %
%                                                                    %
%  Jeffrey H. Kingston                                               %
%  October 2002                                                      %
%                                                                    %
%  This file has been placed in the public domain by its author,     %
%  Jeffrey H. Kingston                                               %
%                                                                    %
%  To assist in avoiding name clashes, the names of all symbols      %
%  defined here begin with "lpie".                                   %
%                                                                    %
%  <point>      is two numbers, a point.                             %
%  <length>     is one number, a length                              %
%  <angle>      is one number, an angle in degrees                   %
%  <dashlength> is one number, the preferred length of a dash        %
%                                                                    %
%  The following invariant is maintained from the end of the         %
%  call to lpiebegin to the beginning of the call to lpieend:        %
%                                                                    %
%  lpiecentre        is an executable function which leaves the two  %
%                    coordinates of the centre of the pie on the     %
%                    operand stack (signature - lpiectr <x> <y>)     %
%                                                                    %
%  lpieradius        is the radius of the pie                        %
%                                                                    %
%  lpieinitangle     is the initial angle                            %
%                                                                    %
%  lpietotalweight   is the total weight of all slices               %
%                                                                    %
%  lpiecurrentweight is the total weight of all slices so far        %
%                                                                    %
%  The first four are constants set by lpiebegin; the last is        %
%  updated as each slice is printed.                                 %
%                                                                    %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% install error handler into error dictionary
errordict begin
   /handleerror
   {
      {  /Times-Roman findfont 8 pt scalefont setfont
	 0 setgray 4 pt 4 pt moveto
	 $error /errorname get
	 dup lpiedict exch known
	 { lpiedict exch get }
	 { 100 string cvs } ifelse
	 show
	 (  Command: ) show
	 $error /command get 100 string cvs show
      } stopped {} if
      showpage stop
   } def
end

% initial coordinates of debug output
/lpiedebugposy 432 def
/lpiedebugposx 72 def

% <string> <int> lpiedebugprint -
% must be defined outside lpiedict since used in arbitrary places
% print <string> plus count or <int> stack entries, whichever is the smaller
/lpiedebugprint
{
  exch
  gsave
  initgraphics
  lpiedebugposy 72 lt
  { /lpiedebugposx lpiedebugposx 144 add store
    /lpiedebugposy 432 store
  }
  {
    /lpiedebugposy lpiedebugposy 12 sub store
  } ifelse
  lpiedebugposx lpiedebugposy moveto
  /Times-Roman findfont 10 scalefont setfont
  0 setgray show
  count 1 sub 2 copy lt { pop } { exch pop } ifelse 1 sub
  0 exch 1 exch
  {
    /lpiedebugposy lpiedebugposy 12 sub store
    lpiedebugposx 12 add lpiedebugposy moveto
    index
    dup type (dicttype) eq
    {
      (begin dict) show
      {
        /lpiedebugposy lpiedebugposy 12 sub store
        lpiedebugposx 24 add lpiedebugposy moveto
	pop 100 string cvs show
      } forall
      /lpiedebugposy lpiedebugposy 12 sub store
      lpiedebugposx 12 add lpiedebugposy moveto
      (end dict) show
    }
    {
      dup type (arraytype) eq
      {
	dup xcheck { (executable array) } { (literal array) } ifelse show
	{
          /lpiedebugposy lpiedebugposy 12 sub store
          lpiedebugposx 24 add lpiedebugposy moveto
	  100 string cvs show
        } forall
        /lpiedebugposy lpiedebugposy 12 sub store
        lpiedebugposx 12 add lpiedebugposy moveto
        (end array) show
      }
      {
        dup xcheck { (ex: ) } { (lit: ) } ifelse show
        100 string cvs show
      } ifelse
    } ifelse
  } for
  grestore
} def

% name lpiedebugpoint -
/lpieshowpoint
{
  dup cvx exec moveto 20 string cvs show newpath
} def

% begin pie: <totalweight> <initialangle> lpiebegin -
% must be defined outside lpiedict since it loads it
/lpiebegin
{ lpiedict begin
  20 dict begin
  xmark ymark /lpiecentre lpiepointdef
  /lpieradius xmark def
  /lpieinitialangle exch def
  /lpietotalweight exch def
  /lpiecurrentweight 0 def
} def

% end pie: - lpieend -
/lpieend
{
  end
  end
} def

% pie dictionary
/lpiedict 200 dict def

% subsequent definitions are held within the pie dictionary
lpiedict begin

% error messages
/syntaxerror (syntaxerror error:  syntax error in text of pie chart?) def
/typecheck (typecheck error:  syntax error in text of pie chart?) def
/undefined (undefined error:  unknown or misspelt label?) def
/VMError (VMError error:  run out of memory?) def

% maximum of two numbers:  <num> <num> lpiemax <num>
/lpiemax { 2 copy gt { pop } { exch pop } ifelse } def

% minimum of two numbers:  <num> <num> lpiemin <num>
/lpiemin { 2 copy lt { pop } { exch pop } ifelse } def

% add two points:  <point> <point> lpiepadd <point>
/lpiepadd
{
  % (Entering padd) 4 lpiedebugprint
  exch 3 1 roll add 3 1 roll add exch
  % (Leaving padd) 2 lpiedebugprint
} def

% subtract first point from second:  <point> <point> lpiepsub <point>
/lpiepsub { 3 2 roll sub 3 1 roll exch sub exch } def

% max two points:  <point> <point> lpiepmax <point>
/lpiepmax { exch 3 1 roll lpiemax 3 1 roll lpiemax exch } def

% min two points:  <point> <point> lpiepmin <point>
/lpiepmin { exch 3 1 roll lpiemin 3 1 roll lpiemin exch } def

% scalar multiplication: <point> <num> lpiepmul <point>
/lpiepmul { dup 3 1 roll mul 3 1 roll mul exch } def

% distance between two points:  <point> <point> lpiedistance <length>
/lpiedistance { lpiepsub dup mul exch dup mul add sqrt } def

% point at angle and distance
% <point> <length> <angle> lpieatangle <point>
/lpieatangle { 2 copy cos mul 3 1 roll sin mul lpiepadd } def

% stroke a solid line:  <length> <dashlength> lpiesolid -
/lpiesolid
{ % (Entering lpiesolid) 2 lpiedebugprint
  gsave pop pop [] 0 setdash 1 setlinecap stroke grestore newpath
  % (Leaving lpiesolid) 0 lpiedebugprint
} def

% stroke a dashed line:   <length> <dashlength> lpiedashed -
/lpiedashed
{  gsave
   2 copy div 2 le 1 index 0 le or
   {  exch pop 1 pt lpiemax [ exch dup ] 0 setdash }
   {  dup [ exch 4 2 roll 2 copy div
      1 sub 2 div ceiling dup 4 1 roll
      1 add mul sub exch div ] 0 setdash
   } ifelse 0 setlinecap stroke
   grestore newpath
} def

% stroke a cdashed line:  <length> <dashlength> lpiecdashed -
/lpiecdashed
{  % (Entering lpiecdashed) 2 lpiedebugprint
   gsave
   2 copy le 1 index 0 le or
   { exch pop 1 pt lpiemax [ exch dup ] dup 0 get 2 div setdash }
   { dup [ 4 2 roll exch 2 copy exch div
     2 div ceiling div 1 index sub
     ] exch 2 div setdash
   } ifelse 0 setlinecap stroke
   grestore newpath
   % (Leaving lpiecdashed) 0 lpiedebugprint
} def

% stroke a dotted line:  <length> <dashlength> lpiedotted -
/lpiedotted
{  gsave
   2 copy le 1 index 0 le or
   { exch pop 1 pt lpiemax [ exch 0 exch ] 0 setdash }
   { 1 index exch div ceiling div
     [ 0 3 2 roll ] 0 setdash
   } ifelse 1 setlinecap stroke
   grestore newpath
} def

% stroke a noline line:  <length> <dashlength> lpienoline -
/lpienoline
{ pop pop
} def

% label a point in current dictionary:  <point> /name lpiepointdef -
/lpiepointdef
{
  % (Entering lpiepointdef) 3 lpiedebugprint
  [ 4 2 roll transform /itransform cvx ] cvx def
  % (Leaving lpiepointdef) 0 lpiedebugprint
} def

% find the angle that the current slice starts at
% - lpiesliceangle1 <angle>
/lpiesliceangle1
{ lpiecurrentweight lpietotalweight div 360 mul lpieinitialangle add
} def

% find the angle that the current slice stops at
% - lpiesliceangle2 <angle>
/lpiesliceangle2
{ weight lpiecurrentweight add lpietotalweight div 360 mul lpieinitialangle add
} def

% find the angle that bisects the current slice
% - lpieslicemidangle <angle>
/lpieslicemidangle
{ weight 2 div lpiecurrentweight add lpietotalweight div 360 mul lpieinitialangle add
} def

% update the total weight
% - lpieupdateweight -
/lpieupdateweight
{ weight lpiecurrentweight add /lpiecurrentweight exch def
} def

% find the apex of the slice
% - lpiesliceapex <x> <y>
/lpiesliceapex
{ lpiecentre lpieradius detach mul lpieslicemidangle lpieatangle
} def

% find the end of the first arm of the slice
% - lpieslicearm1 <x> <y>
/lpieslicearm1
{ lpiesliceapex lpieradius lpiesliceangle1 lpieatangle
} def

% find the end of the second arm of the slice
% - lpieslicearm2 <x> <y>
/lpieslicearm2
{ lpiesliceapex lpieradius lpiesliceangle2 lpieatangle
} def

% set the whole closed path for the current slice
% - lpiesetslicepath -
/lpiesetslicepath
{ newpath lpiesliceapex moveto
  currentpoint lpieradius lpiesliceangle1 lpiesliceangle2 arc
  closepath
} def

% set the first segment of the current slice and return its length
% - lpiesetsegment1 <length>
/lpiesetsegment1
{ newpath lpiesliceapex moveto lpieslicearm1 lineto
  lpieradius
} def

% set the second segment of the current slice and return its length
% - lpiesetsegment2 <length>
/lpiesetsegment2
{ newpath lpiesliceapex moveto lpieslicearm2 lineto
  lpieradius
} def

% set the arc segment of the current slice and return its length
% - lpiesetarcsegment <length>
/lpiesetarcsegment
{ newpath
  lpiesliceapex lpieradius lpiesliceangle1 lpiesliceangle2 arc
  lpiesliceangle2 lpiesliceangle1 sub 180 div 3.14159 mul lpieradius mul
} def

% draw one slice
% <dashlength> [ <outlinecommand> ] <outlinewidth> { <paintcommand> }
% <weight> <detach> lpiedrawslice -
/lpiebeginslice
{
  % (Entering lpiebeginslice) 6 lpiedebugprint
  /detach exch def
  /weight exch def

  % paint the slice
  gsave lpiesetslicepath exec grestore

  % set the line width
  setlinewidth

  % stroke each segment separately to get dashes right
  2 copy lpiesetsegment1 3 1 roll
  dup length 0 exch mod get cvx
  % (Stroking segment1) count 1 sub lpiedebugprint
  exec

  2 copy lpiesetarcsegment 3 1 roll
  dup length 1 exch mod get cvx
  % (Stroking arc segment) count 1 sub lpiedebugprint
  exec

  lpiesetsegment2 3 1 roll
  dup length 2 exch mod get cvx
  % (Stroking segment2) count 1 sub lpiedebugprint
  exec

  % (Leaving lpiebeginslice) 0 lpiedebugprint
} def

% finish off one slice
/lpieendslice
{
  % (Entering lpieendslice) 0 lpiedebugprint

  % update current weight ready for next slice
  lpieupdateweight

  % (Leaving lpieendslice) 0 lpiedebugprint
} def

% translate label
% <xadjust> <yadjust> <labelradius> lpietranslatelabel -
/lpietranslatelabel
{
  % (Entering lpietranslatelabel) 3 lpiedebugprint 
  /labelradius exch def
  % lpiecentre (lpiecentre:) 2 lpiedebugprint pop pop
  % lpieradius (lpieradius:) 1 lpiedebugprint pop
  % labelradius (labelradius:) 1 lpiedebugprint pop
  % lpieslicemidangle (lpieslicemidangle:) 1 lpiedebugprint pop
  xsize 2 div ysize 2 div /labelcentre lpiepointdef
  labelcentre
  lpiesliceapex lpieradius labelradius mul lpieslicemidangle lpieatangle lpiepsub
  lpiepadd
  translate
  % (Leaving lpietranslatelabel) 0 lpiedebugprint 
} def

% fix an angle to 0 <= res < 360:  <angle> lpiefixangle <angle>
/lpiefixangle
{
  % (Entering lpiefixangle) 1 lpiedebugprint
  { dup 0 ge { exit } if
    360 add
  } loop
  { dup 360 lt { exit } if
    360 sub
  } loop
  % (Leaving lpiefixangle) 1 lpiedebugprint
} def

% angle from one point to another
% <point> <point> lpieangleto <angle>
/lpieangleto {
  lpiepsub 2 copy 0 eq exch 0 eq and {pop} {exch atan} ifelse
} def

% find point on circumference of box:  alpha a b lpieboxcircum x y
/lpieboxcircum
{
  % (Entering lpieboxcircum) 3 lpiedebugprint
  4 dict begin
    /b exch def
    /a exch def
    lpiefixangle /alpha exch def
    0 0 a b lpieangleto /theta exch def
    % a (a:) 1 lpiedebugprint pop
    % b (b:) 1 lpiedebugprint pop
    % theta (theta:) 1 lpiedebugprint pop
    % alpha (alpha:) 1 lpiedebugprint pop

    % if alpha <= theta, return (a, a*tan(alpha))
    alpha theta le
    { a  a alpha sin mul alpha cos div }
    {
      % else if alpha <= 180 - theta, return (b*cot(alpha), b)
      alpha 180 theta sub le
      { b alpha cos mul alpha sin div  b }
      {
        % else if alpha <= 180 + theta, return (-a, -a*tan(alpha))
        alpha 180 theta add le
        { a neg  a neg alpha sin mul alpha cos div }
        {
	  % else if alpha <= 360 - theta, return (-b*cot(alpha), -b)
	  alpha 360 theta sub le
          { b neg alpha cos mul alpha sin div  b neg }
	  {
	    % else 360 - theta <= alpha, return (a, a*tan(alpha))
	    a  a alpha sin mul alpha cos div
	  } ifelse
        } ifelse
      } ifelse
    } ifelse
  end
  % (Leaving lpieboxcircum) 2 lpiedebugprint
} def


% draw finger (will immediately follow lpietranslatelabel)
% <fingerdashlength> "[" <fingerstyle> "]" fingerwidth
% <fingeradjustx> <fingeradjusty> <fingerradius> lpiedrawfinger -
/lpiedrawfinger
{
  % (Entering lpidrawfinger) 6 lpiedebugprint
  % find inner endpoint of finger
  /fingerradius exch def
  lpiesliceapex lpieradius fingerradius mul
  lpieslicemidangle lpieatangle lpiepadd
  /fingerinner lpiepointdef
  xsize 2 div ysize 2 div /labelcentre lpiepointdef
  0 0 /labelorigin lpiepointdef

  % find outer endpoint of finger, on circumference of label
  labelcentre fingerinner lpieangleto
  xsize 2 div ysize 2 div
  lpieboxcircum labelcentre lpiepadd
  /fingerouter lpiepointdef

  % set the line width
  setlinewidth

  % draw line
  newpath fingerinner moveto fingerouter lineto
  fingerinner fingerouter lpiedistance 3 1 roll 0 get cvx exec
  % (Leaving lpiedrawfinger) 0 lpiedebugprint
} def

% draw arrowhead (will immediately follow lpiedrawfinger if reqd)
% <headlength> <headwidth> lpiedrawarrowhead
/lpiedrawarrowhead
{
  gsave
  /headwidth exch def
  /headlength exch def
  fingerinner translate
  fingerouter fingerinner lpieangleto rotate
  0 0 moveto
  headlength neg headwidth 2 div lineto
  0 headwidth neg rlineto
  closepath fill
  grestore
} def
end
%%EndResource

%%EndProlog

%%BeginSetup
%%BeginResource: encoding vec2
/vec2 [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/space /exclam /quotedbl /numbersign /dollar /percent /ampersand /quoteright
/parenleft /parenright /asterisk /plus /comma /hyphen /period /slash
/zero /one /two /three /four /five /six /seven
/eight /nine /colon /semicolon /less /equal /greater /question
/at /A /B /C /D /E /F /G
/H /I /J /K /L /M /N /O
/P /Q /R /S /T /U /V /W
/X /Y /Z /bracketleft /backslash /bracketright /asciicircum /underscore
/quoteleft /a /b /c /d /e /f /g
/h /i /j /k /l /m /n /o
/p /q /r /s /t /u /v /w
/x /y /z /braceleft /bar /braceright /asciitilde /.notdef
/quotesinglbase /quotedblbase /ellipsis /OE /oe /quotedblleft /quotedblright /fi
/fl /endash /emdash /bullet /dagger /daggerdbl /florin /fraction
/dotlessi /grave /acute /circumflex /tilde /macron /breve /dotaccent
/dieresis /.notdef /ring /cedilla /.notdef /hungarumlaut /ogonek /caron
/space /exclamdown /cent /sterling /currency /yen /brokenbar /section
/dieresis /copyright /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron
/degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph /periodcentered
/cedilla /onesuperior /ordmasculine /guillemotright /onequarter /onehalf /threequarters /questiondown
/Agrave /Aacute /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla
/Egrave /Eacute /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis
/Eth /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply
/Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn /germandbls
/agrave /aacute /acircumflex /atilde /adieresis /aring /ae /ccedilla
/egrave /eacute /ecircumflex /edieresis /igrave /iacute /icircumflex /idieresis
/eth /ntilde /ograve /oacute /ocircumflex /otilde /odieresis /divide
/oslash /ugrave /uacute /ucircumflex /udieresis /yacute /thorn /ydieresis
] def
%%EndResource

/pdfmark where {pop} {userdict /pdfmark /cleartomark load put} ifelse
%%EndSetup

%%Page: i 1
%%BeginPageSetup
%%PageResources: font Times-Roman
%%+ font Times-Bold
%%+ font Times-Italic
/pgsave save def
%%IncludeResource: font Times-Roman
/Times-Romanfnt1 vec2 /Times-Roman LoutRecode
/fnt1 { /Times-Romanfnt1 LoutFont } def
%%IncludeResource: font Times-Bold
/Times-Boldfnt2 vec2 /Times-Bold LoutRecode
/fnt2 { /Times-Boldfnt2 LoutFont } def
%%IncludeResource: font Times-Italic
/Times-Italicfnt3 vec2 /Times-Italic LoutRecode
/fnt3 { /Times-Italicfnt3 LoutFont } def
0.0500 dup scale 10 setlinewidth
%%EndPageSetup

gsave
0 0 translate
240 fnt1 0.0 0.0 0.0 LoutSetRGBColor LoutTextureSolid 11900 16840 0 16840 240 288 60 LoutGraphic
gsave
LoutPageSet
grestore
gsave
0 0 translate
1.0 1.0 1.0 LoutSetRGBColor 11900 16840 0 16840 240 288 60 LoutGraphic
gsave
LoutBox gsave 1.0 1.0 1.0 LoutSetRGBColor  fill grestore 0 cm setlinewidth stroke
grestore
gsave
0 16840 translate
0.0000 rotate
gsave
1417 -15423 translate
0.0 0.0 0.0 LoutSetRGBColor
9066 14006 0 14006 240 288 60 LoutGraphic
gsave
1 LoutMargSet
grestore
240 fnt2 1585 12401(Notes)m 2210(on)s 2519(cr)s 4(eating)k
3407(a)s 3585(solv)s 2(er)k 4252(f)s 6(or)k
4609(the)s 4983(Na)s 6(vier\211Stok)k 2(es)k 6504(equations)s
240 fnt3 3644 11901(Arnau)m 4297(Pr)s 3(at)k 4783(Gasull)s
240 fnt1 4050 11446(ESEIAA)m 26(T)k 3923 10993(August)m 4675(2017)s
240 fnt2 4163 10200(Sinopsi)m 240 fnt1 0 9700(In)m 240(this)s
619(document)s 1606(the)s 1938(reader)s 2577(will)s 2986(\207nd)s
3401(information)s 4569(concerning)s 5668(the)s 6000(de)s 6(v)k 3(elopment)k
7270(of)s 7524(a)s 7673(Na)s 4(vier\211Stok)k 2(es)k
0 9412(solv)m 3(er)k 626(which)s 1253(uses)s 1701(numerical)s
2695(analysis.)s 3554(This)s 4015(information)s 5184(is)s 5379(collected)s
6284(from)s 6792(dif)s 6(ferent)k 7652(sources,)s 8461(as)s
8695(part)s 0 9124(of)m 271(my)s 631(Final)s 1177(Y)s 24(ear)k
1677(Aerospace)s 2742(Engineering)s 3964(Project.)s 
grestore
gsave
1417 -15423 translate
0.0 0.0 0.0 LoutSetRGBColor 0 0 0 0 240 288 60 LoutGraphic
gsave
1 LoutMargSet
grestore

grestore

grestore

grestore

grestore

pgsave restore
showpage

%%Page: 1 2
%%BeginPageSetup
%%PageResources: font Times-Roman
%%+ font Times-Bold
%%+ font Times-Italic
/pgsave save def
%%IncludeResource: font Times-Roman
/Times-Romanfnt1 vec2 /Times-Roman LoutRecode
/fnt1 { /Times-Romanfnt1 LoutFont } def
%%IncludeResource: font Times-Bold
/Times-Boldfnt2 vec2 /Times-Bold LoutRecode
/fnt2 { /Times-Boldfnt2 LoutFont } def
%%IncludeResource: font Times-Italic
/Times-Italicfnt3 vec2 /Times-Italic LoutRecode
/fnt3 { /Times-Italicfnt3 LoutFont } def
0.0500 dup scale 10 setlinewidth
%%EndPageSetup
gsave
0 0 translate
240 fnt1 0.0 0.0 0.0 LoutSetRGBColor LoutTextureSolid 11900 16840 0 16840 240 288 60 LoutGraphic
gsave
LoutPageSet
grestore
gsave
0 0 translate
1.0 1.0 1.0 LoutSetRGBColor 11900 16840 0 16840 240 288 60 LoutGraphic
gsave
LoutBox gsave 1.0 1.0 1.0 LoutSetRGBColor  fill grestore 0 cm setlinewidth stroke
grestore
gsave
0 16840 translate
0.0000 rotate
gsave
1417 -15423 translate
0.0 0.0 0.0 LoutSetRGBColor
9066 14006 0 14006 240 288 60 LoutGraphic
gsave
1 LoutMargSet
grestore
240 fnt2 1585 12401(Notes)m 2210(on)s 2519(cr)s 4(eating)k
3407(a)s 3585(solv)s 2(er)k 4252(f)s 6(or)k
4609(the)s 4983(Na)s 6(vier\211Stok)k 2(es)k 6504(equations)s
240 fnt3 3644 11901(Arnau)m 4297(Pr)s 3(at)k 4783(Gasull)s
240 fnt1 4050 11446(ESEIAA)m 26(T)k 3923 10993(August)m 4675(2017)s
240 fnt2 0 10351(1.)m 291(Intr)s 4(oduction)k 
[ /Dest /LOUT10_694_contents_introduction_1 /DEST pdfmark
240 fnt1
480 9920(The)m 936(aim)s 1382(of)s 1681(Computational)s 3186(Fluid)s
3777(Dynamics)s 4826(\(CFD\))s 5528(is)s 5766(to)s 6033(model)s
6714(the)s 7090(continuous)s 8220(\210uids)s 8832(by)s 0 9632(applying)m
894(mathematical)s 2238(resources)s 3194(on)s 3494(the)s 3845(equations)s
4816(that)s 5237(go)s 3(v)k 3(ern)k 5956(the)s
6307(\210uid)s 6807(\210o)s 6(w)k 15(,)k 7322(the)s
7673(Na)s 4(vier\211Stok)k 2(es)k 0 9344(\(NS\))m 553(equations.)s
1614(In)s 1910(order)s 2514(to)s 2793(obtain)s 3488(a)s
3695(v)s 6(alid)k 4265(solution)s 5133(ef\207ciently)s 15(,)k
6233(a)s 6439(good)s 7017(understanding)s 8466(of)s 8778(the)s
0 9056(ph)m 1(ysics)k 756(that)s 1161(come)s 1723(into)s
2135(play)s 2588(in)s 2819(the)s 3154(problems)s 4082(is)s
4280(required,)s 5170(as)s 5408(well)s 5861(as)s 6098(computer)s
7049(operations)s 8083(and)s 8474(po)s 6(wer)k 0 8768(management)m
1282(kno)s 6(wledge.)k 2431(Information)s 3629(related)s 4336(to)s
4575(these)s 5122(topics)s 5744(is)s 5954(found)s 6571(in)s
6814(this)s 7210(document.)s 480 8394(The)m 919(solv)s 3(er)k
1572(soon-to-be)s 2662(de)s 6(v)k 3(eloped)k 3707(will)s
4144(f)s 2(all)k 4526(under)s 5142(the)s 5502(cate)s 3(gory)k
6387(of)s 6670(numerical)s 7691(solv)s 3(ers,)k 8484(which)s
0 8106(use)m 384(numerical)s 1404(analysis)s 2235(to)s 2484(compute)s
3373(an)s 3666(approximation)s 5128(of)s 5409(the)s 5766(desired)s
6524(solution.)s 7409(Note)s 7940(that)s 8368(solving)s 0 7818(the)m
406(Na)s 4(vier\211Stok)k 2(es)k 1917(equations)s 2943(analytically)s
4169(for)s 4565(the)s 4971(v)s 6(ast)k 5468(majority)s
6389(of)s 6718(practical)s 7652(applications)s 8916(is)s 0 7530(impossible)m
153 fnt1 1032 7619(1)m 240 fnt1 1092 7530(.)m 480 7156(Because)m
1367(my)s 1761(Final)s 2341(Y)s 24(ear)k 2876(Project)s
3646(\(FYP\))s 4326(will)s 4787(be)s 5103(related)s 5844(to)s
6117(a)s 6318(project)s 7075(aimed)s 7751(at)s 8018(de)s 6(v)k 3(eloping)k
0 6868(a)m 185(solv)s 3(er)k 845(for)s 1202(the)s
1569(NS)s 1940(equations,)s 2983(I)s 3137(must)s 3681(mak)s 2(e)k
4273(sure)s 4746(that)s 5183(the)s 5550(inner)s 6120(w)s 2(orkings)k
7080(of)s 7370(a)s 7555(basic)s 8118(solv)s 3(er)k
8779(are)s 0 6580(fully)m 502(understood)s 1621(by)s 1911(the)s
2256(time)s 2732(I)s 2864(start)s 3330(coding)s 4032(for)s
4366(the)s 4711(FYP)s 26(.)k 5225(I)s 5356(ha)s 4(v)k 3(e)k
5854(written)s 6583(this)s 6976(report)s 7602(to)s 7838(summary)s
8778(the)s 0 6292(information)m 1186(g)s 1(athered)k 2068(from)s
2594(dif)s 6(ferent)k 3471(sources)s 4241(and)s 4647(document)s
5652(my)s 6014(progress.)s 6930(The)s 7360(reader)s 8018(must)s
8545(kno)s 6(w)k 0 6004(that)m 431(this)s 841(document)s
1859(will)s 2298(suf)s 6(fer)k 2922(constant)s 3793(changes)s
4629(until)s 5135(I)s 5284(feel)s 5710(suf\207ciently)s 6852(con\207dent)s
7817(to)s 8070(pursue)s 8778(the)s 0 5716(FYP)m 26(.)k
515(Once)s 1073(I)s 1205(de)s 6(v)k 4(ote)k
1886(myself)s 2605(to)s 2841(the)s 3187(FYP)s 26(,)k
3704(this)s 4097(document)s 5098(will)s 5521(be)s 5800(freezed)s
6558(and)s 6959(remain)s 7676(as)s 7923(proof)s 8510(of)s
8778(the)s 0 5428(w)m 2(ork)k 551(done.)s 480 5054(This)m
968(document)s 1985(is)s 2207(typeset)s 2957(with)s 3451(and)s
3868(compiled)s 4828(using)s 5413(Lout.)s 5981(In)s 6250(this)s
6658(project,)s 7441(Lout)s 7965(is)s 8188(used)s 8697(as)s
8960(a)s 0 4766(document)m 1008(formatter)s 1959(similar)s 2685(to)s
2928(L)s 192 fnt1 3000 4801(A)m 240 fnt1 3096 4766(T)m
3192 4718(E)m 3300 4766(X)m 3533(so)s 3803(I)s 3942(can)s
4336(test)s 4731(the)s 5083(con)s 9(v)k 3(enience)k
6327(of)s 6602(writing)s 7349(the)s 7701(FYP)s 8201(using)s
8778(the)s 0 4478(same)m 547(tools.)s 1116(The)s 1545(initial)s
2156(idea)s 2615(is)s 2825(to)s 3065(write)s 3611(the)s
3959(FYP)s 4456(in)s 4699(Lout,)s 5259(so)s 5525(I)s
5661(can)s 6050(reuse)s 6610(some)s 7172(of)s 7443(the)s
7792(parts)s 8307(of)s 8579(these)s 0 4190(document)m 1004(without)s
1795(modi\207cation.)s 240 fnt2 0 3446(2.)m 291(Understanding)s 1875(the)s
2249(natur)s 4(e)k 2978(of)s 3250(the)s 3624(\210uid)s
4144(\210o)s 2(w)k 
[ /Dest /LOUT10_694_contents_natureofflow_1 /DEST pdfmark
240 fnt1 480 2969(The)m 908(follo)s 6(wing)k
1885(is)s 2095(a)s 2261(brief)s 2783(summary)s 3727(of)s
3998(the)s 4346(contents)s 5194(taught)s 5852(in)s 6095(Fluid)s
6658(Mechanics.)s 1134 0 0 0 240 288 60 0 727 LoutGr2
0 0 moveto xsize 0 lineto stroke
grestore

grestore
122 fnt1 0 532(1)m 192 fnt1 53 462(If)m
230(the)s 503(reader)s 1022(is)s 1184(interested)s 1968(in)s
2157(de)s 4(v)k 2(eloping)k 3040(an)s 3261(analytical)s
4043(solv)s 2(er)k 7(,)k 4582(an)s 4803(obligatory)s
5628(step)s 5973(is)s 6135(to)s 6321(solv)s 2(e)k
6762(the)s 7035(reno)s 4(wned)k 7827(Millenium)s 8677(Prize)s
0 232(Problem)m 704(stated)s 1206(by)s 1450(the)s 1738(Clay)s
2152(Mathematics)s 3190(Institute,)s 3910(which)s 4433(challenges)s 5290(the)s
5578(fearless)s 6209(mathematician)s 7391(to)s 7591(proof)s 8071(the)s
8359(e)s 2(xistence)k 0 2(and)m 324(smoothness)s 1258(of)s
1474(Na)s 3(vier\211Stok)k 1(es)k 2637(solutions.)s 
grestore
gsave
1417 -15423 translate
0.0 0.0 0.0 LoutSetRGBColor
0 0 0 0 240 288 60 LoutGraphic
gsave
1 LoutMargSet
grestore

grestore

grestore

grestore

grestore

pgsave restore
showpage

%%Page: 2 3
%%BeginPageSetup
%%PageResources: font Times-Roman
%%+ font Times-Bold
/pgsave save def
%%IncludeResource: font Times-Roman
/Times-Romanfnt1 vec2 /Times-Roman LoutRecode
/fnt1 { /Times-Romanfnt1 LoutFont } def
%%IncludeResource: font Times-Bold
/Times-Boldfnt2 vec2 /Times-Bold LoutRecode
/fnt2 { /Times-Boldfnt2 LoutFont } def
0.0500 dup scale 10 setlinewidth
%%EndPageSetup
gsave
0 0 translate
240 fnt1 0.0 0.0 0.0 LoutSetRGBColor LoutTextureSolid 11900 16840 0 16840 240 288 60 LoutGraphic
gsave
LoutPageSet
grestore
gsave
0 0 translate
1.0 1.0 1.0 LoutSetRGBColor 11900 16840 0 16840 240 288 60 LoutGraphic
gsave
LoutBox gsave 1.0 1.0 1.0 LoutSetRGBColor  fill grestore 0 cm setlinewidth stroke
grestore
gsave
0 16840 translate
0.0000 rotate
0.0 0.0 0.0 LoutSetRGBColor
5765 -1579(-)m 5893(2)s 6067(-)s 5668 13419 0 13419 240 288 60 1417 -15423 LoutGr2
0 LoutMargSet
grestore
5668 1600 523 1374 240 288 60 0 11819 LoutGr2

200 ldiagbegin
grestore
1047 1027 523 800 240 288 60 0 0 LoutGr2
(L) ldiagpushtagdict
grestore
1047 1027 523 800 240 288 60 0 0 LoutGr2
(T) ldiagpushtagdict
grestore
1047 454 523 227 240 288 60 0 573 LoutGr2
ldiagnodebegin [ (0.6f) ldiagcurvebox ] 0.2 ft
[ /ldiagsolid ] 0.04 ft
{  }
{} ldiagnodeend
(IN) ldiagpushtagdict
grestore
144 147(In)m 9(viscid)k
ldiagpopuptagdict
grestore
ldiagpopuptagdict
grestore
ldiagpopuptagdict
grestore
791 453 395 227 240 288 60 1167 1147 LoutGr2
(T) ldiagpushtagdict
grestore
791 453 395 227 240 288 60 0 0 LoutGr2
ldiagnodebegin [ (0.6f) ldiagcurvebox ] 0.2 ft
[ /ldiagsolid ] 0.04 ft
{  }
{} ldiagnodeend
(IN) ldiagpushtagdict
grestore
144 146(Fluid)m ldiagpopuptagdict
grestore
ldiagpopuptagdict
grestore
0 453 0 227 240 288 60 1958 1147 LoutGr2
1 ldiaglinkbegin 
[ 0
0
{ T } { L@T }
0.8 ft 0.8 ft ldiaglinepath ] 0.2 ft [ /ldiagsolid ] 0.04 ft ldiaglinkend
grestore

grestore
3590 1027 548 800 240 288 60 2078 0 LoutGr2
(R) ldiagpushtagdict
grestore
1097 453 548 227 240 288 60 0 0 LoutGr2
(L) ldiagpushtagdict
grestore
1097 453 548 227 240 288 60 0 0 LoutGr2
(T) ldiagpushtagdict
grestore
1097 453 548 227 240 288 60 0 0 LoutGr2
ldiagnodebegin [ (0.6f) ldiagcurvebox ] 0.2 ft
[ /ldiagsolid ] 0.04 ft
{  }
{} ldiagnodeend
(IN) ldiagpushtagdict
grestore
144 146(Laminar)m ldiagpopuptagdict
grestore
ldiagpopuptagdict
grestore
ldiagpopuptagdict
grestore
1036 453 518 227 240 288 60 1217 573 LoutGr2
(T) ldiagpushtagdict
grestore
1036 453 518 227 240 288 60 0 0 LoutGr2
ldiagnodebegin [ (0.6f) ldiagcurvebox ] 0.2 ft
[ /ldiagsolid ] 0.04 ft
{  }
{} ldiagnodeend
(IN) ldiagpushtagdict
grestore
144 146(V)m 14(iscous)k ldiagpopuptagdict
grestore
ldiagpopuptagdict
grestore
0 453 0 227 240 288 60 2253 573 LoutGr2
1 ldiaglinkbegin 
[ 0
0
{ T } { L@T }
0.8 ft 0.8 ft ldiaglinepath ] 0.2 ft [ /ldiagsolid ] 0.04 ft ldiaglinkend
grestore

grestore
1217 453 608 227 240 288 60 2373 0 LoutGr2
(R) ldiagpushtagdict
grestore
1217 453 608 227 240 288 60 0 0 LoutGr2
(T) ldiagpushtagdict
grestore
1217 453 608 227 240 288 60 0 0 LoutGr2
ldiagnodebegin [ (0.6f) ldiagcurvebox ] 0.2 ft
[ /ldiagsolid ] 0.04 ft
{  }
{} ldiagnodeend
(IN) ldiagpushtagdict
grestore
144 146(T)m 10(urb)k 4(ulent)k
ldiagpopuptagdict
grestore
ldiagpopuptagdict
grestore
ldiagpopuptagdict
grestore
0 453 0 227 240 288 60 3590 573 LoutGr2
1 ldiaglinkbegin 
[ 0
0
{ T } { R@T }
0.8 ft 0.8 ft ldiaglinepath ] 0.2 ft [ /ldiagsolid ] 0.04 ft ldiaglinkend
grestore

grestore
ldiagpopuptagdict
grestore
0 453 0 227 240 288 60 5668 1147 LoutGr2
1 ldiaglinkbegin 
[ 0
0
{ T } { R@T }
0.8 ft 0.8 ft ldiaglinepath ] 0.2 ft [ /ldiagsolid ] 0.04 ft ldiaglinkend
grestore

grestore
ldiagend

grestore

[ /Dest /LOUT9_3821_contents_natureofflow_1 /DEST pdfmark
200 fnt2 1481 11256(Figura)m 2105(1.)s 200 fnt1 2347 11257(Fluid)m
2817(Mechanics)s 3720(topics)s 
grestore
0 0 0 0 240 288 60 1417 -15423 LoutGr2
0 LoutMargSet
grestore

grestore

grestore

grestore

grestore

pgsave restore
showpage

%%Trailer
%%DocumentNeededResources: font Times-Roman
%%+ font Times-Bold
%%+ font Times-Italic
%%DocumentSuppliedResources: procset LoutStartUp
%%+  procset LoutBasicSetup
%%+  procset LoutDiagPrependGraphic
%%+  procset LoutGraphPrependGraphic
%%+  procset LoutPiePrependGraphic
%%+ encoding vec2
%%Pages: 3
%%EOF
